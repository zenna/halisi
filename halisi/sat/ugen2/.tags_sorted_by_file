!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run aclocal-1.11$/;"	m
ACLOCAL_AMFLAGS	Makefile	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \\$/;"	m
AR	Makefile	/^AR = ar$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run automake-1.11$/;"	m
AUTOMAKE_OPTIONS	Makefile	/^AUTOMAKE_OPTIONS = foreign 1.4$/;"	m
AWK	Makefile	/^AWK = mawk$/;"	m
CC	Makefile	/^CC = \/usr\/bin\/gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g3 -gdwarf-2$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = config.h$/;"	m
CPP	Makefile	/^CPP = \/usr\/bin\/gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CXX	Makefile	/^CXX = \/usr\/bin\/g++$/;"	m
CXXCPP	Makefile	/^CXXCPP = \/usr\/bin\/g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g3 -gdwarf-2$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = README $(am__configure_deps) $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES =$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = HOWTO_VisualCpp HOWTO_MinGW32 \\$/;"	m
FGREP	Makefile	/^FGREP = \/bin\/grep -F$/;"	m
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
LD	Makefile	/^LD = \/usr\/bin\/ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = -lz $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run makeinfo$/;"	m
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OPENMP_CXXFLAGS	Makefile	/^OPENMP_CXXFLAGS = -fopenmp$/;"	m
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
PACKAGE	Makefile	/^PACKAGE = cmsat$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = cmsat$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = cmsat 2.9.8$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = cmsat$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 1.1$/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	Makefile	/^SOURCES =$/;"	m
STRIP	Makefile	/^STRIP = strip$/;"	m
SUBDIRS	Makefile	/^SUBDIRS = cmsat man$/;"	m
VERSION	Makefile	/^VERSION = 1.1$/;"	m
abs_builddir	Makefile	/^abs_builddir = \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = \/usr\/bin\/gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = $/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
build	Makefile	/^build = i686-pc-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = i686$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = pc$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
host	Makefile	/^host = i686-pc-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = i686$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = pc$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mkdir_p	Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/cmsat$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/cmsat$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/cmsat$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/cmsat$/;"	m
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
psdir	Makefile	/^psdir = ${docdir}$/;"	m
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
srcdir	Makefile	/^srcdir = .$/;"	m
subdir	Makefile	/^subdir = .$/;"	m
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
ACLOCAL	build/Makefile	/^ACLOCAL = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run aclocal-1.11$/;"	m
ACLOCAL_AMFLAGS	build/Makefile	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACLOCAL_M4	build/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	build/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_RECURSIVE_TARGETS	build/Makefile	/^AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \\$/;"	m
AR	build/Makefile	/^AR = ar$/;"	m
AUTOCONF	build/Makefile	/^AUTOCONF = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run autoconf$/;"	m
AUTOHEADER	build/Makefile	/^AUTOHEADER = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run autoheader$/;"	m
AUTOMAKE	build/Makefile	/^AUTOMAKE = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run automake-1.11$/;"	m
AUTOMAKE_OPTIONS	build/Makefile	/^AUTOMAKE_OPTIONS = foreign 1.4$/;"	m
AWK	build/Makefile	/^AWK = gawk$/;"	m
CC	build/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	build/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CFLAGS	build/Makefile	/^CFLAGS = -g -O2$/;"	m
CONFIG_CLEAN_FILES	build/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	build/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	build/Makefile	/^CONFIG_HEADER = config.h$/;"	m
CPP	build/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	build/Makefile	/^CPPFLAGS = $/;"	m
CTAGS	build/Makefile	/^CTAGS = ctags$/;"	m
CXX	build/Makefile	/^CXX = g++$/;"	m
CXXCPP	build/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	build/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	build/Makefile	/^CXXFLAGS = -g -O3 -Wall -pedantic -std=c++11 -lrt $/;"	m
CYGPATH_W	build/Makefile	/^CYGPATH_W = echo$/;"	m
DEFS	build/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	build/Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	build/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	build/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	build/Makefile	/^DIST_COMMON = README $(am__configure_deps) $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	build/Makefile	/^DIST_SOURCES =$/;"	m
DIST_SUBDIRS	build/Makefile	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DLLTOOL	build/Makefile	/^DLLTOOL = false$/;"	m
DSYMUTIL	build/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	build/Makefile	/^DUMPBIN = $/;"	m
ECHO_C	build/Makefile	/^ECHO_C = $/;"	m
ECHO_N	build/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	build/Makefile	/^ECHO_T = $/;"	m
EGREP	build/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ETAGS	build/Makefile	/^ETAGS = etags$/;"	m
EXEEXT	build/Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	build/Makefile	/^EXTRA_DIST = HOWTO_VisualCpp HOWTO_MinGW32 \\$/;"	m
FGREP	build/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
GREP	build/Makefile	/^GREP = \/bin\/grep$/;"	m
GZIP_ENV	build/Makefile	/^GZIP_ENV = --best$/;"	m
INSTALL	build/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	build/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	build/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	build/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	build/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	build/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
LD	build/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	build/Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	build/Makefile	/^LIBOBJS = $/;"	m
LIBS	build/Makefile	/^LIBS = -lz $/;"	m
LIBTOOL	build/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIPO	build/Makefile	/^LIPO = $/;"	m
LN_S	build/Makefile	/^LN_S = ln -s$/;"	m
LTLIBOBJS	build/Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	build/Makefile	/^MAKEINFO = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run makeinfo$/;"	m
MANIFEST_TOOL	build/Makefile	/^MANIFEST_TOOL = :$/;"	m
MKDIR_P	build/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
NM	build/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	build/Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	build/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	build/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
OBJDUMP	build/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	build/Makefile	/^OBJEXT = o$/;"	m
OPENMP_CXXFLAGS	build/Makefile	/^OPENMP_CXXFLAGS = -fopenmp$/;"	m
OTOOL	build/Makefile	/^OTOOL = $/;"	m
OTOOL64	build/Makefile	/^OTOOL64 = $/;"	m
PACKAGE	build/Makefile	/^PACKAGE = cmsat$/;"	m
PACKAGE_BUGREPORT	build/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	build/Makefile	/^PACKAGE_NAME = cmsat$/;"	m
PACKAGE_STRING	build/Makefile	/^PACKAGE_STRING = cmsat 1.1$/;"	m
PACKAGE_TARNAME	build/Makefile	/^PACKAGE_TARNAME = cmsat$/;"	m
PACKAGE_URL	build/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	build/Makefile	/^PACKAGE_VERSION = 1.1$/;"	m
PATH_SEPARATOR	build/Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	build/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	build/Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	build/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	build/Makefile	/^PRE_UNINSTALL = :$/;"	m
RANLIB	build/Makefile	/^RANLIB = ranlib$/;"	m
RECURSIVE_CLEAN_TARGETS	build/Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	build/Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\$/;"	m
SED	build/Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	build/Makefile	/^SET_MAKE = $/;"	m
SHELL	build/Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	build/Makefile	/^SOURCES =$/;"	m
STRIP	build/Makefile	/^STRIP = strip$/;"	m
SUBDIRS	build/Makefile	/^SUBDIRS = cmsat man$/;"	m
VERSION	build/Makefile	/^VERSION = 1.1$/;"	m
VPATH	build/Makefile	/^VPATH = ..$/;"	m
abs_builddir	build/Makefile	/^abs_builddir = \/home\/zenna\/repos\/cusp\/ugen2\/build$/;"	m
abs_srcdir	build/Makefile	/^abs_srcdir = \/home\/zenna\/repos\/cusp\/ugen2\/build\/..$/;"	m
abs_top_builddir	build/Makefile	/^abs_top_builddir = \/home\/zenna\/repos\/cusp\/ugen2\/build$/;"	m
abs_top_srcdir	build/Makefile	/^abs_top_srcdir = \/home\/zenna\/repos\/cusp\/ugen2\/build\/..$/;"	m
ac_ct_AR	build/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	build/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	build/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	build/Makefile	/^ac_ct_DUMPBIN = $/;"	m
am__CONFIG_DISTCLEAN_FILES	build/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__aclocal_m4_deps	build/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__can_run_installinfo	build/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	build/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	build/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__distuninstallcheck_listfiles	build/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	build/Makefile	/^am__include = include$/;"	m
am__leading_dot	build/Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	build/Makefile	/^am__make_dryrun = \\$/;"	m
am__quote	build/Makefile	/^am__quote = $/;"	m
am__relativize	build/Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	build/Makefile	/^am__remove_distdir = \\$/;"	m
am__tar	build/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__untar	build/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
bindir	build/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
build	build/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	build/Makefile	/^build_alias = $/;"	m
build_cpu	build/Makefile	/^build_cpu = x86_64$/;"	m
build_os	build/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	build/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	build/Makefile	/^build_vendor = unknown$/;"	m
builddir	build/Makefile	/^builddir = .$/;"	m
datadir	build/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	build/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
distcleancheck_listfiles	build/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	build/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	build/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
docdir	build/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dvidir	build/Makefile	/^dvidir = ${docdir}$/;"	m
exec_prefix	build/Makefile	/^exec_prefix = ${prefix}$/;"	m
host	build/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	build/Makefile	/^host_alias = $/;"	m
host_cpu	build/Makefile	/^host_cpu = x86_64$/;"	m
host_os	build/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	build/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	build/Makefile	/^host_vendor = unknown$/;"	m
htmldir	build/Makefile	/^htmldir = ${docdir}$/;"	m
includedir	build/Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	build/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
install_sh	build/Makefile	/^install_sh = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/install-sh$/;"	m
install_sh_DATA	build/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	build/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	build/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
libdir	build/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	build/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
localedir	build/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	build/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
mandir	build/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mkdir_p	build/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	build/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
oldincludedir	build/Makefile	/^oldincludedir = \/usr\/include$/;"	m
pdfdir	build/Makefile	/^pdfdir = ${docdir}$/;"	m
pkgdatadir	build/Makefile	/^pkgdatadir = $(datadir)\/cmsat$/;"	m
pkgincludedir	build/Makefile	/^pkgincludedir = $(includedir)\/cmsat$/;"	m
pkglibdir	build/Makefile	/^pkglibdir = $(libdir)\/cmsat$/;"	m
pkglibexecdir	build/Makefile	/^pkglibexecdir = $(libexecdir)\/cmsat$/;"	m
prefix	build/Makefile	/^prefix = \/usr\/local$/;"	m
program_transform_name	build/Makefile	/^program_transform_name = s,x,x,$/;"	m
psdir	build/Makefile	/^psdir = ${docdir}$/;"	m
sbindir	build/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sharedstatedir	build/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
srcdir	build/Makefile	/^srcdir = ..$/;"	m
subdir	build/Makefile	/^subdir = .$/;"	m
sysconfdir	build/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tardir	build/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	build/Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	build/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	build/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	build/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
tardir	build/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma$/;"	m
target_alias	build/Makefile	/^target_alias = $/;"	m
top_build_prefix	build/Makefile	/^top_build_prefix = $/;"	m
top_builddir	build/Makefile	/^top_builddir = .$/;"	m
top_distdir	build/Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	build/Makefile	/^top_srcdir = ..$/;"	m
transform	build/Makefile	/^transform = $(program_transform_name)$/;"	m
ACLOCAL	build/cmsat/Makefile	/^ACLOCAL = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run aclocal-1.11$/;"	m
ACLOCAL_M4	build/cmsat/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	build/cmsat/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CXXFLAGS	build/cmsat/Makefile	/^AM_CXXFLAGS = -Wall $(all_includes) -I$(srcdir)\/..\/ $(OPENMP_CXXFLAGS)$/;"	m
AR	build/cmsat/Makefile	/^AR = ar$/;"	m
AUTOCONF	build/cmsat/Makefile	/^AUTOCONF = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run autoconf$/;"	m
AUTOHEADER	build/cmsat/Makefile	/^AUTOHEADER = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run autoheader$/;"	m
AUTOMAKE	build/cmsat/Makefile	/^AUTOMAKE = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run automake-1.11$/;"	m
AWK	build/cmsat/Makefile	/^AWK = gawk$/;"	m
CC	build/cmsat/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	build/cmsat/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CFLAGS	build/cmsat/Makefile	/^CFLAGS = -g -O2$/;"	m
CONFIG_CLEAN_FILES	build/cmsat/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	build/cmsat/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	build/cmsat/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	build/cmsat/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	build/cmsat/Makefile	/^CPPFLAGS = $/;"	m
CTAGS	build/cmsat/Makefile	/^CTAGS = ctags$/;"	m
CXX	build/cmsat/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	build/cmsat/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	build/cmsat/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	build/cmsat/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	build/cmsat/Makefile	/^CXXFLAGS = -g -O3 -Wall -pedantic -std=c++11 -lrt $/;"	m
CXXLD	build/cmsat/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	build/cmsat/Makefile	/^CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	build/cmsat/Makefile	/^CYGPATH_W = echo$/;"	m
DEFAULT_INCLUDES	build/cmsat/Makefile	/^DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFS	build/cmsat/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	build/cmsat/Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	build/cmsat/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	build/cmsat/Makefile	/^DIST_COMMON = $(noinst_HEADERS) $(pkginclude_HEADERS) \\$/;"	m
DIST_SOURCES	build/cmsat/Makefile	/^DIST_SOURCES = $(libcryptominisat_la_SOURCES) $(cryptominisat_SOURCES)$/;"	m
DLLTOOL	build/cmsat/Makefile	/^DLLTOOL = false$/;"	m
DSYMUTIL	build/cmsat/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	build/cmsat/Makefile	/^DUMPBIN = $/;"	m
ECHO_C	build/cmsat/Makefile	/^ECHO_C = $/;"	m
ECHO_N	build/cmsat/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	build/cmsat/Makefile	/^ECHO_T = $/;"	m
EGREP	build/cmsat/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ETAGS	build/cmsat/Makefile	/^ETAGS = etags$/;"	m
EXEEXT	build/cmsat/Makefile	/^EXEEXT = $/;"	m
FGREP	build/cmsat/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
GREP	build/cmsat/Makefile	/^GREP = \/bin\/grep$/;"	m
HEADERS	build/cmsat/Makefile	/^HEADERS = $(noinst_HEADERS) $(pkginclude_HEADERS)$/;"	m
INSTALL	build/cmsat/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	build/cmsat/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	build/cmsat/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	build/cmsat/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	build/cmsat/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	build/cmsat/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
LD	build/cmsat/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	build/cmsat/Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	build/cmsat/Makefile	/^LIBOBJS = $/;"	m
LIBS	build/cmsat/Makefile	/^LIBS = -lz $/;"	m
LIBTOOL	build/cmsat/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIPO	build/cmsat/Makefile	/^LIPO = $/;"	m
LN_S	build/cmsat/Makefile	/^LN_S = ln -s$/;"	m
LTCXXCOMPILE	build/cmsat/Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	build/cmsat/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	build/cmsat/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
MAKEINFO	build/cmsat/Makefile	/^MAKEINFO = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run makeinfo$/;"	m
MANIFEST_TOOL	build/cmsat/Makefile	/^MANIFEST_TOOL = :$/;"	m
MKDIR_P	build/cmsat/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
NM	build/cmsat/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	build/cmsat/Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	build/cmsat/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	build/cmsat/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
OBJDUMP	build/cmsat/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	build/cmsat/Makefile	/^OBJEXT = o$/;"	m
OPENMP_CXXFLAGS	build/cmsat/Makefile	/^OPENMP_CXXFLAGS = -fopenmp$/;"	m
OTOOL	build/cmsat/Makefile	/^OTOOL = $/;"	m
OTOOL64	build/cmsat/Makefile	/^OTOOL64 = $/;"	m
PACKAGE	build/cmsat/Makefile	/^PACKAGE = cmsat$/;"	m
PACKAGE_BUGREPORT	build/cmsat/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	build/cmsat/Makefile	/^PACKAGE_NAME = cmsat$/;"	m
PACKAGE_STRING	build/cmsat/Makefile	/^PACKAGE_STRING = cmsat 1.1$/;"	m
PACKAGE_TARNAME	build/cmsat/Makefile	/^PACKAGE_TARNAME = cmsat$/;"	m
PACKAGE_URL	build/cmsat/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	build/cmsat/Makefile	/^PACKAGE_VERSION = 1.1$/;"	m
PATH_SEPARATOR	build/cmsat/Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	build/cmsat/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	build/cmsat/Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	build/cmsat/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	build/cmsat/Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	build/cmsat/Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
RANLIB	build/cmsat/Makefile	/^RANLIB = ranlib$/;"	m
SED	build/cmsat/Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	build/cmsat/Makefile	/^SET_MAKE = $/;"	m
SHELL	build/cmsat/Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	build/cmsat/Makefile	/^SOURCES = $(libcryptominisat_la_SOURCES) $(cryptominisat_SOURCES)$/;"	m
STRIP	build/cmsat/Makefile	/^STRIP = strip$/;"	m
VERSION	build/cmsat/Makefile	/^VERSION = 1.1$/;"	m
VPATH	build/cmsat/Makefile	/^VPATH = ..\/..\/cmsat$/;"	m
abs_builddir	build/cmsat/Makefile	/^abs_builddir = \/home\/zenna\/repos\/cusp\/ugen2\/build\/cmsat$/;"	m
abs_srcdir	build/cmsat/Makefile	/^abs_srcdir = \/home\/zenna\/repos\/cusp\/ugen2\/build\/..\/cmsat$/;"	m
abs_top_builddir	build/cmsat/Makefile	/^abs_top_builddir = \/home\/zenna\/repos\/cusp\/ugen2\/build$/;"	m
abs_top_srcdir	build/cmsat/Makefile	/^abs_top_srcdir = \/home\/zenna\/repos\/cusp\/ugen2\/build\/..$/;"	m
ac_ct_AR	build/cmsat/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	build/cmsat/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	build/cmsat/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	build/cmsat/Makefile	/^ac_ct_DUMPBIN = $/;"	m
am__aclocal_m4_deps	build/cmsat/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__base_list	build/cmsat/Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	build/cmsat/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	build/cmsat/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	build/cmsat/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	build/cmsat/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	build/cmsat/Makefile	/^am__include = include$/;"	m
am__install_max	build/cmsat/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	build/cmsat/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \\$/;"	m
am__leading_dot	build/cmsat/Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	build/cmsat/Makefile	/^am__make_dryrun = \\$/;"	m
am__mv	build/cmsat/Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	build/cmsat/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	build/cmsat/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	build/cmsat/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__quote	build/cmsat/Makefile	/^am__quote = $/;"	m
am__strip_dir	build/cmsat/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	build/cmsat/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uninstall_files_from_dir	build/cmsat/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__untar	build/cmsat/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__vpath_adj	build/cmsat/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	build/cmsat/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_cryptominisat_OBJECTS	build/cmsat/Makefile	/^am_cryptominisat_OBJECTS = Main.$(OBJEXT)$/;"	m
am_libcryptominisat_la_OBJECTS	build/cmsat/Makefile	/^am_libcryptominisat_la_OBJECTS = ClauseCleaner.lo FailedLitSearcher.lo \\$/;"	m
bin_PROGRAMS	build/cmsat/Makefile	/^bin_PROGRAMS = cryptominisat$(EXEEXT)$/;"	m
bindir	build/cmsat/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
build	build/cmsat/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	build/cmsat/Makefile	/^build_alias = $/;"	m
build_cpu	build/cmsat/Makefile	/^build_cpu = x86_64$/;"	m
build_os	build/cmsat/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	build/cmsat/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	build/cmsat/Makefile	/^build_vendor = unknown$/;"	m
builddir	build/cmsat/Makefile	/^builddir = .$/;"	m
cryptominisat_DEPENDENCIES	build/cmsat/Makefile	/^cryptominisat_DEPENDENCIES = libcryptominisat.la$/;"	m
cryptominisat_LDADD	build/cmsat/Makefile	/^cryptominisat_LDADD = libcryptominisat.la$/;"	m
cryptominisat_LDFLAGS	build/cmsat/Makefile	/^cryptominisat_LDFLAGS = -static -lz $(OPENMP_CXXFLAGS) $(LIBS)$/;"	m
cryptominisat_LINK	build/cmsat/Makefile	/^cryptominisat_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
cryptominisat_OBJECTS	build/cmsat/Makefile	/^cryptominisat_OBJECTS = $(am_cryptominisat_OBJECTS)$/;"	m
cryptominisat_SOURCES	build/cmsat/Makefile	/^cryptominisat_SOURCES = Main.cpp$/;"	m
datadir	build/cmsat/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	build/cmsat/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
depcomp	build/cmsat/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
docdir	build/cmsat/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dvidir	build/cmsat/Makefile	/^dvidir = ${docdir}$/;"	m
exec_prefix	build/cmsat/Makefile	/^exec_prefix = ${prefix}$/;"	m
host	build/cmsat/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	build/cmsat/Makefile	/^host_alias = $/;"	m
host_cpu	build/cmsat/Makefile	/^host_cpu = x86_64$/;"	m
host_os	build/cmsat/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	build/cmsat/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	build/cmsat/Makefile	/^host_vendor = unknown$/;"	m
htmldir	build/cmsat/Makefile	/^htmldir = ${docdir}$/;"	m
includedir	build/cmsat/Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	build/cmsat/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
install_sh	build/cmsat/Makefile	/^install_sh = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/install-sh$/;"	m
install_sh_DATA	build/cmsat/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	build/cmsat/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	build/cmsat/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
lib_LTLIBRARIES	build/cmsat/Makefile	/^lib_LTLIBRARIES = libcryptominisat.la$/;"	m
libcryptominisat_la_LDFLAGS	build/cmsat/Makefile	/^libcryptominisat_la_LDFLAGS = -release $(VERSION) -no-undefined$/;"	m
libcryptominisat_la_LIBADD	build/cmsat/Makefile	/^libcryptominisat_la_LIBADD =$/;"	m
libcryptominisat_la_LINK	build/cmsat/Makefile	/^libcryptominisat_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
libcryptominisat_la_OBJECTS	build/cmsat/Makefile	/^libcryptominisat_la_OBJECTS = $(am_libcryptominisat_la_OBJECTS)$/;"	m
libcryptominisat_la_SOURCES	build/cmsat/Makefile	/^libcryptominisat_la_SOURCES = \\$/;"	m
libdir	build/cmsat/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	build/cmsat/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
localedir	build/cmsat/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	build/cmsat/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
mandir	build/cmsat/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mkdir_p	build/cmsat/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	build/cmsat/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
noinst_HEADERS	build/cmsat/Makefile	/^noinst_HEADERS = msvc\/stdint.h Main.h$/;"	m
oldincludedir	build/cmsat/Makefile	/^oldincludedir = \/usr\/include$/;"	m
pdfdir	build/cmsat/Makefile	/^pdfdir = ${docdir}$/;"	m
pkgdatadir	build/cmsat/Makefile	/^pkgdatadir = $(datadir)\/cmsat$/;"	m
pkginclude_HEADERS	build/cmsat/Makefile	/^pkginclude_HEADERS = BitArray.h Clause.h CSet.h MatrixFinder.h Solver.h Subsumer.h Watched.h \\$/;"	m
pkgincludedir	build/cmsat/Makefile	/^pkgincludedir = $(includedir)\/cmsat$/;"	m
pkglibdir	build/cmsat/Makefile	/^pkglibdir = $(libdir)\/cmsat$/;"	m
pkglibexecdir	build/cmsat/Makefile	/^pkglibexecdir = $(libexecdir)\/cmsat$/;"	m
prefix	build/cmsat/Makefile	/^prefix = \/usr\/local$/;"	m
program_transform_name	build/cmsat/Makefile	/^program_transform_name = s,x,x,$/;"	m
psdir	build/cmsat/Makefile	/^psdir = ${docdir}$/;"	m
sbindir	build/cmsat/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sharedstatedir	build/cmsat/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
srcdir	build/cmsat/Makefile	/^srcdir = ..\/..\/cmsat$/;"	m
subdir	build/cmsat/Makefile	/^subdir = cmsat$/;"	m
sysconfdir	build/cmsat/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
target_alias	build/cmsat/Makefile	/^target_alias = $/;"	m
top_build_prefix	build/cmsat/Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	build/cmsat/Makefile	/^top_builddir = ..$/;"	m
top_srcdir	build/cmsat/Makefile	/^top_srcdir = ..\/..$/;"	m
transform	build/cmsat/Makefile	/^transform = $(program_transform_name)$/;"	m
HAVE_DLFCN_H	build/config.h	5;"	d
HAVE_INTTYPES_H	build/config.h	8;"	d
HAVE_IOSTREAM	build/config.h	11;"	d
HAVE_LIBZ	build/config.h	14;"	d
HAVE_MEMORY_H	build/config.h	17;"	d
HAVE_STDINT_H	build/config.h	20;"	d
HAVE_STDLIB_H	build/config.h	23;"	d
HAVE_STRINGS_H	build/config.h	26;"	d
HAVE_STRING_H	build/config.h	29;"	d
HAVE_SYS_STAT_H	build/config.h	32;"	d
HAVE_SYS_TYPES_H	build/config.h	35;"	d
HAVE_UNISTD_H	build/config.h	38;"	d
LT_OBJDIR	build/config.h	42;"	d
PACKAGE	build/config.h	45;"	d
PACKAGE_BUGREPORT	build/config.h	48;"	d
PACKAGE_NAME	build/config.h	51;"	d
PACKAGE_STRING	build/config.h	54;"	d
PACKAGE_TARNAME	build/config.h	57;"	d
PACKAGE_URL	build/config.h	60;"	d
PACKAGE_VERSION	build/config.h	63;"	d
SIZEOF_INT	build/config.h	66;"	d
SIZEOF_LONG	build/config.h	69;"	d
SIZEOF_SIZE_T	build/config.h	72;"	d
STDC_HEADERS	build/config.h	75;"	d
USE_GAUSS	build/config.h	78;"	d
VERSION	build/config.h	81;"	d
as_fn_append	build/config.status	/^  as_fn_append ()$/;"	f
as_fn_arith	build/config.status	/^  as_fn_arith ()$/;"	f
as_fn_error	build/config.status	/^as_fn_error ()$/;"	f
as_fn_executable_p	build/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_exit	build/config.status	/^as_fn_exit ()$/;"	f
as_fn_mkdir_p	build/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_set_status	build/config.status	/^as_fn_set_status ()$/;"	f
as_fn_unset	build/config.status	/^as_fn_unset ()$/;"	f
func_append	build/config.status	/^func_append ()\\$/;"	f
func_append_quoted	build/config.status	/^func_append_quoted ()\\$/;"	f
func_arith	build/config.status	/^func_arith ()\\$/;"	f
func_basename	build/config.status	/^func_basename ()\\$/;"	f
func_dirname	build/config.status	/^func_dirname ()\\$/;"	f
func_dirname_and_basename	build/config.status	/^func_dirname_and_basename ()\\$/;"	f
func_fallback_echo	build/config.status	/^func_fallback_echo ()$/;"	f
func_len	build/config.status	/^func_len ()\\$/;"	f
func_lo2o	build/config.status	/^func_lo2o ()\\$/;"	f
func_split_long_opt	build/config.status	/^func_split_long_opt ()\\$/;"	f
func_split_short_opt	build/config.status	/^func_split_short_opt ()\\$/;"	f
func_stripname	build/config.status	/^func_stripname ()\\$/;"	f
func_xform	build/config.status	/^func_xform ()\\$/;"	f
CreateProcess	build/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
func_append	build/libtool	/^func_append ()$/;"	f
func_append_quoted	build/libtool	/^func_append_quoted ()$/;"	f
func_arith	build/libtool	/^func_arith ()$/;"	f
func_basename	build/libtool	/^func_basename ()$/;"	f
func_check_version_match	build/libtool	/^func_check_version_match ()$/;"	f
func_config	build/libtool	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	build/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	build/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	build/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	build/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	build/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	build/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	build/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	build/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	build/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	build/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	build/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	build/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	build/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	build/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	build/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	build/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	build/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	build/libtool	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	build/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	build/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	build/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	build/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	build/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	build/libtool	/^func_cygpath ()$/;"	f
func_dirname	build/libtool	/^func_dirname ()$/;"	f
func_dirname_and_basename	build/libtool	/^func_dirname_and_basename ()$/;"	f
func_echo	build/libtool	/^func_echo ()$/;"	f
func_echo_all	build/libtool	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	build/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	build/libtool	/^func_emit_wrapper ()$/;"	f
func_enable_tag	build/libtool	/^func_enable_tag ()$/;"	f
func_error	build/libtool	/^func_error ()$/;"	f
func_exec_program	build/libtool	/^func_exec_program ()$/;"	f
func_exec_program_core	build/libtool	/^func_exec_program_core ()$/;"	f
func_execute_cmds	build/libtool	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	build/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	build/libtool	/^func_extract_archives ()$/;"	f
func_fallback_echo	build/libtool	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	build/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_error	build/libtool	/^func_fatal_error ()$/;"	f
func_fatal_help	build/libtool	/^func_fatal_help ()$/;"	f
func_features	build/libtool	/^func_features ()$/;"	f
func_generate_dlsyms	build/libtool	/^func_generate_dlsyms ()$/;"	f
func_grep	build/libtool	/^func_grep ()$/;"	f
func_help	build/libtool	/^func_help ()$/;"	f
func_infer_tag	build/libtool	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	build/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	build/libtool	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	build/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_len	build/libtool	/^func_len ()$/;"	f
func_lo2o	build/libtool	/^func_lo2o ()$/;"	f
func_lt_dump_args	build/libtool	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	build/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	build/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	build/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	build/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	build/libtool	/^func_missing_arg ()$/;"	f
func_mkdir_p	build/libtool	/^func_mkdir_p ()$/;"	f
func_mktempdir	build/libtool	/^func_mktempdir ()$/;"	f
func_mode_compile	build/libtool	/^func_mode_compile ()$/;"	f
func_mode_execute	build/libtool	/^func_mode_execute ()$/;"	f
func_mode_finish	build/libtool	/^func_mode_finish ()$/;"	f
func_mode_help	build/libtool	/^func_mode_help ()$/;"	f
func_mode_install	build/libtool	/^func_mode_install ()$/;"	f
func_mode_link	build/libtool	/^func_mode_link ()$/;"	f
func_mode_uninstall	build/libtool	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	build/libtool	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	build/libtool	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	build/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	build/libtool	/^func_quote_for_expand ()$/;"	f
func_relative_path	build/libtool	/^func_relative_path ()$/;"	f
func_replace_sysroot	build/libtool	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	build/libtool	/^func_resolve_sysroot ()$/;"	f
func_show_eval	build/libtool	/^func_show_eval ()$/;"	f
func_show_eval_locale	build/libtool	/^func_show_eval_locale ()$/;"	f
func_source	build/libtool	/^func_source ()$/;"	f
func_split_long_opt	build/libtool	/^func_split_long_opt ()$/;"	f
func_split_short_opt	build/libtool	/^func_split_short_opt ()$/;"	f
func_stripname	build/libtool	/^func_stripname ()$/;"	f
func_to_host_file	build/libtool	/^func_to_host_file ()$/;"	f
func_to_host_path	build/libtool	/^func_to_host_path ()$/;"	f
func_to_tool_file	build/libtool	/^func_to_tool_file ()$/;"	f
func_tr_sh	build/libtool	/^func_tr_sh ()$/;"	f
func_usage	build/libtool	/^func_usage ()$/;"	f
func_verbose	build/libtool	/^func_verbose ()$/;"	f
func_version	build/libtool	/^func_version ()$/;"	f
func_warning	build/libtool	/^func_warning ()$/;"	f
func_win32_import_lib_p	build/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	build/libtool	/^func_win32_libid ()$/;"	f
func_write_libtool_object	build/libtool	/^func_write_libtool_object ()$/;"	f
func_xform	build/libtool	/^func_xform ()$/;"	f
ACLOCAL	build/man/Makefile	/^ACLOCAL = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run aclocal-1.11$/;"	m
ACLOCAL_M4	build/man/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	build/man/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AR	build/man/Makefile	/^AR = ar$/;"	m
AUTOCONF	build/man/Makefile	/^AUTOCONF = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run autoconf$/;"	m
AUTOHEADER	build/man/Makefile	/^AUTOHEADER = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run autoheader$/;"	m
AUTOMAKE	build/man/Makefile	/^AUTOMAKE = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run automake-1.11$/;"	m
AWK	build/man/Makefile	/^AWK = gawk$/;"	m
CC	build/man/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	build/man/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CFLAGS	build/man/Makefile	/^CFLAGS = -g -O2$/;"	m
CONFIG_CLEAN_FILES	build/man/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	build/man/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	build/man/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	build/man/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	build/man/Makefile	/^CPPFLAGS = $/;"	m
CXX	build/man/Makefile	/^CXX = g++$/;"	m
CXXCPP	build/man/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	build/man/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	build/man/Makefile	/^CXXFLAGS = -g -O3 -Wall -pedantic -std=c++11 -lrt $/;"	m
CYGPATH_W	build/man/Makefile	/^CYGPATH_W = echo$/;"	m
DEFS	build/man/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	build/man/Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	build/man/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	build/man/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_SOURCES	build/man/Makefile	/^DIST_SOURCES =$/;"	m
DLLTOOL	build/man/Makefile	/^DLLTOOL = false$/;"	m
DSYMUTIL	build/man/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	build/man/Makefile	/^DUMPBIN = $/;"	m
ECHO_C	build/man/Makefile	/^ECHO_C = $/;"	m
ECHO_N	build/man/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	build/man/Makefile	/^ECHO_T = $/;"	m
EGREP	build/man/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EXEEXT	build/man/Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	build/man/Makefile	/^EXTRA_DIST = $(man_MANS)$/;"	m
FGREP	build/man/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
GREP	build/man/Makefile	/^GREP = \/bin\/grep$/;"	m
INSTALL	build/man/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	build/man/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	build/man/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	build/man/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	build/man/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	build/man/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
LD	build/man/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	build/man/Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	build/man/Makefile	/^LIBOBJS = $/;"	m
LIBS	build/man/Makefile	/^LIBS = -lz $/;"	m
LIBTOOL	build/man/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIPO	build/man/Makefile	/^LIPO = $/;"	m
LN_S	build/man/Makefile	/^LN_S = ln -s$/;"	m
LTLIBOBJS	build/man/Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	build/man/Makefile	/^MAKEINFO = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/missing --run makeinfo$/;"	m
MANIFEST_TOOL	build/man/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANS	build/man/Makefile	/^MANS = $(man_MANS)$/;"	m
MKDIR_P	build/man/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
NM	build/man/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	build/man/Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	build/man/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	build/man/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NROFF	build/man/Makefile	/^NROFF = nroff$/;"	m
OBJDUMP	build/man/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	build/man/Makefile	/^OBJEXT = o$/;"	m
OPENMP_CXXFLAGS	build/man/Makefile	/^OPENMP_CXXFLAGS = -fopenmp$/;"	m
OTOOL	build/man/Makefile	/^OTOOL = $/;"	m
OTOOL64	build/man/Makefile	/^OTOOL64 = $/;"	m
PACKAGE	build/man/Makefile	/^PACKAGE = cmsat$/;"	m
PACKAGE_BUGREPORT	build/man/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	build/man/Makefile	/^PACKAGE_NAME = cmsat$/;"	m
PACKAGE_STRING	build/man/Makefile	/^PACKAGE_STRING = cmsat 1.1$/;"	m
PACKAGE_TARNAME	build/man/Makefile	/^PACKAGE_TARNAME = cmsat$/;"	m
PACKAGE_URL	build/man/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	build/man/Makefile	/^PACKAGE_VERSION = 1.1$/;"	m
PATH_SEPARATOR	build/man/Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	build/man/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	build/man/Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	build/man/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	build/man/Makefile	/^PRE_UNINSTALL = :$/;"	m
RANLIB	build/man/Makefile	/^RANLIB = ranlib$/;"	m
SED	build/man/Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	build/man/Makefile	/^SET_MAKE = $/;"	m
SHELL	build/man/Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	build/man/Makefile	/^SOURCES =$/;"	m
STRIP	build/man/Makefile	/^STRIP = strip$/;"	m
VERSION	build/man/Makefile	/^VERSION = 1.1$/;"	m
VPATH	build/man/Makefile	/^VPATH = ..\/..\/man$/;"	m
abs_builddir	build/man/Makefile	/^abs_builddir = \/home\/zenna\/repos\/cusp\/ugen2\/build\/man$/;"	m
abs_srcdir	build/man/Makefile	/^abs_srcdir = \/home\/zenna\/repos\/cusp\/ugen2\/build\/..\/man$/;"	m
abs_top_builddir	build/man/Makefile	/^abs_top_builddir = \/home\/zenna\/repos\/cusp\/ugen2\/build$/;"	m
abs_top_srcdir	build/man/Makefile	/^abs_top_srcdir = \/home\/zenna\/repos\/cusp\/ugen2\/build\/..$/;"	m
ac_ct_AR	build/man/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	build/man/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	build/man/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	build/man/Makefile	/^ac_ct_DUMPBIN = $/;"	m
am__aclocal_m4_deps	build/man/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__base_list	build/man/Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	build/man/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	build/man/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	build/man/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__include	build/man/Makefile	/^am__include = include$/;"	m
am__install_max	build/man/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	build/man/Makefile	/^am__installdirs = "$(DESTDIR)$(man1dir)"$/;"	m
am__leading_dot	build/man/Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	build/man/Makefile	/^am__make_dryrun = \\$/;"	m
am__nobase_list	build/man/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	build/man/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	build/man/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__quote	build/man/Makefile	/^am__quote = $/;"	m
am__strip_dir	build/man/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	build/man/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uninstall_files_from_dir	build/man/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__untar	build/man/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__vpath_adj	build/man/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	build/man/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
bindir	build/man/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
build	build/man/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	build/man/Makefile	/^build_alias = $/;"	m
build_cpu	build/man/Makefile	/^build_cpu = x86_64$/;"	m
build_os	build/man/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	build/man/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	build/man/Makefile	/^build_vendor = unknown$/;"	m
builddir	build/man/Makefile	/^builddir = .$/;"	m
datadir	build/man/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	build/man/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
docdir	build/man/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dvidir	build/man/Makefile	/^dvidir = ${docdir}$/;"	m
exec_prefix	build/man/Makefile	/^exec_prefix = ${prefix}$/;"	m
host	build/man/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	build/man/Makefile	/^host_alias = $/;"	m
host_cpu	build/man/Makefile	/^host_cpu = x86_64$/;"	m
host_os	build/man/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	build/man/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	build/man/Makefile	/^host_vendor = unknown$/;"	m
htmldir	build/man/Makefile	/^htmldir = ${docdir}$/;"	m
includedir	build/man/Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	build/man/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
install_sh	build/man/Makefile	/^install_sh = ${SHELL} \/home\/zenna\/repos\/cusp\/ugen2\/install-sh$/;"	m
install_sh_DATA	build/man/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	build/man/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	build/man/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
libdir	build/man/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	build/man/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
localedir	build/man/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	build/man/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
man1dir	build/man/Makefile	/^man1dir = $(mandir)\/man1$/;"	m
man_MANS	build/man/Makefile	/^man_MANS = cryptominisat.1$/;"	m
mandir	build/man/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mkdir_p	build/man/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	build/man/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
oldincludedir	build/man/Makefile	/^oldincludedir = \/usr\/include$/;"	m
pdfdir	build/man/Makefile	/^pdfdir = ${docdir}$/;"	m
pkgdatadir	build/man/Makefile	/^pkgdatadir = $(datadir)\/cmsat$/;"	m
pkgincludedir	build/man/Makefile	/^pkgincludedir = $(includedir)\/cmsat$/;"	m
pkglibdir	build/man/Makefile	/^pkglibdir = $(libdir)\/cmsat$/;"	m
pkglibexecdir	build/man/Makefile	/^pkglibexecdir = $(libexecdir)\/cmsat$/;"	m
prefix	build/man/Makefile	/^prefix = \/usr\/local$/;"	m
program_transform_name	build/man/Makefile	/^program_transform_name = s,x,x,$/;"	m
psdir	build/man/Makefile	/^psdir = ${docdir}$/;"	m
sbindir	build/man/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sharedstatedir	build/man/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
srcdir	build/man/Makefile	/^srcdir = ..\/..\/man$/;"	m
subdir	build/man/Makefile	/^subdir = man$/;"	m
sysconfdir	build/man/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
target_alias	build/man/Makefile	/^target_alias = $/;"	m
top_build_prefix	build/man/Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	build/man/Makefile	/^top_builddir = ..$/;"	m
top_srcdir	build/man/Makefile	/^top_srcdir = ..\/..$/;"	m
transform	build/man/Makefile	/^transform = $(program_transform_name)$/;"	m
ALG_H	cmsat/Alg.h	21;"	d
CMSat	cmsat/Alg.h	/^namespace CMSat {$/;"	n
find	cmsat/Alg.h	/^    static inline bool find(V& ts, const T& t) {$/;"	f	namespace:CMSat
findW	cmsat/Alg.h	/^    static inline bool findW(V& ts, const T& t) {$/;"	f	namespace:CMSat
findWBin	cmsat/Alg.h	/^    static inline bool findWBin(const vec<vec<Watched> >& wsFull, const Lit lit1, const Lit impliedLit) {$/;"	f	namespace:CMSat
findWBin	cmsat/Alg.h	/^    static inline bool findWBin(const vec<vec<Watched> >& wsFull, const Lit lit1, const Lit impliedLit, const bool learnt) {$/;"	f	namespace:CMSat
findWCl	cmsat/Alg.h	/^    static inline bool findWCl(const vec<Watched>& ws, const ClauseOffset c) {$/;"	f	namespace:CMSat
findWTri	cmsat/Alg.h	/^    static inline bool findWTri(const vec<Watched> &ws, const Lit lit1, const Lit lit2) {$/;"	f	namespace:CMSat
findWXCl	cmsat/Alg.h	/^    static inline bool findWXCl(const vec<Watched>& ws, const ClauseOffset c) {$/;"	f	namespace:CMSat
findWatchedOfBin	cmsat/Alg.h	/^    static inline Watched& findWatchedOfBin(vec<vec<Watched> >& wsFull, const Lit lit1, const Lit lit2) {$/;"	f	namespace:CMSat
findWatchedOfBin	cmsat/Alg.h	/^    static inline Watched& findWatchedOfBin(vec<vec<Watched> >& wsFull, const Lit lit1, const Lit lit2, const bool learnt) {$/;"	f	namespace:CMSat
remove	cmsat/Alg.h	/^    static inline void remove(V& ts, const T& t) {$/;"	f	namespace:CMSat
removeAll	cmsat/Alg.h	/^    static inline uint32_t removeAll(V& ts, const Var t) {$/;"	f	namespace:CMSat
removeW	cmsat/Alg.h	/^    static inline void removeW(V& ts, const T& t) {$/;"	f	namespace:CMSat
removeWBin	cmsat/Alg.h	/^    static inline void removeWBin(vec<Watched> &ws, const Lit impliedLit, const bool learnt) {$/;"	f	namespace:CMSat
removeWBinAll	cmsat/Alg.h	/^    static inline std::pair<uint32_t, uint32_t> removeWBinAll(vec<Watched> &ws, const Lit impliedLit) {$/;"	f	namespace:CMSat
removeWCl	cmsat/Alg.h	/^    static inline void removeWCl(vec<Watched> &ws, const ClauseOffset c) {$/;"	f	namespace:CMSat
removeWTri	cmsat/Alg.h	/^    static inline void removeWTri(vec<Watched> &ws, const Lit lit1, const Lit lit2) {$/;"	f	namespace:CMSat
removeWXCl	cmsat/Alg.h	/^    static inline void removeWXCl(vec<Watched> &ws, const ClauseOffset c) {$/;"	f	namespace:CMSat
BITARRAY_H	cmsat/BitArray.h	23;"	d
BitArray	cmsat/BitArray.h	/^        BitArray() :$/;"	f	class:CMSat::BitArray
BitArray	cmsat/BitArray.h	/^        BitArray(const BitArray& b) :$/;"	f	class:CMSat::BitArray
BitArray	cmsat/BitArray.h	/^    class BitArray {$/;"	c	namespace:CMSat
CMSat	cmsat/BitArray.h	/^namespace CMSat {$/;"	n
clearBit	cmsat/BitArray.h	/^        inline void clearBit(const uint32_t i) {$/;"	f	class:CMSat::BitArray
getSize	cmsat/BitArray.h	/^        inline uint32_t getSize() const {$/;"	f	class:CMSat::BitArray
isZero	cmsat/BitArray.h	/^        inline bool isZero() const {$/;"	f	class:CMSat::BitArray
mp	cmsat/BitArray.h	/^        uint64_t* mp;$/;"	m	class:CMSat::BitArray
operator &=	cmsat/BitArray.h	/^        BitArray& operator&=(const BitArray& b) {$/;"	f	class:CMSat::BitArray
operator =	cmsat/BitArray.h	/^        BitArray& operator=(const BitArray& b) {$/;"	f	class:CMSat::BitArray
operator []	cmsat/BitArray.h	/^        inline bool operator[](const uint32_t& i) const {$/;"	f	class:CMSat::BitArray
removeThese	cmsat/BitArray.h	/^        BitArray& removeThese(const BitArray& b) {$/;"	f	class:CMSat::BitArray
removeThese	cmsat/BitArray.h	/^        BitArray& removeThese(const T& rem) {$/;"	f	class:CMSat::BitArray
removeTheseLit	cmsat/BitArray.h	/^        BitArray& removeTheseLit(const T& rem) {$/;"	f	class:CMSat::BitArray
resize	cmsat/BitArray.h	/^        void resize(uint32_t _size, const bool fill) {$/;"	f	class:CMSat::BitArray
setBit	cmsat/BitArray.h	/^        inline void setBit(const uint32_t i) {$/;"	f	class:CMSat::BitArray
setOne	cmsat/BitArray.h	/^        inline void setOne() {$/;"	f	class:CMSat::BitArray
setZero	cmsat/BitArray.h	/^        inline void setZero() {$/;"	f	class:CMSat::BitArray
size	cmsat/BitArray.h	/^        uint32_t size;$/;"	m	class:CMSat::BitArray
~BitArray	cmsat/BitArray.h	/^        ~BitArray() {$/;"	f	class:CMSat::BitArray
BothCache	cmsat/BothCache.cpp	/^    BothCache::BothCache(Solver & _solver) :$/;"	f	class:CMSat::BothCache
CMSat	cmsat/BothCache.cpp	/^namespace CMSat$/;"	n	file:
tryBoth	cmsat/BothCache.cpp	/^    bool BothCache::tryBoth() {$/;"	f	class:CMSat::BothCache
BOTHCACHE_H	cmsat/BothCache.h	23;"	d
BothCache	cmsat/BothCache.h	/^    class BothCache {$/;"	c	namespace:CMSat
CMSat	cmsat/BothCache.h	/^namespace CMSat {$/;"	n
solver	cmsat/BothCache.h	/^        Solver& solver;$/;"	m	class:CMSat::BothCache
BOUNDEDQUEUE_H	cmsat/BoundedQueue.h	23;"	d
CMSat	cmsat/BoundedQueue.h	/^namespace CMSat {$/;"	n
bqueue	cmsat/BoundedQueue.h	/^        bqueue(void) :$/;"	f	class:CMSat::bqueue
bqueue	cmsat/BoundedQueue.h	/^    class bqueue {$/;"	c	namespace:CMSat
clear	cmsat/BoundedQueue.h	/^        void clear(bool dealloc = false) {$/;"	f	class:CMSat::bqueue
elems	cmsat/BoundedQueue.h	/^        vec<T> elems;$/;"	m	class:CMSat::bqueue
fastclear	cmsat/BoundedQueue.h	/^        void fastclear() {$/;"	f	class:CMSat::bqueue
first	cmsat/BoundedQueue.h	/^        uint32_t first;$/;"	m	class:CMSat::bqueue
getAvgAllDouble	cmsat/BoundedQueue.h	/^        double getAvgAllDouble() const {$/;"	f	class:CMSat::bqueue
getAvgDouble	cmsat/BoundedQueue.h	/^        double getAvgDouble() const {$/;"	f	class:CMSat::bqueue
getAvgUInt	cmsat/BoundedQueue.h	/^        uint32_t getAvgUInt() const {$/;"	f	class:CMSat::bqueue
getTotalNumeElems	cmsat/BoundedQueue.h	/^        uint64_t getTotalNumeElems() const {$/;"	f	class:CMSat::bqueue
getsum	cmsat/BoundedQueue.h	/^        int64_t getsum() const {$/;"	f	class:CMSat::bqueue
growTo	cmsat/BoundedQueue.h	/^        void growTo(const uint32_t size) {$/;"	f	class:CMSat::bqueue
initSize	cmsat/BoundedQueue.h	/^        void initSize(const uint32_t size) {$/;"	f	class:CMSat::bqueue
isvalid	cmsat/BoundedQueue.h	/^        int isvalid() const {$/;"	f	class:CMSat::bqueue
last	cmsat/BoundedQueue.h	/^        uint32_t last;$/;"	m	class:CMSat::bqueue
maxsize	cmsat/BoundedQueue.h	/^        uint32_t maxsize;$/;"	m	class:CMSat::bqueue
peek	cmsat/BoundedQueue.h	/^        const T peek() const {$/;"	f	class:CMSat::bqueue
pop	cmsat/BoundedQueue.h	/^        void pop() {$/;"	f	class:CMSat::bqueue
push	cmsat/BoundedQueue.h	/^        void push(const T x) {$/;"	f	class:CMSat::bqueue
queuesize	cmsat/BoundedQueue.h	/^        uint32_t queuesize; \/\/ Number of current elements (must be < maxsize !)$/;"	m	class:CMSat::bqueue
size	cmsat/BoundedQueue.h	/^        int size(void) {$/;"	f	class:CMSat::bqueue
sumOfAllElems	cmsat/BoundedQueue.h	/^        int64_t sumOfAllElems;$/;"	m	class:CMSat::bqueue
sumofqueue	cmsat/BoundedQueue.h	/^        int64_t sumofqueue;$/;"	m	class:CMSat::bqueue
totalNumElems	cmsat/BoundedQueue.h	/^        uint64_t totalNumElems;$/;"	m	class:CMSat::bqueue
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	279;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	285;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	292;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	138;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	169;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	175;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	30;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	42;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	87;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	95;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	15;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	160;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	31;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	81;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	156;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	26;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	82;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	17;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_TWEAK	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_VERSION_TWEAK	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
DEC	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
HEX	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	307;"	d	file:
ID_VOID_MAIN	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	9;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	187;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	205;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	208;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	211;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	217;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	220;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	223;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	229;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	235;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	238;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	250;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	256;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	259;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	262;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
info_arch	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_version	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
main	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[]) {$/;"	f
main	cmsat/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^void main() {$/;"	f
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	276;"	d	file:
ARCHITECTURE_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	280;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	109;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	26;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	75;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	17;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	47;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	35;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
COMPILER_VERSION_TWEAK	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_TWEAK	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	d	file:
DEC	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
HEX	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	295;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
PLATFORM_ID	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
info_arch	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_version	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
main	cmsat/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[]) {$/;"	f
CMSat	cmsat/CSet.h	/^namespace CMSat {$/;"	n
CSET_H	cmsat/CSet.h	23;"	d
CSet	cmsat/CSet.h	/^    class CSet {$/;"	c	namespace:CMSat
ClauseSimp	cmsat/CSet.h	/^        ClauseSimp(Clause* c, const uint32_t _index) :$/;"	f	class:CMSat::ClauseSimp
ClauseSimp	cmsat/CSet.h	/^    class ClauseSimp {$/;"	c	namespace:CMSat
add	cmsat/CSet.h	/^        bool add(const ClauseSimp& c) {$/;"	f	class:CMSat::CSet
alreadyIn	cmsat/CSet.h	/^        bool alreadyIn(const ClauseSimp& c) const {$/;"	f	class:CMSat::CSet
begin	cmsat/CSet.h	/^        const_iterator begin() const {$/;"	f	class:CMSat::CSet
begin	cmsat/CSet.h	/^        iterator begin() {$/;"	f	class:CMSat::CSet
clause	cmsat/CSet.h	/^        Clause* clause; \/\/\/<The clause to be stored$/;"	m	class:CMSat::ClauseSimp
clear	cmsat/CSet.h	/^        void clear(void) {$/;"	f	class:CMSat::CSet
const_iterator	cmsat/CSet.h	/^            const_iterator(const ClauseSimp* _it) :$/;"	f	class:CMSat::CSet::const_iterator
const_iterator	cmsat/CSet.h	/^        class const_iterator {$/;"	c	class:CMSat::CSet
end	cmsat/CSet.h	/^        const_iterator end() const {$/;"	f	class:CMSat::CSet
end	cmsat/CSet.h	/^        iterator end() {$/;"	f	class:CMSat::CSet
exclude	cmsat/CSet.h	/^        bool exclude(const ClauseSimp& c) {$/;"	f	class:CMSat::CSet
free	cmsat/CSet.h	/^        vec<uint32_t> free; \/\/\/<List of positions holding 'Clause_NULL'.$/;"	m	class:CMSat::CSet
index	cmsat/CSet.h	/^        uint32_t index; \/\/\/<The index of the clause in Subsumer::clauses$/;"	m	class:CMSat::ClauseSimp
it	cmsat/CSet.h	/^            ClauseSimp* it;$/;"	m	class:CMSat::CSet::iterator
it	cmsat/CSet.h	/^            const ClauseSimp* it;$/;"	m	class:CMSat::CSet::const_iterator
iterator	cmsat/CSet.h	/^            iterator(ClauseSimp* _it) :$/;"	f	class:CMSat::CSet::iterator
iterator	cmsat/CSet.h	/^        class iterator {$/;"	c	class:CMSat::CSet
nElems	cmsat/CSet.h	/^        uint32_t nElems(void) const {$/;"	f	class:CMSat::CSet
operator !=	cmsat/CSet.h	/^            bool operator!=(const const_iterator& iter) const {$/;"	f	class:CMSat::CSet::const_iterator
operator !=	cmsat/CSet.h	/^            bool operator!=(const iterator& iter) const {$/;"	f	class:CMSat::CSet::iterator
operator *	cmsat/CSet.h	/^            ClauseSimp& operator*() {$/;"	f	class:CMSat::CSet::iterator
operator *	cmsat/CSet.h	/^            const ClauseSimp& operator*() {$/;"	f	class:CMSat::CSet::const_iterator
operator ++	cmsat/CSet.h	/^            void operator++() {$/;"	f	class:CMSat::CSet::const_iterator
operator ++	cmsat/CSet.h	/^            void operator++() {$/;"	f	class:CMSat::CSet::iterator
operator ->	cmsat/CSet.h	/^            ClauseSimp*& operator->() {$/;"	f	class:CMSat::CSet::iterator
operator ->	cmsat/CSet.h	/^            const ClauseSimp*& operator->() {$/;"	f	class:CMSat::CSet::const_iterator
reserve	cmsat/CSet.h	/^        void reserve(uint32_t size) {$/;"	f	class:CMSat::CSet
where	cmsat/CSet.h	/^        vec<uint32_t> where; \/\/\/<Map clause ID to position in 'which'.$/;"	m	class:CMSat::CSet
which	cmsat/CSet.h	/^        vec<ClauseSimp> which; \/\/\/< List of clauses (for fast iteration). May contain 'Clause_NULL'.$/;"	m	class:CMSat::CSet
CLAUSE_H	cmsat/Clause.h	23;"	d
CMSat	cmsat/Clause.h	/^namespace CMSat {$/;"	n
Clause	cmsat/Clause.h	/^        Clause(const V& ps, const bool learnt) {$/;"	f	struct:CMSat::Clause
Clause	cmsat/Clause.h	/^    struct Clause {$/;"	s	namespace:CMSat
XorClause	cmsat/Clause.h	/^        XorClause(const V& ps, const bool xorEqualFalse) :$/;"	f	class:CMSat::XorClause
XorClause	cmsat/Clause.h	/^    class XorClause : public Clause {$/;"	c	namespace:CMSat
abst	cmsat/Clause.h	/^        uint32_t abst; \/\/Abstraction of clause$/;"	m	struct:CMSat::Clause
calcAbstraction	cmsat/Clause.h	/^    uint32_t calcAbstraction(const T& ps) {$/;"	f	namespace:CMSat
calcAbstractionClause	cmsat/Clause.h	/^        void calcAbstractionClause() {$/;"	f	struct:CMSat::Clause
changed	cmsat/Clause.h	/^        uint32_t changed : 1; \/\/\/<Var inside clause has been changed$/;"	m	struct:CMSat::Clause
getAbst	cmsat/Clause.h	/^        uint32_t getAbst() const {$/;"	f	struct:CMSat::Clause
getChanged	cmsat/Clause.h	/^        bool getChanged() const {$/;"	f	struct:CMSat::Clause
getData	cmsat/Clause.h	/^        Lit * getData() {$/;"	f	struct:CMSat::Clause
getData	cmsat/Clause.h	/^        const Lit * getData() const {$/;"	f	struct:CMSat::Clause
getDataEnd	cmsat/Clause.h	/^        Lit * getDataEnd() {$/;"	f	struct:CMSat::Clause
getDataEnd	cmsat/Clause.h	/^        const Lit * getDataEnd() const {$/;"	f	struct:CMSat::Clause
getFreed	cmsat/Clause.h	/^        bool getFreed() const {$/;"	f	struct:CMSat::Clause
getGlue	cmsat/Clause.h	/^        uint32_t getGlue() const {$/;"	f	struct:CMSat::Clause
getMiniSatAct	cmsat/Clause.h	/^        const float& getMiniSatAct() const {$/;"	f	struct:CMSat::Clause
getMiniSatAct	cmsat/Clause.h	/^        float& getMiniSatAct() {$/;"	f	struct:CMSat::Clause
getRemoved	cmsat/Clause.h	/^        bool getRemoved() const {$/;"	f	struct:CMSat::Clause
glue	cmsat/Clause.h	/^        uint32_t glue : MAX_GLUE_BITS; \/\/\/<Clause glue -- clause activity according to GLUCOSE$/;"	m	struct:CMSat::Clause
invert	cmsat/Clause.h	/^        inline void invert(const bool b) {$/;"	f	class:CMSat::XorClause
isFreed	cmsat/Clause.h	/^        uint32_t isFreed : 1; \/\/\/<Has this clause been marked as freed by the ClauseAllocator ?$/;"	m	struct:CMSat::Clause
isLearnt	cmsat/Clause.h	/^        uint32_t isLearnt : 1; \/\/\/<Is the clause a learnt clause?$/;"	m	struct:CMSat::Clause
isRemoved	cmsat/Clause.h	/^        uint32_t isRemoved : 1; \/\/\/<Is this clause queued for removal because of usless binary removal?$/;"	m	struct:CMSat::Clause
isXor	cmsat/Clause.h	/^        bool isXor() const {$/;"	f	struct:CMSat::Clause
isXorClause	cmsat/Clause.h	/^        uint32_t isXorClause : 1; \/\/\/< Is the clause an XOR clause?$/;"	m	struct:CMSat::Clause
isXorEqualFalse	cmsat/Clause.h	/^        uint32_t isXorEqualFalse : 1;$/;"	m	struct:CMSat::Clause
learnt	cmsat/Clause.h	/^        bool learnt() const {$/;"	f	struct:CMSat::Clause
makeLearnt	cmsat/Clause.h	/^        void makeLearnt(const uint32_t newGlue, const float newMiniSatAct) {$/;"	f	struct:CMSat::Clause
makeNonLearnt	cmsat/Clause.h	/^        void makeNonLearnt() {$/;"	f	struct:CMSat::Clause
miniSatAct	cmsat/Clause.h	/^        float miniSatAct; \/\/\/<Clause activity according to MiniSat$/;"	m	struct:CMSat::Clause
mySize	cmsat/Clause.h	/^        uint32_t mySize : 18; \/\/\/<The current size of the clause$/;"	m	struct:CMSat::Clause
operator <<	cmsat/Clause.h	/^    inline std::ostream& operator<<(std::ostream& cout, const Clause& cl) {$/;"	f	namespace:CMSat
operator <<	cmsat/Clause.h	/^    inline std::ostream& operator<<(std::ostream& cout, const XorClause& cl) {$/;"	f	namespace:CMSat
operator []	cmsat/Clause.h	/^        Lit& operator [] (const uint32_t i) {$/;"	f	struct:CMSat::Clause
operator []	cmsat/Clause.h	/^        const Lit& operator [] (const uint32_t i) const {$/;"	f	struct:CMSat::Clause
plainPrint	cmsat/Clause.h	/^        void plainPrint(FILE* to = stdout) const {$/;"	f	class:CMSat::XorClause
plainPrint	cmsat/Clause.h	/^        void plainPrint(FILE* to = stdout) const {$/;"	f	struct:CMSat::Clause
pop	cmsat/Clause.h	/^        void pop() {$/;"	f	struct:CMSat::Clause
print	cmsat/Clause.h	/^        void print(FILE* to = stdout) const {$/;"	f	class:CMSat::XorClause
print	cmsat/Clause.h	/^        void print(FILE* to = stdout) const {$/;"	f	struct:CMSat::Clause
setChanged	cmsat/Clause.h	/^        void setChanged() {$/;"	f	struct:CMSat::Clause
setFreed	cmsat/Clause.h	/^        void setFreed() {$/;"	f	struct:CMSat::Clause
setGlue	cmsat/Clause.h	/^        void setGlue(const uint32_t newGlue) {$/;"	f	struct:CMSat::Clause
setMiniSatAct	cmsat/Clause.h	/^        void setMiniSatAct(const float newMiniSatAct) {$/;"	f	struct:CMSat::Clause
setRemoved	cmsat/Clause.h	/^        void setRemoved() {$/;"	f	struct:CMSat::Clause
shrink	cmsat/Clause.h	/^        void shrink(const uint32_t i) {$/;"	f	struct:CMSat::Clause
size	cmsat/Clause.h	/^        uint32_t size() const {$/;"	f	struct:CMSat::Clause
strengthen	cmsat/Clause.h	/^        inline void strengthen(const Lit p) {$/;"	f	struct:CMSat::Clause
takeMaxOfStats	cmsat/Clause.h	/^        void takeMaxOfStats(Clause& other) {$/;"	f	struct:CMSat::Clause
unsetChanged	cmsat/Clause.h	/^        void unsetChanged() {$/;"	f	struct:CMSat::Clause
xorEqualFalse	cmsat/Clause.h	/^        inline bool xorEqualFalse() const {$/;"	f	class:CMSat::XorClause
ALLOC_GROW_MULT	cmsat/ClauseAllocator.cpp	47;"	d	file:
ClauseAllocator	cmsat/ClauseAllocator.cpp	/^ClauseAllocator::ClauseAllocator() {$/;"	f	class:ClauseAllocator
Clause_new	cmsat/ClauseAllocator.cpp	/^Clause* ClauseAllocator::Clause_new(Clause& c) {$/;"	f	class:ClauseAllocator
Clause_new	cmsat/ClauseAllocator.cpp	/^Clause* ClauseAllocator::Clause_new(const T& ps, const bool learnt) {$/;"	f	class:ClauseAllocator
EFFECTIVELY_USEABLE_BITS	cmsat/ClauseAllocator.cpp	49;"	d	file:
MAXSIZE	cmsat/ClauseAllocator.cpp	50;"	d	file:
MIN_LIST_SIZE	cmsat/ClauseAllocator.cpp	45;"	d	file:
XorClause_new	cmsat/ClauseAllocator.cpp	/^XorClause* ClauseAllocator::XorClause_new(const T& ps, const bool xorEqualFalse) {$/;"	f	class:ClauseAllocator
allocEnough	cmsat/ClauseAllocator.cpp	/^void* ClauseAllocator::allocEnough(const uint32_t size) throw(std::bad_alloc) {$/;"	f	class:ClauseAllocator
checkGoodPropBy	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::checkGoodPropBy(const Solver* solver) {$/;"	f	class:ClauseAllocator
clauseFree	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::clauseFree(Clause* c) {$/;"	f	class:ClauseAllocator
combineOuterInterOffsets	cmsat/ClauseAllocator.cpp	/^inline ClauseOffset ClauseAllocator::combineOuterInterOffsets(const uint32_t outerOffset, const uint32_t interOffset) const {$/;"	f	class:ClauseAllocator
consolidate	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::consolidate($/;"	f	class:ClauseAllocator
getClause	cmsat/ClauseAllocator.cpp	/^Clause* ClauseAllocator::getClause() {$/;"	f	class:ClauseAllocator
getInterOffset	cmsat/ClauseAllocator.cpp	/^inline uint32_t ClauseAllocator::getInterOffset(const Clause* ptr, uint32_t outerOffset) const {$/;"	f	class:ClauseAllocator
getOffset	cmsat/ClauseAllocator.cpp	/^ClauseOffset ClauseAllocator::getOffset(const Clause* ptr) const {$/;"	f	class:ClauseAllocator
getOuterOffset	cmsat/ClauseAllocator.cpp	/^inline uint32_t ClauseAllocator::getOuterOffset(const Clause* ptr) const {$/;"	f	class:ClauseAllocator
putClausesIntoDatastruct	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::putClausesIntoDatastruct(std::vector<Clause*>& clauses) {$/;"	f	class:ClauseAllocator
updateAllOffsetsAndPointers	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::updateAllOffsetsAndPointers(Solver* solver) {$/;"	f	class:ClauseAllocator
updateOffsets	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::updateOffsets(vec<vec<Watched> >& watches) {$/;"	f	class:ClauseAllocator
updatePointers	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::updatePointers(vec<T*>& toUpdate) {$/;"	f	class:ClauseAllocator
updatePointers	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::updatePointers(vector<Clause*>& toUpdate) {$/;"	f	class:ClauseAllocator
updatePointers	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::updatePointers(vector<XorClause*>& toUpdate) {$/;"	f	class:ClauseAllocator
updatePointers	cmsat/ClauseAllocator.cpp	/^void ClauseAllocator::updatePointers(vector<pair<Clause*, uint32_t> >& toUpdate) {$/;"	f	class:ClauseAllocator
~ClauseAllocator	cmsat/ClauseAllocator.cpp	/^ClauseAllocator::~ClauseAllocator() {$/;"	f	class:ClauseAllocator
BASE_DATA_TYPE	cmsat/ClauseAllocator.h	35;"	d
CLAUSEALLOCATOR_H	cmsat/ClauseAllocator.h	23;"	d
CMSat	cmsat/ClauseAllocator.h	/^namespace CMSat {$/;"	n
ClauseAllocator	cmsat/ClauseAllocator.h	/^    class ClauseAllocator {$/;"	c	namespace:CMSat
NUM_BITS_OUTER_OFFSET	cmsat/ClauseAllocator.h	34;"	d
NewPointerAndOffset	cmsat/ClauseAllocator.h	/^        struct NewPointerAndOffset {$/;"	s	class:CMSat::ClauseAllocator
currentlyUsedSizes	cmsat/ClauseAllocator.h	/^        vec<size_t> currentlyUsedSizes;$/;"	m	class:CMSat::ClauseAllocator
dataStarts	cmsat/ClauseAllocator.h	/^        vec<BASE_DATA_TYPE*> dataStarts; \/\/\/<Stacks start at these positions$/;"	m	class:CMSat::ClauseAllocator
getPointer	cmsat/ClauseAllocator.h	/^        inline Clause* getPointer(const uint32_t offset) const {$/;"	f	class:CMSat::ClauseAllocator
maxSizes	cmsat/ClauseAllocator.h	/^        vec<size_t> maxSizes; \/\/\/<The number of 32-bit datapieces allocated in each stack$/;"	m	class:CMSat::ClauseAllocator
newOffset	cmsat/ClauseAllocator.h	/^            uint32_t newOffset; \/\/\/<The new offset where the clause now resides$/;"	m	struct:CMSat::ClauseAllocator::NewPointerAndOffset
newPointer	cmsat/ClauseAllocator.h	/^            Clause* newPointer; \/\/\/<The new place$/;"	m	struct:CMSat::ClauseAllocator::NewPointerAndOffset
origClauseSizes	cmsat/ClauseAllocator.h	/^        vec<vec<uint32_t> > origClauseSizes;$/;"	m	class:CMSat::ClauseAllocator
otherClauses	cmsat/ClauseAllocator.h	/^        vector<Clause*> otherClauses;$/;"	m	class:CMSat::ClauseAllocator
sizes	cmsat/ClauseAllocator.h	/^        vec<size_t> sizes; \/\/\/<The number of 32-bit datapieces currently used in each stack$/;"	m	class:CMSat::ClauseAllocator
threeLongClauses	cmsat/ClauseAllocator.h	/^        vector<Clause*> threeLongClauses;$/;"	m	class:CMSat::ClauseAllocator
ClauseCleaner	cmsat/ClauseCleaner.cpp	/^ClauseCleaner::ClauseCleaner(Solver& _solver) :$/;"	f	class:ClauseCleaner
cleanClause	cmsat/ClauseCleaner.cpp	/^inline bool ClauseCleaner::cleanClause(Clause*& cc) {$/;"	f	class:ClauseCleaner
cleanClause	cmsat/ClauseCleaner.cpp	/^inline bool ClauseCleaner::cleanClause(XorClause& c) {$/;"	f	class:ClauseCleaner
cleanClauses	cmsat/ClauseCleaner.cpp	/^void ClauseCleaner::cleanClauses(vec<Clause*>& cs, ClauseSetType type, const uint32_t limit) {$/;"	f	class:ClauseCleaner
cleanClauses	cmsat/ClauseCleaner.cpp	/^void ClauseCleaner::cleanClauses(vec<XorClause*>& cs, ClauseSetType type, const uint32_t limit) {$/;"	f	class:ClauseCleaner
removeSatisfiedBins	cmsat/ClauseCleaner.cpp	/^void ClauseCleaner::removeSatisfiedBins(const uint32_t limit) {$/;"	f	class:ClauseCleaner
satisfied	cmsat/ClauseCleaner.cpp	/^bool ClauseCleaner::satisfied(const Clause& c) const {$/;"	f	class:ClauseCleaner
satisfied	cmsat/ClauseCleaner.cpp	/^bool ClauseCleaner::satisfied(const Watched& watched, Lit lit) {$/;"	f	class:ClauseCleaner
satisfied	cmsat/ClauseCleaner.cpp	/^bool ClauseCleaner::satisfied(const XorClause& c) const {$/;"	f	class:ClauseCleaner
CLAUSECLEANER_H	cmsat/ClauseCleaner.h	23;"	d
CMSat	cmsat/ClauseCleaner.h	/^namespace CMSat {$/;"	n
ClauseCleaner	cmsat/ClauseCleaner.h	/^    class ClauseCleaner {$/;"	c	namespace:CMSat
ClauseSetType	cmsat/ClauseCleaner.h	/^        enum ClauseSetType {$/;"	g	class:CMSat::ClauseCleaner
binaryClauses	cmsat/ClauseCleaner.h	/^            clauses, binaryClauses, xorclauses, learnts$/;"	e	enum:CMSat::ClauseCleaner::ClauseSetType
clauses	cmsat/ClauseCleaner.h	/^            clauses, binaryClauses, xorclauses, learnts$/;"	e	enum:CMSat::ClauseCleaner::ClauseSetType
lastNumUnitaryClean	cmsat/ClauseCleaner.h	/^        uint32_t lastNumUnitaryClean[6]; \/\/\/<Last time we cleaned from satisfied clauses&false literals, this many unitary clauses were known$/;"	m	class:CMSat::ClauseCleaner
lastNumUnitarySat	cmsat/ClauseCleaner.h	/^        uint32_t lastNumUnitarySat[6]; \/\/\/<Last time we cleaned from satisfied clauses, this many unitary clauses were known$/;"	m	class:CMSat::ClauseCleaner
learnts	cmsat/ClauseCleaner.h	/^            clauses, binaryClauses, xorclauses, learnts$/;"	e	enum:CMSat::ClauseCleaner::ClauseSetType
removeAndCleanAll	cmsat/ClauseCleaner.h	/^    inline void ClauseCleaner::removeAndCleanAll(const bool nolimit) {$/;"	f	class:CMSat::ClauseCleaner
solver	cmsat/ClauseCleaner.h	/^        Solver& solver;$/;"	m	class:CMSat::ClauseCleaner
xorclauses	cmsat/ClauseCleaner.h	/^            clauses, binaryClauses, xorclauses, learnts$/;"	e	enum:CMSat::ClauseCleaner::ClauseSetType
CLAUSEOFFSET_H	cmsat/ClauseOffset.h	23;"	d
CMSat	cmsat/ClauseOffset.h	/^namespace CMSat {$/;"	n
ClauseOffset	cmsat/ClauseOffset.h	/^    typedef uint32_t ClauseOffset;$/;"	t	namespace:CMSat
ClauseVivifier	cmsat/ClauseVivifier.cpp	/^ClauseVivifier::ClauseVivifier(Solver& _solver) :$/;"	f	class:ClauseVivifier
makeNonLearntBin	cmsat/ClauseVivifier.cpp	/^void ClauseVivifier::makeNonLearntBin(const Lit lit1, const Lit lit2, const bool learnt) {$/;"	f	class:ClauseVivifier
vivifyClauses	cmsat/ClauseVivifier.cpp	/^bool ClauseVivifier::vivifyClauses() {$/;"	f	class:ClauseVivifier
vivifyClauses2	cmsat/ClauseVivifier.cpp	/^bool ClauseVivifier::vivifyClauses2(vec<Clause*>& clauses) {$/;"	f	class:ClauseVivifier
CLAUSEVIVIFIER_H	cmsat/ClauseVivifier.h	23;"	d
CMSat	cmsat/ClauseVivifier.h	/^namespace CMSat {$/;"	n
ClauseVivifier	cmsat/ClauseVivifier.h	/^    class ClauseVivifier {$/;"	c	namespace:CMSat
lastTimeWentUntil	cmsat/ClauseVivifier.h	/^        uint32_t lastTimeWentUntil;$/;"	m	class:CMSat::ClauseVivifier
numCalls	cmsat/ClauseVivifier.h	/^        uint32_t numCalls;$/;"	m	class:CMSat::ClauseVivifier
operator ()	cmsat/ClauseVivifier.h	/^            bool operator () (const Clause* x, const Clause* y) {$/;"	f	struct:CMSat::ClauseVivifier::sortBySize
solver	cmsat/ClauseVivifier.h	/^        Solver& solver;$/;"	m	class:CMSat::ClauseVivifier
sortBySize	cmsat/ClauseVivifier.h	/^        struct sortBySize {$/;"	s	class:CMSat::ClauseVivifier
CompleteDetachReatacher	cmsat/CompleteDetachReattacher.cpp	/^CompleteDetachReatacher::CompleteDetachReatacher(Solver& _solver) :$/;"	f	class:CompleteDetachReatacher
cleanAndAttachClauses	cmsat/CompleteDetachReattacher.cpp	/^inline void CompleteDetachReatacher::cleanAndAttachClauses(vec<Clause*>& cs) {$/;"	f	class:CompleteDetachReatacher
cleanAndAttachClauses	cmsat/CompleteDetachReattacher.cpp	/^inline void CompleteDetachReatacher::cleanAndAttachClauses(vec<XorClause*>& cs) {$/;"	f	class:CompleteDetachReatacher
cleanClause	cmsat/CompleteDetachReattacher.cpp	/^inline bool CompleteDetachReatacher::cleanClause(Clause*& cl) {$/;"	f	class:CompleteDetachReatacher
cleanClause	cmsat/CompleteDetachReattacher.cpp	/^inline bool CompleteDetachReatacher::cleanClause(XorClause& ps) {$/;"	f	class:CompleteDetachReatacher
clearWatchNotBinNotTri	cmsat/CompleteDetachReattacher.cpp	/^const CompleteDetachReatacher::ClausesStay CompleteDetachReatacher::clearWatchNotBinNotTri(vec<Watched>& ws, const bool removeTri) {$/;"	f	class:CompleteDetachReatacher
detachNonBinsNonTris	cmsat/CompleteDetachReattacher.cpp	/^void CompleteDetachReatacher::detachNonBinsNonTris(const bool removeTri) {$/;"	f	class:CompleteDetachReatacher
reattachNonBins	cmsat/CompleteDetachReattacher.cpp	/^bool CompleteDetachReatacher::reattachNonBins() {$/;"	f	class:CompleteDetachReatacher
CMSat	cmsat/CompleteDetachReattacher.h	/^namespace CMSat {$/;"	n
ClausesStay	cmsat/CompleteDetachReattacher.h	/^            ClausesStay() :$/;"	f	class:CMSat::CompleteDetachReatacher::ClausesStay
ClausesStay	cmsat/CompleteDetachReattacher.h	/^        class ClausesStay {$/;"	c	class:CMSat::CompleteDetachReatacher
CompleteDetachReatacher	cmsat/CompleteDetachReattacher.h	/^    class CompleteDetachReatacher {$/;"	c	namespace:CMSat
learntBins	cmsat/CompleteDetachReattacher.h	/^            uint32_t learntBins;$/;"	m	class:CMSat::CompleteDetachReatacher::ClausesStay
nonLearntBins	cmsat/CompleteDetachReattacher.h	/^            uint32_t nonLearntBins;$/;"	m	class:CMSat::CompleteDetachReatacher::ClausesStay
operator +=	cmsat/CompleteDetachReattacher.h	/^            ClausesStay& operator+=(const ClausesStay& other) {$/;"	f	class:CMSat::CompleteDetachReatacher::ClausesStay
solver	cmsat/CompleteDetachReattacher.h	/^        Solver& solver;$/;"	m	class:CMSat::CompleteDetachReatacher
tris	cmsat/CompleteDetachReattacher.h	/^            uint32_t tris;$/;"	m	class:CMSat::CompleteDetachReatacher::ClausesStay
DataSync	cmsat/DataSync.cpp	/^DataSync::DataSync(Solver& _solver, SharedData* _sharedData) :$/;"	f	class:DataSync
addOneBinToOthers	cmsat/DataSync.cpp	/^void DataSync::addOneBinToOthers(const Lit lit1, const Lit lit2) {$/;"	f	class:DataSync
newVar	cmsat/DataSync.cpp	/^void DataSync::newVar() {$/;"	f	class:DataSync
shareBinData	cmsat/DataSync.cpp	/^bool DataSync::shareBinData() {$/;"	f	class:DataSync
shareUnitData	cmsat/DataSync.cpp	/^bool DataSync::shareUnitData() {$/;"	f	class:DataSync
syncBinFromOthers	cmsat/DataSync.cpp	/^bool DataSync::syncBinFromOthers(const Lit lit, const vector<Lit>& bins, uint32_t& finished, vec<Watched>& ws) {$/;"	f	class:DataSync
syncBinToOthers	cmsat/DataSync.cpp	/^void DataSync::syncBinToOthers() {$/;"	f	class:DataSync
syncData	cmsat/DataSync.cpp	/^bool DataSync::syncData() {$/;"	f	class:DataSync
CMSat	cmsat/DataSync.h	/^namespace CMSat {$/;"	n
DataSync	cmsat/DataSync.h	/^    class DataSync {$/;"	c	namespace:CMSat
getRecvBinData	cmsat/DataSync.h	/^    inline uint32_t DataSync::getRecvBinData() const {$/;"	f	class:CMSat::DataSync
getRecvUnitData	cmsat/DataSync.h	/^    inline uint32_t DataSync::getRecvUnitData() const {$/;"	f	class:CMSat::DataSync
getSentBinData	cmsat/DataSync.h	/^    inline uint32_t DataSync::getSentBinData() const {$/;"	f	class:CMSat::DataSync
getSentUnitData	cmsat/DataSync.h	/^    inline uint32_t DataSync::getSentUnitData() const {$/;"	f	class:CMSat::DataSync
lastSyncConf	cmsat/DataSync.h	/^        uint64_t lastSyncConf;$/;"	m	class:CMSat::DataSync
newBinClauses	cmsat/DataSync.h	/^        vector<std::pair<Lit, Lit> > newBinClauses;$/;"	m	class:CMSat::DataSync
recvBinData	cmsat/DataSync.h	/^        uint32_t recvBinData;$/;"	m	class:CMSat::DataSync
recvUnitData	cmsat/DataSync.h	/^        uint32_t recvUnitData;$/;"	m	class:CMSat::DataSync
seen	cmsat/DataSync.h	/^        vec<char> seen;$/;"	m	class:CMSat::DataSync
sentBinData	cmsat/DataSync.h	/^        uint32_t sentBinData;$/;"	m	class:CMSat::DataSync
sentUnitData	cmsat/DataSync.h	/^        uint32_t sentUnitData;$/;"	m	class:CMSat::DataSync
sharedData	cmsat/DataSync.h	/^        SharedData* sharedData;$/;"	m	class:CMSat::DataSync
signalNewBinClause	cmsat/DataSync.h	/^    inline void DataSync::signalNewBinClause(Lit lit1, Lit lit2) {$/;"	f	class:CMSat::DataSync
signalNewBinClause	cmsat/DataSync.h	/^    inline void DataSync::signalNewBinClause(T& ps) {$/;"	f	class:CMSat::DataSync
solver	cmsat/DataSync.h	/^        Solver& solver;$/;"	m	class:CMSat::DataSync
syncFinish	cmsat/DataSync.h	/^        vec<uint32_t> syncFinish;$/;"	m	class:CMSat::DataSync
DEBUG_COMMENT_PARSING	cmsat/DimacsParser.cpp	31;"	d	file:
DimacsParseError	cmsat/DimacsParser.cpp	/^DimacsParseError::DimacsParseError(const std::string& arg)$/;"	f	class:DimacsParseError
DimacsParser	cmsat/DimacsParser.cpp	/^DimacsParser::DimacsParser(Solver* _solver, const bool _debugLib, const bool _debugNewVar, const bool _grouping, const bool _addAsLearnt) :$/;"	f	class:DimacsParser
match	cmsat/DimacsParser.cpp	/^bool DimacsParser::match(StreamBuffer& in, const char* str) {$/;"	f	class:DimacsParser
parseClauseParameters	cmsat/DimacsParser.cpp	/^void DimacsParser::parseClauseParameters(StreamBuffer& in, bool& learnt, uint32_t& glue, float& miniSatAct) {$/;"	f	class:DimacsParser
parseComments	cmsat/DimacsParser.cpp	/^void DimacsParser::parseComments(StreamBuffer& in, const std::string str) throw(DimacsParseError) {$/;"	f	class:DimacsParser
parseFloat	cmsat/DimacsParser.cpp	/^float DimacsParser::parseFloat(StreamBuffer& in) throw(DimacsParseError) {$/;"	f	class:DimacsParser
parseIndependentSet	cmsat/DimacsParser.cpp	/^void DimacsParser::parseIndependentSet(StreamBuffer& in) {$/;"	f	class:DimacsParser
parseInt	cmsat/DimacsParser.cpp	/^int32_t DimacsParser::parseInt(StreamBuffer& in, uint32_t& lenParsed) throw(DimacsParseError) {$/;"	f	class:DimacsParser
parseSolveComment	cmsat/DimacsParser.cpp	/^void DimacsParser::parseSolveComment(StreamBuffer& in) {$/;"	f	class:DimacsParser
parseString	cmsat/DimacsParser.cpp	/^void DimacsParser::parseString(StreamBuffer& in, std::string& str) {$/;"	f	class:DimacsParser
parse_DIMACS	cmsat/DimacsParser.cpp	/^void DimacsParser::parse_DIMACS(T input_stream) {$/;"	f	class:DimacsParser
parse_DIMACS_main	cmsat/DimacsParser.cpp	/^void DimacsParser::parse_DIMACS_main(StreamBuffer& in) {$/;"	f	class:DimacsParser
printHeader	cmsat/DimacsParser.cpp	/^void DimacsParser::printHeader(StreamBuffer& in) throw(DimacsParseError) {$/;"	f	class:DimacsParser
readBranchingOrder	cmsat/DimacsParser.cpp	/^void DimacsParser::readBranchingOrder(StreamBuffer& in) {$/;"	f	class:DimacsParser
readClause	cmsat/DimacsParser.cpp	/^void DimacsParser::readClause(StreamBuffer& in, vec<Lit>& lits) throw(DimacsParseError) {$/;"	f	class:DimacsParser
readFullClause	cmsat/DimacsParser.cpp	/^void DimacsParser::readFullClause(StreamBuffer& in) throw(DimacsParseError) {$/;"	f	class:DimacsParser
skipLine	cmsat/DimacsParser.cpp	/^void DimacsParser::skipLine(StreamBuffer& in) {$/;"	f	class:DimacsParser
skipWhitespace	cmsat/DimacsParser.cpp	/^void DimacsParser::skipWhitespace(StreamBuffer& in) {$/;"	f	class:DimacsParser
stringify	cmsat/DimacsParser.cpp	/^std::string DimacsParser::stringify(uint32_t x) {$/;"	f	class:DimacsParser
untilEnd	cmsat/DimacsParser.cpp	/^std::string DimacsParser::untilEnd(StreamBuffer& in) {$/;"	f	class:DimacsParser
~DimacsParseError	cmsat/DimacsParser.cpp	/^DimacsParseError::~DimacsParseError() throw() {$/;"	f	class:DimacsParseError
CMSat	cmsat/DimacsParser.h	/^namespace CMSat {$/;"	n
DIMACSPARSER_H	cmsat/DimacsParser.h	23;"	d
DimacsParseError	cmsat/DimacsParser.h	/^    class DimacsParseError : public std::runtime_error {$/;"	c	namespace:CMSat
DimacsParser	cmsat/DimacsParser.h	/^    class DimacsParser {$/;"	c	namespace:CMSat
addAsLearnt	cmsat/DimacsParser.h	/^        const bool addAsLearnt;$/;"	m	class:CMSat::DimacsParser
debugLib	cmsat/DimacsParser.h	/^        const bool debugLib;$/;"	m	class:CMSat::DimacsParser
debugLibPart	cmsat/DimacsParser.h	/^        uint32_t debugLibPart; \/\/\/<printing partial solutions to debugLibPart1..N.output when "debugLib" is set to TRUE$/;"	m	class:CMSat::DimacsParser
debugNewVar	cmsat/DimacsParser.h	/^        const bool debugNewVar;$/;"	m	class:CMSat::DimacsParser
grouping	cmsat/DimacsParser.h	/^        const bool grouping;$/;"	m	class:CMSat::DimacsParser
lineNum	cmsat/DimacsParser.h	/^        size_t lineNum;$/;"	m	class:CMSat::DimacsParser
lits	cmsat/DimacsParser.h	/^        vec<Lit> lits; \/\/\/<To reduce temporary creation overhead$/;"	m	class:CMSat::DimacsParser
numLearntClauses	cmsat/DimacsParser.h	/^        uint32_t numLearntClauses; \/\/\/<Number of learnt non-xor clauses added$/;"	m	class:CMSat::DimacsParser
numNormClauses	cmsat/DimacsParser.h	/^        uint32_t numNormClauses; \/\/\/<Number of non-learnt, non-xor claues added$/;"	m	class:CMSat::DimacsParser
numXorClauses	cmsat/DimacsParser.h	/^        uint32_t numXorClauses; \/\/\/<Number of non-learnt xor clauses added$/;"	m	class:CMSat::DimacsParser
solver	cmsat/DimacsParser.h	/^        Solver *solver;$/;"	m	class:CMSat::DimacsParser
varVector	cmsat/DimacsParser.h	/^        vec<Var> varVector; \/\/\/< To reduce temporary creation overhead for independent\/dependent sets$/;"	m	class:CMSat::DimacsParser
BitIter	cmsat/DoublePackedRow.h	/^            inline BitIter(unsigned char& mp, const uint32_t _offset) :$/;"	f	class:CMSat::DoublePackedRow::BitIter
BitIter	cmsat/DoublePackedRow.h	/^        class BitIter {$/;"	c	class:CMSat::DoublePackedRow
BitIterConst	cmsat/DoublePackedRow.h	/^            inline BitIterConst(unsigned char& mp, const uint32_t _offset) :$/;"	f	class:CMSat::DoublePackedRow::BitIterConst
BitIterConst	cmsat/DoublePackedRow.h	/^        class BitIterConst {$/;"	c	class:CMSat::DoublePackedRow
CMSat	cmsat/DoublePackedRow.h	/^namespace CMSat {$/;"	n
DOUBLEPACKEDROW_H	cmsat/DoublePackedRow.h	23;"	d
DoublePackedRow	cmsat/DoublePackedRow.h	/^        DoublePackedRow() :$/;"	f	class:CMSat::DoublePackedRow
DoublePackedRow	cmsat/DoublePackedRow.h	/^    class DoublePackedRow {$/;"	c	namespace:CMSat
getBool	cmsat/DoublePackedRow.h	/^            inline const bool getBool() const {$/;"	f	class:CMSat::DoublePackedRow::BitIter
getBool	cmsat/DoublePackedRow.h	/^            inline const bool getBool() const {$/;"	f	class:CMSat::DoublePackedRow::BitIterConst
growTo	cmsat/DoublePackedRow.h	/^        void growTo(const uint32_t newNumElems) {$/;"	f	class:CMSat::DoublePackedRow
isDef	cmsat/DoublePackedRow.h	/^            inline const bool isDef() const {$/;"	f	class:CMSat::DoublePackedRow::BitIter
isDef	cmsat/DoublePackedRow.h	/^            inline const bool isDef() const {$/;"	f	class:CMSat::DoublePackedRow::BitIterConst
isUndef	cmsat/DoublePackedRow.h	/^            inline const bool isUndef() const {$/;"	f	class:CMSat::DoublePackedRow::BitIter
isUndef	cmsat/DoublePackedRow.h	/^            inline const bool isUndef() const {$/;"	f	class:CMSat::DoublePackedRow::BitIterConst
mp	cmsat/DoublePackedRow.h	/^        unsigned char *mp;$/;"	m	class:CMSat::DoublePackedRow
numElems	cmsat/DoublePackedRow.h	/^        Var numElems;$/;"	m	class:CMSat::DoublePackedRow
offset	cmsat/DoublePackedRow.h	/^            const uint32_t offset;$/;"	m	class:CMSat::DoublePackedRow::BitIter
offset	cmsat/DoublePackedRow.h	/^            const uint32_t offset;$/;"	m	class:CMSat::DoublePackedRow::BitIterConst
operator !=	cmsat/DoublePackedRow.h	/^            inline const bool operator!=(lbool b) const {$/;"	f	class:CMSat::DoublePackedRow::BitIter
operator !=	cmsat/DoublePackedRow.h	/^            inline const bool operator!=(lbool b) const {$/;"	f	class:CMSat::DoublePackedRow::BitIterConst
operator =	cmsat/DoublePackedRow.h	/^            inline void operator=(const lbool toSet) {$/;"	f	class:CMSat::DoublePackedRow::BitIter
operator ==	cmsat/DoublePackedRow.h	/^            inline const bool operator==(lbool b) const {$/;"	f	class:CMSat::DoublePackedRow::BitIter
operator ==	cmsat/DoublePackedRow.h	/^            inline const bool operator==(lbool b) const {$/;"	f	class:CMSat::DoublePackedRow::BitIterConst
operator []	cmsat/DoublePackedRow.h	/^        inline BitIter operator[](const uint32_t at) {$/;"	f	class:CMSat::DoublePackedRow
operator []	cmsat/DoublePackedRow.h	/^        inline const BitIterConst operator[](const uint32_t at) const {$/;"	f	class:CMSat::DoublePackedRow
operator ^	cmsat/DoublePackedRow.h	/^            const lbool operator^(const bool b) const {$/;"	f	class:CMSat::DoublePackedRow::BitIter
operator ^	cmsat/DoublePackedRow.h	/^            const lbool operator^(const bool b) const {$/;"	f	class:CMSat::DoublePackedRow::BitIterConst
operator lbool	cmsat/DoublePackedRow.h	/^            inline operator lbool() const {$/;"	f	class:CMSat::DoublePackedRow::BitIter
operator lbool	cmsat/DoublePackedRow.h	/^            inline operator lbool() const {$/;"	f	class:CMSat::DoublePackedRow::BitIterConst
push	cmsat/DoublePackedRow.h	/^        inline void push(const lbool val) {$/;"	f	class:CMSat::DoublePackedRow
size	cmsat/DoublePackedRow.h	/^        uint32_t size() const {$/;"	f	class:CMSat::DoublePackedRow
val	cmsat/DoublePackedRow.h	/^            const unsigned char& val;$/;"	m	class:CMSat::DoublePackedRow::BitIterConst
val	cmsat/DoublePackedRow.h	/^            unsigned char& val;$/;"	m	class:CMSat::DoublePackedRow::BitIter
FailedLitSearcher	cmsat/FailedLitSearcher.cpp	/^FailedLitSearcher::FailedLitSearcher(Solver& _solver) :$/;"	f	class:FailedLitSearcher
addBin	cmsat/FailedLitSearcher.cpp	/^void FailedLitSearcher::addBin(const Lit lit1, const Lit lit2) {$/;"	f	class:FailedLitSearcher
addFromSolver	cmsat/FailedLitSearcher.cpp	/^void FailedLitSearcher::addFromSolver(const vec< XorClause* >& cs) {$/;"	f	class:FailedLitSearcher
addVarFromXors	cmsat/FailedLitSearcher.cpp	/^inline void FailedLitSearcher::addVarFromXors(const Var var) {$/;"	f	class:FailedLitSearcher
fillImplies	cmsat/FailedLitSearcher.cpp	/^void FailedLitSearcher::fillImplies(const Lit lit) {$/;"	f	class:FailedLitSearcher
getTwoLongXor	cmsat/FailedLitSearcher.cpp	/^FailedLitSearcher::TwoLongXor FailedLitSearcher::getTwoLongXor(const XorClause& c) {$/;"	f	class:FailedLitSearcher
hyperBinResolution	cmsat/FailedLitSearcher.cpp	/^void FailedLitSearcher::hyperBinResolution(const Lit lit) {$/;"	f	class:FailedLitSearcher
printResults	cmsat/FailedLitSearcher.cpp	/^void FailedLitSearcher::printResults(const double myTime) const {$/;"	f	class:FailedLitSearcher
removeVarFromXors	cmsat/FailedLitSearcher.cpp	/^inline void FailedLitSearcher::removeVarFromXors(const Var var) {$/;"	f	class:FailedLitSearcher
search	cmsat/FailedLitSearcher.cpp	/^bool FailedLitSearcher::search() {$/;"	f	class:FailedLitSearcher
tryBoth	cmsat/FailedLitSearcher.cpp	/^bool FailedLitSearcher::tryBoth(const Lit lit1, const Lit lit2) {$/;"	f	class:FailedLitSearcher
BinAddData	cmsat/FailedLitSearcher.h	/^        struct BinAddData {$/;"	s	class:CMSat::FailedLitSearcher
BinAddDataSorter	cmsat/FailedLitSearcher.h	/^        struct BinAddDataSorter {$/;"	s	class:CMSat::FailedLitSearcher
BinXorToAdd	cmsat/FailedLitSearcher.h	/^            BinXorToAdd(const Lit _lit1, const Lit _lit2, const bool _isEqualFalse) :$/;"	f	class:CMSat::FailedLitSearcher::BinXorToAdd
BinXorToAdd	cmsat/FailedLitSearcher.h	/^        class BinXorToAdd {$/;"	c	class:CMSat::FailedLitSearcher
CMSat	cmsat/FailedLitSearcher.h	/^namespace CMSat {$/;"	n
FAILEDLITSEARCHER_H	cmsat/FailedLitSearcher.h	23;"	d
FailedLitSearcher	cmsat/FailedLitSearcher.h	/^    class FailedLitSearcher {$/;"	c	namespace:CMSat
LitOrder2	cmsat/FailedLitSearcher.h	/^            LitOrder2(const vec<BinPropData>& _binPropData) :$/;"	f	struct:CMSat::FailedLitSearcher::LitOrder2
LitOrder2	cmsat/FailedLitSearcher.h	/^        struct LitOrder2 {$/;"	s	class:CMSat::FailedLitSearcher
TwoLongXor	cmsat/FailedLitSearcher.h	/^        class TwoLongXor {$/;"	c	class:CMSat::FailedLitSearcher
addedBin	cmsat/FailedLitSearcher.h	/^        uint32_t addedBin;$/;"	m	class:CMSat::FailedLitSearcher
binPropData	cmsat/FailedLitSearcher.h	/^            const vec<BinPropData>& binPropData;$/;"	m	struct:CMSat::FailedLitSearcher::LitOrder2
binXorFind	cmsat/FailedLitSearcher.h	/^        bool binXorFind;$/;"	m	class:CMSat::FailedLitSearcher
binXorToAdd	cmsat/FailedLitSearcher.h	/^        vector<BinXorToAdd> binXorToAdd;$/;"	m	class:CMSat::FailedLitSearcher
bothInvert	cmsat/FailedLitSearcher.h	/^        uint32_t bothInvert;$/;"	m	class:CMSat::FailedLitSearcher
bothSame	cmsat/FailedLitSearcher.h	/^        vec<Lit> bothSame;$/;"	m	class:CMSat::FailedLitSearcher
dontRemoveAncestor	cmsat/FailedLitSearcher.h	/^        BitArray dontRemoveAncestor;$/;"	m	class:CMSat::FailedLitSearcher
failed	cmsat/FailedLitSearcher.h	/^        bool failed; \/\/\/<For checking that a specific propagation failed (=conflict). It is used in many places$/;"	m	class:CMSat::FailedLitSearcher
getTotalTime	cmsat/FailedLitSearcher.h	/^    inline double FailedLitSearcher::getTotalTime() const {$/;"	f	class:CMSat::FailedLitSearcher
goodBothSame	cmsat/FailedLitSearcher.h	/^        uint32_t goodBothSame; \/\/\/<Records num. of literals that have been propagated to the same value by both "var" and "~var"$/;"	m	class:CMSat::FailedLitSearcher
hyperbinProps	cmsat/FailedLitSearcher.h	/^        uint64_t hyperbinProps; \/\/\/<Number of bogoprops done by the hyper-binary resolution function hyperBinResolution()$/;"	m	class:CMSat::FailedLitSearcher
inverted	cmsat/FailedLitSearcher.h	/^            bool inverted;$/;"	m	class:CMSat::FailedLitSearcher::TwoLongXor
investigateXor	cmsat/FailedLitSearcher.h	/^        vec<uint32_t> investigateXor;$/;"	m	class:CMSat::FailedLitSearcher
isEqualFalse	cmsat/FailedLitSearcher.h	/^            bool isEqualFalse;$/;"	m	class:CMSat::FailedLitSearcher::BinXorToAdd
lastTimeFoundTruths	cmsat/FailedLitSearcher.h	/^        uint32_t lastTimeFoundTruths; \/\/\/<Records how many unit clauses we found last time we called search()$/;"	m	class:CMSat::FailedLitSearcher
lastTimeStopped	cmsat/FailedLitSearcher.h	/^        uint32_t lastTimeStopped;$/;"	m	class:CMSat::FailedLitSearcher
lastTrailSize	cmsat/FailedLitSearcher.h	/^        uint32_t lastTrailSize;$/;"	m	class:CMSat::FailedLitSearcher
lit	cmsat/FailedLitSearcher.h	/^            Lit lit;$/;"	m	struct:CMSat::FailedLitSearcher::BinAddData
lit1	cmsat/FailedLitSearcher.h	/^            Lit lit1;$/;"	m	class:CMSat::FailedLitSearcher::BinXorToAdd
lit2	cmsat/FailedLitSearcher.h	/^            Lit lit2;$/;"	m	class:CMSat::FailedLitSearcher::BinXorToAdd
lits	cmsat/FailedLitSearcher.h	/^            vector<Lit> lits;$/;"	m	struct:CMSat::FailedLitSearcher::BinAddData
maxHyperBinProps	cmsat/FailedLitSearcher.h	/^        uint64_t maxHyperBinProps;$/;"	m	class:CMSat::FailedLitSearcher
myImpliesSet	cmsat/FailedLitSearcher.h	/^        vec<Var> myImpliesSet; \/\/\/<variables set in myimplies$/;"	m	class:CMSat::FailedLitSearcher
needToVisit	cmsat/FailedLitSearcher.h	/^        BitArray needToVisit;$/;"	m	class:CMSat::FailedLitSearcher
newBinXor	cmsat/FailedLitSearcher.h	/^        uint32_t newBinXor;$/;"	m	class:CMSat::FailedLitSearcher
numCalls	cmsat/FailedLitSearcher.h	/^        uint32_t numCalls; \/\/\/<Number of times search() has been called$/;"	m	class:CMSat::FailedLitSearcher
numFailed	cmsat/FailedLitSearcher.h	/^        uint32_t numFailed; \/\/\/<Records num. of failed literals during search()$/;"	m	class:CMSat::FailedLitSearcher
numPropsMultiplier	cmsat/FailedLitSearcher.h	/^        double numPropsMultiplier; \/\/\/<If last time we called search() all went fine, then this is incremented, so we do more searching this time$/;"	m	class:CMSat::FailedLitSearcher
occur	cmsat/FailedLitSearcher.h	/^        vector<vector<uint32_t> > occur; \/\/\/<Occurence list for XORs. Indexed by variables$/;"	m	class:CMSat::FailedLitSearcher
operator ()	cmsat/FailedLitSearcher.h	/^            bool operator () (const Lit x, const Lit y) const {$/;"	f	struct:CMSat::FailedLitSearcher::LitOrder2
operator ()	cmsat/FailedLitSearcher.h	/^            bool operator() (const BinAddData& a, const BinAddData& b) const {$/;"	f	struct:CMSat::FailedLitSearcher::BinAddDataSorter
operator <	cmsat/FailedLitSearcher.h	/^            bool operator<(const TwoLongXor& other) const {$/;"	f	class:CMSat::FailedLitSearcher::TwoLongXor
operator ==	cmsat/FailedLitSearcher.h	/^            bool operator==(const TwoLongXor& other) const {$/;"	f	class:CMSat::FailedLitSearcher::TwoLongXor
origProps	cmsat/FailedLitSearcher.h	/^        uint64_t origProps; \/\/\/<Records num. of bogoprops at the start-up of search()$/;"	m	class:CMSat::FailedLitSearcher
origTrailSize	cmsat/FailedLitSearcher.h	/^        uint32_t origTrailSize; \/\/\/<Records num. of 0-depth assignments at the start-up of search()$/;"	m	class:CMSat::FailedLitSearcher
propValue	cmsat/FailedLitSearcher.h	/^        BitArray propValue; \/\/\/<The value (0 or 1) of the lits propagated set in "propagated"$/;"	m	class:CMSat::FailedLitSearcher
propagated	cmsat/FailedLitSearcher.h	/^        BitArray propagated; \/\/\/<These lits have been propagated by propagating the lit picked$/;"	m	class:CMSat::FailedLitSearcher
propagatedBitSet	cmsat/FailedLitSearcher.h	/^        vector<uint32_t> propagatedBitSet;$/;"	m	class:CMSat::FailedLitSearcher
propagatedVars	cmsat/FailedLitSearcher.h	/^        vec<Var> propagatedVars;$/;"	m	class:CMSat::FailedLitSearcher
removedUselessLearnt	cmsat/FailedLitSearcher.h	/^        uint32_t removedUselessLearnt;$/;"	m	class:CMSat::FailedLitSearcher
removedUselessNonLearnt	cmsat/FailedLitSearcher.h	/^        uint32_t removedUselessNonLearnt;$/;"	m	class:CMSat::FailedLitSearcher
solver	cmsat/FailedLitSearcher.h	/^        Solver& solver; \/\/\/<The solver we are updating&working with$/;"	m	class:CMSat::FailedLitSearcher
tmpPs	cmsat/FailedLitSearcher.h	/^        vec<Lit> tmpPs;$/;"	m	class:CMSat::FailedLitSearcher
toClearDontRemoveAcestor	cmsat/FailedLitSearcher.h	/^        vec<Var> toClearDontRemoveAcestor;$/;"	m	class:CMSat::FailedLitSearcher
toReplaceBefore	cmsat/FailedLitSearcher.h	/^        uint32_t toReplaceBefore;$/;"	m	class:CMSat::FailedLitSearcher
totalTime	cmsat/FailedLitSearcher.h	/^        double totalTime;$/;"	m	class:CMSat::FailedLitSearcher
twoLongXors	cmsat/FailedLitSearcher.h	/^        std::set<TwoLongXor> twoLongXors;$/;"	m	class:CMSat::FailedLitSearcher
unPropagatedBin	cmsat/FailedLitSearcher.h	/^        BitArray unPropagatedBin;$/;"	m	class:CMSat::FailedLitSearcher
uselessBin	cmsat/FailedLitSearcher.h	/^        vec<Lit> uselessBin;$/;"	m	class:CMSat::FailedLitSearcher
var	cmsat/FailedLitSearcher.h	/^            Var var[2];$/;"	m	class:CMSat::FailedLitSearcher::TwoLongXor
xorClauseSizes	cmsat/FailedLitSearcher.h	/^        vec<uint32_t> xorClauseSizes;$/;"	m	class:CMSat::FailedLitSearcher
xorClauseTouched	cmsat/FailedLitSearcher.h	/^        BitArray xorClauseTouched;$/;"	m	class:CMSat::FailedLitSearcher
FindUndef	cmsat/FindUndef.cpp	/^FindUndef::FindUndef(Solver& _solver) :$/;"	f	class:FindUndef
fillPotential	cmsat/FindUndef.cpp	/^void FindUndef::fillPotential() {$/;"	f	class:FindUndef
moveBinFromNormal	cmsat/FindUndef.cpp	/^void FindUndef::moveBinFromNormal() {$/;"	f	class:FindUndef
moveBinToNormal	cmsat/FindUndef.cpp	/^void FindUndef::moveBinToNormal() {$/;"	f	class:FindUndef
unRoll	cmsat/FindUndef.cpp	/^const uint32_t FindUndef::unRoll() {$/;"	f	class:FindUndef
unboundIsPotentials	cmsat/FindUndef.cpp	/^void FindUndef::unboundIsPotentials() {$/;"	f	class:FindUndef
updateTables	cmsat/FindUndef.cpp	/^bool FindUndef::updateTables() {$/;"	f	class:FindUndef
CMSat	cmsat/FindUndef.h	/^namespace CMSat {$/;"	n
FINDUNDEF_H	cmsat/FindUndef.h	23;"	d
FindUndef	cmsat/FindUndef.h	/^    class FindUndef {$/;"	c	namespace:CMSat
binPosition	cmsat/FindUndef.h	/^        uint32_t binPosition;$/;"	m	class:CMSat::FindUndef
dontLookAtClause	cmsat/FindUndef.h	/^        vector<bool> dontLookAtClause; \/\/If set to TRUE, then that clause already has only 1 lit that is true, so it can be skipped during updateFixNeed()$/;"	m	class:CMSat::FindUndef
isPotential	cmsat/FindUndef.h	/^        vector<bool> isPotential;$/;"	m	class:CMSat::FindUndef
isPotentialSum	cmsat/FindUndef.h	/^        uint32_t isPotentialSum;$/;"	m	class:CMSat::FindUndef
satisfies	cmsat/FindUndef.h	/^        vector<uint32_t> satisfies;$/;"	m	class:CMSat::FindUndef
solver	cmsat/FindUndef.h	/^        Solver& solver;$/;"	m	class:CMSat::FindUndef
Gaussian	cmsat/Gaussian.cpp	/^Gaussian::Gaussian(Solver& _solver, const GaussConf& _config, const uint32_t _matrix_no, const vector<XorClause*>& _xorclauses) :$/;"	f	class:Gaussian
analyse_confl	cmsat/Gaussian.cpp	/^void Gaussian::analyse_confl(const matrixset& m, const uint32_t row, int32_t& maxlevel, uint32_t& size, uint32_t& best_row) const {$/;"	f	class:Gaussian
cancel_until_sublevel	cmsat/Gaussian.cpp	/^void Gaussian::cancel_until_sublevel(const uint32_t until_sublevel) {$/;"	f	class:Gaussian
check_first_one_in_row	cmsat/Gaussian.cpp	/^void Gaussian::check_first_one_in_row(matrixset& m, const uint32_t j) {$/;"	f	class:Gaussian
check_last_one_in_cols	cmsat/Gaussian.cpp	/^bool Gaussian::check_last_one_in_cols(matrixset& m) const {$/;"	f	class:Gaussian
check_matrix_against_varset	cmsat/Gaussian.cpp	/^void Gaussian::check_matrix_against_varset(PackedMatrix& matrix, const matrixset& m) const {$/;"	f	class:Gaussian
check_no_conflict	cmsat/Gaussian.cpp	/^bool Gaussian::check_no_conflict(matrixset& m) const {$/;"	f	class:Gaussian
disable_if_necessary	cmsat/Gaussian.cpp	/^void Gaussian::disable_if_necessary() {$/;"	f	class:Gaussian
eliminate	cmsat/Gaussian.cpp	/^uint32_t Gaussian::eliminate(matrixset& m) {$/;"	f	class:Gaussian
fill_matrix	cmsat/Gaussian.cpp	/^void Gaussian::fill_matrix(matrixset& origMat) {$/;"	f	class:Gaussian
find_sublevel	cmsat/Gaussian.cpp	/^uint32_t Gaussian::find_sublevel(const Var v) const {$/;"	f	class:Gaussian
find_truths	cmsat/Gaussian.cpp	/^llbool Gaussian::find_truths(vec<Lit>& learnt_clause, uint64_t& conflictC) {$/;"	f	class:Gaussian
full_init	cmsat/Gaussian.cpp	/^bool Gaussian::full_init() {$/;"	f	class:Gaussian
gaussian	cmsat/Gaussian.cpp	/^Gaussian::gaussian_ret Gaussian::gaussian(PropBy& confl) {$/;"	f	class:Gaussian
handle_matrix_confl	cmsat/Gaussian.cpp	/^Gaussian::gaussian_ret Gaussian::handle_matrix_confl(PropBy& confl, const matrixset& m, const uint32_t maxlevel, const uint32_t best_row) {$/;"	f	class:Gaussian
handle_matrix_prop	cmsat/Gaussian.cpp	/^Gaussian::gaussian_ret Gaussian::handle_matrix_prop(matrixset& m, const uint32_t row) {$/;"	f	class:Gaussian
handle_matrix_prop_and_confl	cmsat/Gaussian.cpp	/^Gaussian::gaussian_ret Gaussian::handle_matrix_prop_and_confl(matrixset& m, uint32_t last_row, PropBy& confl) {$/;"	f	class:Gaussian
init	cmsat/Gaussian.cpp	/^void Gaussian::init() {$/;"	f	class:Gaussian
lbool_to_string	cmsat/Gaussian.cpp	/^string Gaussian::lbool_to_string(const lbool toprint) {$/;"	f	class:Gaussian
nothing_to_propagate	cmsat/Gaussian.cpp	/^bool Gaussian::nothing_to_propagate(matrixset& m) const {$/;"	f	class:Gaussian
print_last_one_in_cols	cmsat/Gaussian.cpp	/^void Gaussian::print_last_one_in_cols(matrixset& m) const {$/;"	f	class:Gaussian
print_matrix	cmsat/Gaussian.cpp	/^void Gaussian::print_matrix(matrixset& m) const {$/;"	f	class:Gaussian
print_matrix_row	cmsat/Gaussian.cpp	/^void Gaussian::print_matrix_row(const T& row) const {$/;"	f	class:Gaussian
print_matrix_row_with_assigns	cmsat/Gaussian.cpp	/^void Gaussian::print_matrix_row_with_assigns(const T& row) const {$/;"	f	class:Gaussian
print_matrix_stats	cmsat/Gaussian.cpp	/^void Gaussian::print_matrix_stats() const {$/;"	f	class:Gaussian
print_stats	cmsat/Gaussian.cpp	/^void Gaussian::print_stats() const {$/;"	f	class:Gaussian
reset_stats	cmsat/Gaussian.cpp	/^void Gaussian::reset_stats() {$/;"	f	class:Gaussian
select_columnorder	cmsat/Gaussian.cpp	/^uint32_t Gaussian::select_columnorder(vector<uint16_t>& var_to_col, matrixset& origMat) {$/;"	f	class:Gaussian
set_matrixset_to_cur	cmsat/Gaussian.cpp	/^inline void Gaussian::set_matrixset_to_cur() {$/;"	f	class:Gaussian
unassigned_col	cmsat/Gaussian.cpp	/^static const uint16_t unassigned_col = std::numeric_limits<uint16_t>::max();$/;"	v	file:
unassigned_var	cmsat/Gaussian.cpp	/^static const Var unassigned_var = std::numeric_limits<Var>::max();$/;"	v	file:
update_last_one_in_col	cmsat/Gaussian.cpp	/^inline void Gaussian::update_last_one_in_col(matrixset& m) {$/;"	f	class:Gaussian
update_matrix_by_col_all	cmsat/Gaussian.cpp	/^void Gaussian::update_matrix_by_col_all(matrixset& m) {$/;"	f	class:Gaussian
update_matrix_col	cmsat/Gaussian.cpp	/^void Gaussian::update_matrix_col(matrixset& m, const Var var, const uint32_t col) {$/;"	f	class:Gaussian
~Gaussian	cmsat/Gaussian.cpp	/^Gaussian::~Gaussian() {$/;"	f	class:Gaussian
CMSat	cmsat/Gaussian.h	/^namespace CMSat {$/;"	n
GAUSSIAN_H	cmsat/Gaussian.h	23;"	d
Gaussian	cmsat/Gaussian.h	/^    class Gaussian {$/;"	c	namespace:CMSat
badlevel	cmsat/Gaussian.h	/^        uint32_t badlevel;$/;"	m	class:CMSat::Gaussian
called	cmsat/Gaussian.h	/^        uint32_t called; \/\/how many times called the Gauss$/;"	m	class:CMSat::Gaussian
canceling	cmsat/Gaussian.h	/^    inline void Gaussian::canceling(const uint32_t sublevel) {$/;"	f	class:CMSat::Gaussian
changed_rows	cmsat/Gaussian.h	/^        vector<unsigned char> changed_rows; \/\/used to store which rows were deemed propagatable during elimination$/;"	m	class:CMSat::Gaussian
clauses_toclear	cmsat/Gaussian.h	/^        vector<pair<Clause*, uint32_t> > clauses_toclear;$/;"	m	class:CMSat::Gaussian
col_to_var	cmsat/Gaussian.h	/^            vector<Var> col_to_var; \/\/ col_to_var[COL] tells which variable is at a given column in the matrix. Gives unassigned_var if the COL has been zeroed (i.e. the variable assigned)$/;"	m	class:CMSat::Gaussian::matrixset
col_to_var_original	cmsat/Gaussian.h	/^        vector<Var> col_to_var_original; \/\/Matches columns to variables$/;"	m	class:CMSat::Gaussian
config	cmsat/Gaussian.h	/^        const GaussConf& config;$/;"	m	class:CMSat::Gaussian
conflict	cmsat/Gaussian.h	/^            conflict, unit_conflict, propagation, unit_propagation, nothing$/;"	e	enum:CMSat::Gaussian::gaussian_ret
cur_matrixset	cmsat/Gaussian.h	/^        matrixset cur_matrixset; \/\/ The current matrixset, i.e. the one we are working on, or the last one we worked on$/;"	m	class:CMSat::Gaussian
disabled	cmsat/Gaussian.h	/^        bool disabled; \/\/ Gauss is disabled$/;"	m	class:CMSat::Gaussian
first_one_in_row	cmsat/Gaussian.h	/^            vector<uint16_t> first_one_in_row;$/;"	m	class:CMSat::Gaussian::matrixset
gauss_last_level	cmsat/Gaussian.h	/^        int gauss_last_level;$/;"	m	class:CMSat::Gaussian
gaussian_ret	cmsat/Gaussian.h	/^        enum gaussian_ret {$/;"	g	class:CMSat::Gaussian
get_called	cmsat/Gaussian.h	/^    inline uint32_t Gaussian::get_called() const {$/;"	f	class:CMSat::Gaussian
get_disabled	cmsat/Gaussian.h	/^    inline bool Gaussian::get_disabled() const {$/;"	f	class:CMSat::Gaussian
get_unit_truths	cmsat/Gaussian.h	/^    inline uint32_t Gaussian::get_unit_truths() const {$/;"	f	class:CMSat::Gaussian
get_useful_confl	cmsat/Gaussian.h	/^    inline uint32_t Gaussian::get_useful_confl() const {$/;"	f	class:CMSat::Gaussian
get_useful_prop	cmsat/Gaussian.h	/^    inline uint32_t Gaussian::get_useful_prop() const {$/;"	f	class:CMSat::Gaussian
last_one_in_col	cmsat/Gaussian.h	/^            vector<uint16_t> last_one_in_col; \/\/last_one_in_col[COL] tells the last row+1 that has a '1' in that column. Used to reduce the burden of Gauss elim. (it only needs to look until that row)$/;"	m	class:CMSat::Gaussian::matrixset
least_column_changed	cmsat/Gaussian.h	/^            int least_column_changed; \/\/ when updating the matrix, this value contains the smallest column number that has been updated  (Gauss elim. can start from here instead of from column 0)$/;"	m	class:CMSat::Gaussian::matrixset
matrix	cmsat/Gaussian.h	/^            PackedMatrix matrix; \/\/ The matrix, updated to reflect variable assignements$/;"	m	class:CMSat::Gaussian::matrixset
matrix_no	cmsat/Gaussian.h	/^        const uint32_t matrix_no;$/;"	m	class:CMSat::Gaussian
matrix_sets	cmsat/Gaussian.h	/^        vector<matrixset> matrix_sets; \/\/ The matrixsets for depths 'decision_from' + 0,  'decision_from' + only_nth_gaussian_save, 'decision_from' + 2*only_nth_gaussian_save, ... 'decision_from' + 'decision_until'.$/;"	m	class:CMSat::Gaussian
matrixset	cmsat/Gaussian.h	/^        class matrixset {$/;"	c	class:CMSat::Gaussian
messed_matrix_vars_since_reversal	cmsat/Gaussian.h	/^        bool messed_matrix_vars_since_reversal;$/;"	m	class:CMSat::Gaussian
nothing	cmsat/Gaussian.h	/^            conflict, unit_conflict, propagation, unit_propagation, nothing$/;"	e	enum:CMSat::Gaussian::gaussian_ret
num_cols	cmsat/Gaussian.h	/^            uint32_t num_cols; \/\/ number of active columns in the matrix. The columns at the end that have all be zeroed are no longer active$/;"	m	class:CMSat::Gaussian::matrixset
num_rows	cmsat/Gaussian.h	/^            uint16_t num_rows; \/\/ number of active rows in the matrix. Unactive rows are rows that contain only zeros (and if they are conflicting, then the conflict has been treated)$/;"	m	class:CMSat::Gaussian::matrixset
propagatable_rows	cmsat/Gaussian.h	/^        vec<uint32_t> propagatable_rows; \/\/used to store which rows were deemed propagatable during elimination$/;"	m	class:CMSat::Gaussian
propagation	cmsat/Gaussian.h	/^            conflict, unit_conflict, propagation, unit_propagation, nothing$/;"	e	enum:CMSat::Gaussian::gaussian_ret
removeable_cols	cmsat/Gaussian.h	/^            uint32_t removeable_cols; \/\/ the number of columns that have been zeroed out (i.e. assigned)$/;"	m	class:CMSat::Gaussian::matrixset
set_disabled	cmsat/Gaussian.h	/^    inline void Gaussian::set_disabled(const bool toset) {$/;"	f	class:CMSat::Gaussian
should_check_gauss	cmsat/Gaussian.h	/^    inline bool Gaussian::should_check_gauss(const uint32_t decisionlevel) const {$/;"	f	class:CMSat::Gaussian
should_init	cmsat/Gaussian.h	/^    inline bool Gaussian::should_init() const {$/;"	f	class:CMSat::Gaussian
solver	cmsat/Gaussian.h	/^        Solver& solver;$/;"	m	class:CMSat::Gaussian
tmp_clause	cmsat/Gaussian.h	/^        vec<Lit> tmp_clause;$/;"	m	class:CMSat::Gaussian
unit_conflict	cmsat/Gaussian.h	/^            conflict, unit_conflict, propagation, unit_propagation, nothing$/;"	e	enum:CMSat::Gaussian::gaussian_ret
unit_propagation	cmsat/Gaussian.h	/^            conflict, unit_conflict, propagation, unit_propagation, nothing$/;"	e	enum:CMSat::Gaussian::gaussian_ret
unit_truths	cmsat/Gaussian.h	/^        uint32_t unit_truths; \/\/how many unitary (i.e. decisionLevel 0) truths have been found$/;"	m	class:CMSat::Gaussian
useful_confl	cmsat/Gaussian.h	/^        uint32_t useful_confl; \/\/how many times Gauss gave conflict as a result$/;"	m	class:CMSat::Gaussian
useful_prop	cmsat/Gaussian.h	/^        uint32_t useful_prop; \/\/how many times Gauss gave propagation as a result$/;"	m	class:CMSat::Gaussian
var_is_in	cmsat/Gaussian.h	/^        BitArray var_is_in; \/\/variable is part of the the matrix. var_is_in's size is _minimal_ so you should check whether var_is_in.getSize() < var before issuing var_is_in[var]$/;"	m	class:CMSat::Gaussian
var_is_set	cmsat/Gaussian.h	/^            BitArray var_is_set;$/;"	m	class:CMSat::Gaussian::matrixset
xorclauses	cmsat/Gaussian.h	/^        vector<XorClause*> xorclauses;$/;"	m	class:CMSat::Gaussian
CMSat	cmsat/GaussianConfig.h	/^namespace CMSat {$/;"	n
GAUSSIANCONFIG_H	cmsat/GaussianConfig.h	23;"	d
GaussConf	cmsat/GaussianConfig.h	/^        GaussConf() :$/;"	f	class:CMSat::GaussConf
GaussConf	cmsat/GaussianConfig.h	/^    class GaussConf {$/;"	c	namespace:CMSat
decision_until	cmsat/GaussianConfig.h	/^        uint32_t decision_until; \/\/do Gauss until this level$/;"	m	class:CMSat::GaussConf
dontDisable	cmsat/GaussianConfig.h	/^        bool dontDisable; \/\/If activated, gauss elimination is never disabled$/;"	m	class:CMSat::GaussConf
iterativeReduce	cmsat/GaussianConfig.h	/^        bool iterativeReduce; \/\/Don't minimise matrix work$/;"	m	class:CMSat::GaussConf
maxMatrixRows	cmsat/GaussianConfig.h	/^        uint32_t maxMatrixRows; \/\/The maximum matrix size -- no. of rows$/;"	m	class:CMSat::GaussConf
maxNumMatrixes	cmsat/GaussianConfig.h	/^        uint32_t maxNumMatrixes; \/\/Maximum number of matrixes$/;"	m	class:CMSat::GaussConf
minMatrixRows	cmsat/GaussianConfig.h	/^        uint32_t minMatrixRows; \/\/The minimum matrix size -- no. of rows$/;"	m	class:CMSat::GaussConf
noMatrixFind	cmsat/GaussianConfig.h	/^        bool noMatrixFind; \/\/Put all xor-s into one matrix, don't find matrixes$/;"	m	class:CMSat::GaussConf
only_nth_gauss_save	cmsat/GaussianConfig.h	/^        uint32_t only_nth_gauss_save; \/\/save only every n-th gauss matrix$/;"	m	class:CMSat::GaussConf
orderCols	cmsat/GaussianConfig.h	/^        bool orderCols; \/\/Order columns according to activity$/;"	m	class:CMSat::GaussConf
CMSat	cmsat/Heap.h	/^namespace CMSat {$/;"	n
HEAP_H	cmsat/Heap.h	23;"	d
Heap	cmsat/Heap.h	/^        Heap(const Comp& c) : lt(c) {$/;"	f	class:CMSat::Heap
Heap	cmsat/Heap.h	/^        Heap(const Heap<Comp>& other) : lt(other.lt) {$/;"	f	class:CMSat::Heap
Heap	cmsat/Heap.h	/^    template<class Comp> class Heap {$/;"	c	namespace:CMSat
clear	cmsat/Heap.h	/^        void clear(bool dealloc = false) {$/;"	f	class:CMSat::Heap
decrease	cmsat/Heap.h	/^        void decrease(uint32_t n) {$/;"	f	class:CMSat::Heap
empty	cmsat/Heap.h	/^        bool empty() const {$/;"	f	class:CMSat::Heap
filter	cmsat/Heap.h	/^        void filter(const F& filt) {$/;"	f	class:CMSat::Heap
getmin	cmsat/Heap.h	/^        uint32_t getmin() {$/;"	f	class:CMSat::Heap
heap	cmsat/Heap.h	/^        vec<uint32_t> heap; \/\/ heap of ints$/;"	m	class:CMSat::Heap
heapProperty	cmsat/Heap.h	/^        bool heapProperty() const {$/;"	f	class:CMSat::Heap
heapProperty	cmsat/Heap.h	/^        bool heapProperty(uint32_t i) const {$/;"	f	class:CMSat::Heap
inHeap	cmsat/Heap.h	/^        bool inHeap(uint32_t n) const {$/;"	f	class:CMSat::Heap
increase	cmsat/Heap.h	/^        void increase(uint32_t n) {$/;"	f	class:CMSat::Heap
increase_	cmsat/Heap.h	/^        void increase_(uint32_t n) {$/;"	f	class:CMSat::Heap
indices	cmsat/Heap.h	/^        vec<uint32_t> indices; \/\/ int -> index in heap$/;"	m	class:CMSat::Heap
insert	cmsat/Heap.h	/^        void insert(uint32_t n) {$/;"	f	class:CMSat::Heap
left	cmsat/Heap.h	/^        static inline uint32_t left(uint32_t i) {$/;"	f	class:CMSat::Heap
lt	cmsat/Heap.h	/^        Comp lt;$/;"	m	class:CMSat::Heap
operator =	cmsat/Heap.h	/^        void operator=(const Heap<Comp>& other) {$/;"	f	class:CMSat::Heap
operator []	cmsat/Heap.h	/^        uint32_t operator[](uint32_t index) const {$/;"	f	class:CMSat::Heap
parent	cmsat/Heap.h	/^        static inline uint32_t parent(uint32_t i) {$/;"	f	class:CMSat::Heap
percolateDown	cmsat/Heap.h	/^        inline void percolateDown(uint32_t i) {$/;"	f	class:CMSat::Heap
percolateUp	cmsat/Heap.h	/^        inline void percolateUp(uint32_t i) {$/;"	f	class:CMSat::Heap
removeMin	cmsat/Heap.h	/^        uint32_t removeMin() {$/;"	f	class:CMSat::Heap
right	cmsat/Heap.h	/^        static inline uint32_t right(uint32_t i) {$/;"	f	class:CMSat::Heap
setBounds	cmsat/Heap.h	/^        void setBounds(uint32_t n) {$/;"	f	class:CMSat::Heap
size	cmsat/Heap.h	/^        uint32_t size() const {$/;"	f	class:CMSat::Heap
update	cmsat/Heap.h	/^        void update(uint32_t n) {$/;"	f	class:CMSat::Heap
AddHash	cmsat/Main.cpp	/^bool Main::AddHash(uint32_t numClaus, Solver& solver, vec<Lit> &assumptions, std::mt19937 &randomEngine) {$/;"	f	class:Main
ApproxMC	cmsat/Main.cpp	/^SATCount Main::ApproxMC(Solver &solver, vector<FILE *> *resLog, std::mt19937 &randomEngine) {$/;"	f	class:Main
BoundedSAT	cmsat/Main.cpp	/^lbool Main::BoundedSAT(uint32_t maxSolutions, uint32_t minSolutions, Solver &solver, vec<Lit> &assumptions, std::mt19937 &randomEngine, std::map<std::string, uint32_t> &solutionMap, uint32_t *solutionCount) {$/;"	f	class:Main
BoundedSATCount	cmsat/Main.cpp	/^int32_t Main::BoundedSATCount(uint32_t maxSolutions, Solver &solver, vec<Lit> &assumptions) {$/;"	f	class:Main
GenerateRandomBits	cmsat/Main.cpp	/^bool Main::GenerateRandomBits(string &randomBits, uint32_t size, std::mt19937 &randomEngine) {$/;"	f	class:Main
GenerateRandomNum	cmsat/Main.cpp	/^int Main::GenerateRandomNum(int maxRange, std::mt19937 &randomEngine) {$/;"	f	class:Main
Main	cmsat/Main.cpp	/^Main::Main(int _argc, char** _argv) :$/;"	f	class:Main
SIGALARM_handler	cmsat/Main.cpp	/^void SIGALARM_handler(int sig, siginfo_t *si, void *uc) {$/;"	f
SIGINT_handler	cmsat/Main.cpp	/^void SIGINT_handler(int) {$/;"	f
SeedEngine	cmsat/Main.cpp	/^void Main::SeedEngine(std::mt19937 &randomEngine)$/;"	f	class:Main
SolutionsToReturn	cmsat/Main.cpp	/^uint32_t Main::SolutionsToReturn(uint32_t maxSolutions, uint32_t minSolutions, unsigned long currentSolutions) {$/;"	f	class:Main
UniGen	cmsat/Main.cpp	/^uint32_t Main::UniGen(uint32_t samples, Solver &solver,$/;"	f	class:Main
binary	cmsat/Main.cpp	/^std::string binary(int x, uint32_t length) {$/;"	f
correctReturnValue	cmsat/Main.cpp	/^int Main::correctReturnValue(const lbool ret) const {$/;"	f	class:Main
findMean	cmsat/Main.cpp	/^double findMean(std::list<int> numList) {$/;"	f
findMedian	cmsat/Main.cpp	/^double findMedian(std::list<int> numList) {$/;"	f
findMin	cmsat/Main.cpp	/^int findMin(std::list<int> numList) {$/;"	f
finished	cmsat/Main.cpp	/^std::set<uint32_t> finished;$/;"	v
hasPrefix	cmsat/Main.cpp	/^const char* Main::hasPrefix(const char* str, const char* prefix) {$/;"	f	class:Main
main	cmsat/Main.cpp	/^int main(int argc, char** argv) {$/;"	f
mytimer	cmsat/Main.cpp	/^timer_t *mytimer;$/;"	v
need_clean_exit	cmsat/Main.cpp	/^bool need_clean_exit;$/;"	v
openLogFile	cmsat/Main.cpp	/^bool Main::openLogFile(vector<FILE*> *res) {$/;"	f	class:Main
openOutputFile	cmsat/Main.cpp	/^FILE* Main::openOutputFile() {$/;"	f	class:Main
parseCommandLine	cmsat/Main.cpp	/^void Main::parseCommandLine() {$/;"	f	class:Main
parseInAllFiles	cmsat/Main.cpp	/^void Main::parseInAllFiles(Solver& solver) {$/;"	f	class:Main
printResultFunc	cmsat/Main.cpp	/^void Main::printResultFunc(Solver &S, vec<lbool> solutionModel, const lbool ret, FILE* res) {$/;"	f	class:Main
printSolutions	cmsat/Main.cpp	/^bool Main::printSolutions(FILE* res){$/;"	f	class:Main
printUsage	cmsat/Main.cpp	/^void Main::printUsage(char** argv) {$/;"	f	class:Main
printVersionInfo	cmsat/Main.cpp	/^void Main::printVersionInfo(const uint32_t verbosity) {$/;"	f	class:Main
readInAFile	cmsat/Main.cpp	/^void Main::readInAFile(const std::string& filename, Solver& solver) {$/;"	f	class:Main
readInStandardInput	cmsat/Main.cpp	/^void Main::readInStandardInput(Solver& solver) {$/;"	f	class:Main
setDoublePrecision	cmsat/Main.cpp	/^void Main::setDoublePrecision(const uint32_t verbosity) {$/;"	f	class:Main
singleThreadSolve	cmsat/Main.cpp	/^int Main::singleThreadSolve() {$/;"	f	class:Main
singleThreadUniGenCall	cmsat/Main.cpp	/^int Main::singleThreadUniGenCall(uint32_t samples, FILE* res, vector<FILE*> *resLog, uint32_t sampleCounter, std::map<std::string, uint32_t> &solutionMap, std::mt19937 &randomEngine, uint32_t *lastSuccessfulHashOffset, double timeReference) {$/;"	f	class:Main
solversToInterrupt	cmsat/Main.cpp	/^std::map<uint32_t, Solver*> solversToInterrupt;$/;"	v
start_timer	cmsat/Main.cpp	/^void start_timer(int num) {$/;"	f
timerSetFirstTime	cmsat/Main.cpp	/^bool *timerSetFirstTime;$/;"	v
CMSat	cmsat/Main.h	/^namespace CMSat {$/;"	n
MAIN_H	cmsat/Main.h	23;"	d
Main	cmsat/Main.h	/^    class Main {$/;"	c	namespace:CMSat
SATCount	cmsat/Main.h	/^    struct SATCount {$/;"	s	namespace:CMSat
argc	cmsat/Main.h	/^        int argc;$/;"	m	class:CMSat::Main
argv	cmsat/Main.h	/^        char** argv;$/;"	m	class:CMSat::Main
cellSolCount	cmsat/Main.h	/^        uint32_t cellSolCount;$/;"	m	struct:CMSat::SATCount
conf	cmsat/Main.h	/^        SolverConf conf;$/;"	m	class:CMSat::Main
debugLib	cmsat/Main.h	/^        bool debugLib;$/;"	m	class:CMSat::Main
debugNewVar	cmsat/Main.h	/^        bool debugNewVar;$/;"	m	class:CMSat::Main
fileNamePresent	cmsat/Main.h	/^        bool fileNamePresent;$/;"	m	class:CMSat::Main
filesToRead	cmsat/Main.h	/^        std::vector<std::string> filesToRead;$/;"	m	class:CMSat::Main
gaussconfig	cmsat/Main.h	/^        GaussConf gaussconfig;$/;"	m	class:CMSat::Main
globalSolutionMap	cmsat/Main.h	/^        std::map< std::string, std::vector<uint32_t>> globalSolutionMap;$/;"	m	class:CMSat::Main
grouping	cmsat/Main.h	/^        bool grouping;$/;"	m	class:CMSat::Main
hashCount	cmsat/Main.h	/^        uint32_t hashCount;$/;"	m	struct:CMSat::SATCount
max_nr_of_solutions	cmsat/Main.h	/^        uint32_t max_nr_of_solutions;$/;"	m	class:CMSat::Main
numThreads	cmsat/Main.h	/^        int numThreads;$/;"	m	class:CMSat::Main
printResult	cmsat/Main.h	/^        bool printResult;$/;"	m	class:CMSat::Main
sharedData	cmsat/Main.h	/^        SharedData sharedData;$/;"	m	class:CMSat::Main
startTime	cmsat/Main.h	/^        time_t  startTime;$/;"	m	class:CMSat::Main
twoFileNamesPresent	cmsat/Main.h	/^        bool twoFileNamesPresent;$/;"	m	class:CMSat::Main
MatrixFinder	cmsat/MatrixFinder.cpp	/^MatrixFinder::MatrixFinder(Solver& _solver) :$/;"	f	class:MatrixFinder
findMatrixes	cmsat/MatrixFinder.cpp	/^bool MatrixFinder::findMatrixes() {$/;"	f	class:MatrixFinder
findParts	cmsat/MatrixFinder.cpp	/^void MatrixFinder::findParts(vector<Var>& xorFingerprintInMatrix, vector<XorClause*>& xorsInMatrix) {$/;"	f	class:MatrixFinder
fingerprint	cmsat/MatrixFinder.cpp	/^inline Var MatrixFinder::fingerprint(const XorClause& c) const {$/;"	f	class:MatrixFinder
firstPartOfSecond	cmsat/MatrixFinder.cpp	/^inline bool MatrixFinder::firstPartOfSecond(const XorClause& c1, const XorClause& c2) const {$/;"	f	class:MatrixFinder
setMatrixes	cmsat/MatrixFinder.cpp	/^uint32_t MatrixFinder::setMatrixes() {$/;"	f	class:MatrixFinder
CMSat	cmsat/MatrixFinder.h	/^namespace CMSat {$/;"	n
MATRIXFINDER_H	cmsat/MatrixFinder.h	23;"	d
MatrixFinder	cmsat/MatrixFinder.h	/^    class MatrixFinder {$/;"	c	namespace:CMSat
matrix_no	cmsat/MatrixFinder.h	/^        uint32_t matrix_no;$/;"	m	class:CMSat::MatrixFinder
mysorter	cmsat/MatrixFinder.h	/^        struct mysorter {$/;"	s	class:CMSat::MatrixFinder
operator ()	cmsat/MatrixFinder.h	/^            bool operator () (const pair<uint32_t, uint32_t>& left, const pair<uint32_t, uint32_t>& right) {$/;"	f	struct:CMSat::MatrixFinder::mysorter
reverseTable	cmsat/MatrixFinder.h	/^        map<uint32_t, vector<Var> > reverseTable; \/\/matrix -> vars$/;"	m	class:CMSat::MatrixFinder
solver	cmsat/MatrixFinder.h	/^        Solver& solver;$/;"	m	class:CMSat::MatrixFinder
table	cmsat/MatrixFinder.h	/^        vector<Var> table; \/\/var -> matrix$/;"	m	class:CMSat::MatrixFinder
M	cmsat/MersenneTwister.h	/^        M = 397$/;"	e	enum:MTRand::__anon2
MERSENNETWISTER_H	cmsat/MersenneTwister.h	58;"	d
MTRand	cmsat/MersenneTwister.h	/^class MTRand {$/;"	c
MTRand	cmsat/MersenneTwister.h	/^inline MTRand::MTRand() {$/;"	f	class:MTRand
MTRand	cmsat/MersenneTwister.h	/^inline MTRand::MTRand(const uint32& oneSeed) {$/;"	f	class:MTRand
MTRand	cmsat/MersenneTwister.h	/^inline MTRand::MTRand(uint32 * const bigSeed, const uint32 seedLength) {$/;"	f	class:MTRand
N	cmsat/MersenneTwister.h	/^    static const int N = 624; \/\/ length of state vector$/;"	m	class:MTRand
SAVE	cmsat/MersenneTwister.h	/^    static const int SAVE = N + 1; \/\/ length of array for save()$/;"	m	class:MTRand
hash	cmsat/MersenneTwister.h	/^inline MTRand::uint32 MTRand::hash(time_t t, clock_t c) {$/;"	f	class:MTRand
hiBit	cmsat/MersenneTwister.h	/^    uint32 hiBit(const uint32& u) const {$/;"	f	class:MTRand
initialize	cmsat/MersenneTwister.h	/^inline void MTRand::initialize(const uint32 seed) {$/;"	f	class:MTRand
left	cmsat/MersenneTwister.h	/^    int left; \/\/ number of values left before reload needed$/;"	m	class:MTRand
loBit	cmsat/MersenneTwister.h	/^    uint32 loBit(const uint32& u) const {$/;"	f	class:MTRand
loBits	cmsat/MersenneTwister.h	/^    uint32 loBits(const uint32& u) const {$/;"	f	class:MTRand
load	cmsat/MersenneTwister.h	/^inline void MTRand::load(uint32 * const loadArray) {$/;"	f	class:MTRand
mixBits	cmsat/MersenneTwister.h	/^    uint32 mixBits(const uint32& u, const uint32& v) const {$/;"	f	class:MTRand
operator ()	cmsat/MersenneTwister.h	/^    double operator()() {$/;"	f	class:MTRand
operator <<	cmsat/MersenneTwister.h	/^inline std::ostream& operator<<(std::ostream& os, const MTRand& mtrand) {$/;"	f
operator >>	cmsat/MersenneTwister.h	/^inline std::istream& operator>>(std::istream& is, MTRand& mtrand) {$/;"	f
pNext	cmsat/MersenneTwister.h	/^    uint32 *pNext; \/\/ next value to get from state$/;"	m	class:MTRand
rand	cmsat/MersenneTwister.h	/^inline double MTRand::rand() {$/;"	f	class:MTRand
rand	cmsat/MersenneTwister.h	/^inline double MTRand::rand(const double& n) {$/;"	f	class:MTRand
rand53	cmsat/MersenneTwister.h	/^inline double MTRand::rand53() {$/;"	f	class:MTRand
randDblExc	cmsat/MersenneTwister.h	/^inline double MTRand::randDblExc() {$/;"	f	class:MTRand
randDblExc	cmsat/MersenneTwister.h	/^inline double MTRand::randDblExc(const double& n) {$/;"	f	class:MTRand
randExc	cmsat/MersenneTwister.h	/^inline double MTRand::randExc() {$/;"	f	class:MTRand
randExc	cmsat/MersenneTwister.h	/^inline double MTRand::randExc(const double& n) {$/;"	f	class:MTRand
randInt	cmsat/MersenneTwister.h	/^inline MTRand::uint32 MTRand::randInt() {$/;"	f	class:MTRand
randInt	cmsat/MersenneTwister.h	/^inline MTRand::uint32 MTRand::randInt(const uint32& n) {$/;"	f	class:MTRand
randNorm	cmsat/MersenneTwister.h	/^inline double MTRand::randNorm(const double& mean, const double& variance) {$/;"	f	class:MTRand
reload	cmsat/MersenneTwister.h	/^inline void MTRand::reload() {$/;"	f	class:MTRand
save	cmsat/MersenneTwister.h	/^inline void MTRand::save(uint32* saveArray) const {$/;"	f	class:MTRand
seed	cmsat/MersenneTwister.h	/^inline void MTRand::seed() {$/;"	f	class:MTRand
seed	cmsat/MersenneTwister.h	/^inline void MTRand::seed(const uint32 oneSeed) {$/;"	f	class:MTRand
seed	cmsat/MersenneTwister.h	/^inline void MTRand::seed(uint32 * const bigSeed, const uint32 seedLength) {$/;"	f	class:MTRand
state	cmsat/MersenneTwister.h	/^    uint32 state[N]; \/\/ internal state$/;"	m	class:MTRand
twist	cmsat/MersenneTwister.h	/^    uint32 twist(const uint32& m, const uint32& s0, const uint32& s1) const {$/;"	f	class:MTRand
uint32	cmsat/MersenneTwister.h	/^    typedef unsigned long uint32; \/\/ unsigned integer type, at least 32 bits$/;"	t	class:MTRand
OnlyNonLearntBins	cmsat/OnlyNonLearntBins.cpp	/^OnlyNonLearntBins::OnlyNonLearntBins(Solver& _solver) :$/;"	f	class:OnlyNonLearntBins
fill	cmsat/OnlyNonLearntBins.cpp	/^bool OnlyNonLearntBins::fill() {$/;"	f	class:OnlyNonLearntBins
propagate	cmsat/OnlyNonLearntBins.cpp	/^bool OnlyNonLearntBins::propagate() {$/;"	f	class:OnlyNonLearntBins
CMSat	cmsat/OnlyNonLearntBins.h	/^namespace CMSat {$/;"	n
ONLYNONLEARNTBINS_H	cmsat/OnlyNonLearntBins.h	23;"	d
OnlyNonLearntBins	cmsat/OnlyNonLearntBins.h	/^    class OnlyNonLearntBins {$/;"	c	namespace:CMSat
WatchedBin	cmsat/OnlyNonLearntBins.h	/^            WatchedBin(Lit _impliedLit) : impliedLit(_impliedLit) {$/;"	f	class:CMSat::OnlyNonLearntBins::WatchedBin
WatchedBin	cmsat/OnlyNonLearntBins.h	/^        class WatchedBin {$/;"	c	class:CMSat::OnlyNonLearntBins
binwatches	cmsat/OnlyNonLearntBins.h	/^        vec<vec<WatchedBin> > binwatches; \/\/\/<Internal wathclists for non-learnt binary clauses$/;"	m	class:CMSat::OnlyNonLearntBins
getBinWatches	cmsat/OnlyNonLearntBins.h	/^    inline const vec<vec<OnlyNonLearntBins::WatchedBin> >& OnlyNonLearntBins::getBinWatches() const {$/;"	f	class:CMSat::OnlyNonLearntBins
getWatchSize	cmsat/OnlyNonLearntBins.h	/^    inline uint32_t OnlyNonLearntBins::getWatchSize(const Lit lit) const {$/;"	f	class:CMSat::OnlyNonLearntBins
impliedLit	cmsat/OnlyNonLearntBins.h	/^            Lit impliedLit;$/;"	m	class:CMSat::OnlyNonLearntBins::WatchedBin
solver	cmsat/OnlyNonLearntBins.h	/^        Solver& solver;$/;"	m	class:CMSat::OnlyNonLearntBins
CMSat	cmsat/PackedMatrix.h	/^namespace CMSat {$/;"	n
PACKEDMATRIX_H	cmsat/PackedMatrix.h	23;"	d
PackedMatrix	cmsat/PackedMatrix.h	/^        PackedMatrix() :$/;"	f	class:CMSat::PackedMatrix
PackedMatrix	cmsat/PackedMatrix.h	/^        PackedMatrix(const PackedMatrix& b) :$/;"	f	class:CMSat::PackedMatrix
PackedMatrix	cmsat/PackedMatrix.h	/^    class PackedMatrix {$/;"	c	namespace:CMSat
beginMatrix	cmsat/PackedMatrix.h	/^        inline iterator beginMatrix() {$/;"	f	class:CMSat::PackedMatrix
beginVarset	cmsat/PackedMatrix.h	/^        inline iterator beginVarset() {$/;"	f	class:CMSat::PackedMatrix
endMatrix	cmsat/PackedMatrix.h	/^        inline iterator endMatrix() {$/;"	f	class:CMSat::PackedMatrix
endVarset	cmsat/PackedMatrix.h	/^        inline iterator endVarset() {$/;"	f	class:CMSat::PackedMatrix
getMatrixAt	cmsat/PackedMatrix.h	/^        inline PackedRow getMatrixAt(const uint32_t i) const {$/;"	f	class:CMSat::PackedMatrix
getMatrixAt	cmsat/PackedMatrix.h	/^        inline PackedRow getMatrixAt(const uint32_t i) {$/;"	f	class:CMSat::PackedMatrix
getSize	cmsat/PackedMatrix.h	/^        inline uint32_t getSize() const {$/;"	f	class:CMSat::PackedMatrix
getVarsetAt	cmsat/PackedMatrix.h	/^        inline PackedRow getVarsetAt(const uint32_t i) const {$/;"	f	class:CMSat::PackedMatrix
getVarsetAt	cmsat/PackedMatrix.h	/^        inline PackedRow getVarsetAt(const uint32_t i) {$/;"	f	class:CMSat::PackedMatrix
iterator	cmsat/PackedMatrix.h	/^            iterator(uint64_t* _mp, const uint32_t _numCols) :$/;"	f	class:CMSat::PackedMatrix::iterator
iterator	cmsat/PackedMatrix.h	/^        class iterator {$/;"	c	class:CMSat::PackedMatrix
mp	cmsat/PackedMatrix.h	/^            uint64_t* mp;$/;"	m	class:CMSat::PackedMatrix::iterator
mp	cmsat/PackedMatrix.h	/^        uint64_t* mp;$/;"	m	class:CMSat::PackedMatrix
numCols	cmsat/PackedMatrix.h	/^            const uint32_t numCols;$/;"	m	class:CMSat::PackedMatrix::iterator
numCols	cmsat/PackedMatrix.h	/^        uint32_t numCols;$/;"	m	class:CMSat::PackedMatrix
numRows	cmsat/PackedMatrix.h	/^        uint32_t numRows;$/;"	m	class:CMSat::PackedMatrix
operator !=	cmsat/PackedMatrix.h	/^            bool operator!=(const iterator& it) const {$/;"	f	class:CMSat::PackedMatrix::iterator
operator *	cmsat/PackedMatrix.h	/^            PackedRow operator*() {$/;"	f	class:CMSat::PackedMatrix::iterator
operator +	cmsat/PackedMatrix.h	/^            iterator operator+(const uint32_t num) const {$/;"	f	class:CMSat::PackedMatrix::iterator
operator ++	cmsat/PackedMatrix.h	/^            iterator& operator++() {$/;"	f	class:CMSat::PackedMatrix::iterator
operator +=	cmsat/PackedMatrix.h	/^            void operator+=(const uint32_t num) {$/;"	f	class:CMSat::PackedMatrix::iterator
operator -	cmsat/PackedMatrix.h	/^            uint32_t operator-(const iterator& b) const {$/;"	f	class:CMSat::PackedMatrix::iterator
operator =	cmsat/PackedMatrix.h	/^        PackedMatrix& operator=(const PackedMatrix& b) {$/;"	f	class:CMSat::PackedMatrix
operator ==	cmsat/PackedMatrix.h	/^            bool operator==(const iterator& it) const {$/;"	f	class:CMSat::PackedMatrix::iterator
resize	cmsat/PackedMatrix.h	/^        void resize(const uint32_t num_rows, uint32_t num_cols) {$/;"	f	class:CMSat::PackedMatrix
resizeNumRows	cmsat/PackedMatrix.h	/^        void resizeNumRows(const uint32_t num_rows) {$/;"	f	class:CMSat::PackedMatrix
~PackedMatrix	cmsat/PackedMatrix.h	/^        ~PackedMatrix() {$/;"	f	class:CMSat::PackedMatrix
fill	cmsat/PackedRow.cpp	/^bool PackedRow::fill(vec<Lit>& tmp_clause, const vec<lbool>& assigns, const vector<Var>& col_to_var_original) const {$/;"	f	class:PackedRow
operator !=	cmsat/PackedRow.cpp	/^bool PackedRow::operator != (const PackedRow& b) const {$/;"	f	class:PackedRow
operator ==	cmsat/PackedRow.cpp	/^bool PackedRow::operator == (const PackedRow& b) const {$/;"	f	class:PackedRow
popcnt	cmsat/PackedRow.cpp	/^uint32_t PackedRow::popcnt() const {$/;"	f	class:PackedRow
popcnt	cmsat/PackedRow.cpp	/^uint32_t PackedRow::popcnt(const uint32_t from) const {$/;"	f	class:PackedRow
CMSat	cmsat/PackedRow.h	/^namespace CMSat {$/;"	n
PACKEDROW_H	cmsat/PackedRow.h	23;"	d
PackedRow	cmsat/PackedRow.h	/^        PackedRow(const uint32_t _size, uint64_t * const _mp) :$/;"	f	class:CMSat::PackedRow
PackedRow	cmsat/PackedRow.h	/^    class PackedRow {$/;"	c	namespace:CMSat
clearBit	cmsat/PackedRow.h	/^        inline void clearBit(const uint32_t i) {$/;"	f	class:CMSat::PackedRow
invert_is_true	cmsat/PackedRow.h	/^        inline void invert_is_true(const bool b = true) {$/;"	f	class:CMSat::PackedRow
isZero	cmsat/PackedRow.h	/^        inline bool isZero() const {$/;"	f	class:CMSat::PackedRow
is_true	cmsat/PackedRow.h	/^        inline const uint64_t& is_true() const {$/;"	f	class:CMSat::PackedRow
is_true_internal	cmsat/PackedRow.h	/^        uint64_t& is_true_internal;$/;"	m	class:CMSat::PackedRow
mp	cmsat/PackedRow.h	/^        uint64_t* __restrict const mp;$/;"	m	class:CMSat::PackedRow
operator <<	cmsat/PackedRow.h	/^    inline std::ostream& operator <<(std::ostream& os, const PackedRow& m) {$/;"	f	namespace:CMSat
operator =	cmsat/PackedRow.h	/^        PackedRow& operator=(const PackedRow& b) {$/;"	f	class:CMSat::PackedRow
operator []	cmsat/PackedRow.h	/^        inline bool operator[](const uint32_t& i) const {$/;"	f	class:CMSat::PackedRow
operator ^=	cmsat/PackedRow.h	/^        PackedRow& operator^=(const PackedRow& b) {$/;"	f	class:CMSat::PackedRow
popcnt_is_one	cmsat/PackedRow.h	/^        bool popcnt_is_one() const {$/;"	f	class:CMSat::PackedRow
popcnt_is_one	cmsat/PackedRow.h	/^        bool popcnt_is_one(uint32_t from) const {$/;"	f	class:CMSat::PackedRow
scan	cmsat/PackedRow.h	/^        inline unsigned long int scan(const unsigned long int var) const {$/;"	f	class:CMSat::PackedRow
set	cmsat/PackedRow.h	/^        void set(const T& v, const vector<uint16_t>& var_to_col, const uint32_t matrix_size) {$/;"	f	class:CMSat::PackedRow
setBit	cmsat/PackedRow.h	/^        inline void setBit(const uint32_t i) {$/;"	f	class:CMSat::PackedRow
setZero	cmsat/PackedRow.h	/^        inline void setZero() {$/;"	f	class:CMSat::PackedRow
size	cmsat/PackedRow.h	/^        const uint32_t size;$/;"	m	class:CMSat::PackedRow
swapBoth	cmsat/PackedRow.h	/^        void swapBoth(PackedRow b) {$/;"	f	class:CMSat::PackedRow
xorBoth	cmsat/PackedRow.h	/^        void xorBoth(const PackedRow& b) {$/;"	f	class:CMSat::PackedRow
CMSat	cmsat/PropBy.h	/^namespace CMSat {$/;"	n
PROPBY_H	cmsat/PropBy.h	23;"	d
PropBy	cmsat/PropBy.h	/^        PropBy() :$/;"	f	class:CMSat::PropBy
PropBy	cmsat/PropBy.h	/^        PropBy(ClauseOffset offset) :$/;"	f	class:CMSat::PropBy
PropBy	cmsat/PropBy.h	/^        PropBy(const Lit lit) :$/;"	f	class:CMSat::PropBy
PropBy	cmsat/PropBy.h	/^        PropBy(const Lit lit1, const Lit lit2) :$/;"	f	class:CMSat::PropBy
PropBy	cmsat/PropBy.h	/^    class PropBy {$/;"	c	namespace:CMSat
PropByFull	cmsat/PropBy.h	/^        PropByFull() :$/;"	f	class:CMSat::PropByFull
PropByFull	cmsat/PropBy.h	/^        PropByFull(PropBy orig, Lit otherLit, ClauseAllocator& alloc) :$/;"	f	class:CMSat::PropByFull
PropByFull	cmsat/PropBy.h	/^        PropByFull(const PropByFull& other) :$/;"	f	class:CMSat::PropByFull
PropByFull	cmsat/PropBy.h	/^    class PropByFull {$/;"	c	namespace:CMSat
clause	cmsat/PropBy.h	/^        Clause* clause;$/;"	m	class:CMSat::PropByFull
getClause	cmsat/PropBy.h	/^        Clause* getClause() {$/;"	f	class:CMSat::PropByFull
getClause	cmsat/PropBy.h	/^        ClauseOffset getClause() const {$/;"	f	class:CMSat::PropBy
getClause	cmsat/PropBy.h	/^        ClauseOffset getClause() {$/;"	f	class:CMSat::PropBy
getClause	cmsat/PropBy.h	/^        const Clause* getClause() const {$/;"	f	class:CMSat::PropByFull
getOtherLit	cmsat/PropBy.h	/^        Lit getOtherLit() const {$/;"	f	class:CMSat::PropBy
getOtherLit2	cmsat/PropBy.h	/^        Lit getOtherLit2() const {$/;"	f	class:CMSat::PropBy
isBinary	cmsat/PropBy.h	/^        bool isBinary() const {$/;"	f	class:CMSat::PropBy
isBinary	cmsat/PropBy.h	/^        bool isBinary() const {$/;"	f	class:CMSat::PropByFull
isClause	cmsat/PropBy.h	/^        bool isClause() const {$/;"	f	class:CMSat::PropBy
isClause	cmsat/PropBy.h	/^        bool isClause() const {$/;"	f	class:CMSat::PropByFull
isNULL	cmsat/PropBy.h	/^        bool isNULL() const {$/;"	f	class:CMSat::PropBy
isNULL	cmsat/PropBy.h	/^        bool isNULL() const {$/;"	f	class:CMSat::PropByFull
isTri	cmsat/PropBy.h	/^        bool isTri() const {$/;"	f	class:CMSat::PropBy
isTri	cmsat/PropBy.h	/^        bool isTri() const {$/;"	f	class:CMSat::PropByFull
lits	cmsat/PropBy.h	/^        Lit lits[3];$/;"	m	class:CMSat::PropByFull
operator <<	cmsat/PropBy.h	/^    inline std::ostream& operator<<(std::ostream& cout, const PropByFull& propByFull) {$/;"	f	namespace:CMSat
operator <<	cmsat/PropBy.h	/^    inline std::ostream& operator<<(std::ostream& os, const PropBy& pb) {$/;"	f	namespace:CMSat
operator []	cmsat/PropBy.h	/^        Lit operator[](const uint32_t i) const {$/;"	f	class:CMSat::PropByFull
size	cmsat/PropBy.h	/^        uint32_t size() const {$/;"	f	class:CMSat::PropByFull
type	cmsat/PropBy.h	/^        uint32_t type;$/;"	m	class:CMSat::PropByFull
RestartTypeChooser	cmsat/RestartTypeChooser.cpp	/^RestartTypeChooser::RestartTypeChooser(const Solver& s) :$/;"	f	class:RestartTypeChooser
addDegrees	cmsat/RestartTypeChooser.cpp	/^void RestartTypeChooser::addDegrees(const vec<T*>& cs, vector<uint32_t>& degrees) const {$/;"	f	class:RestartTypeChooser
addDegreesBin	cmsat/RestartTypeChooser.cpp	/^void RestartTypeChooser::addDegreesBin(vector<uint32_t>& degrees) const {$/;"	f	class:RestartTypeChooser
addInfo	cmsat/RestartTypeChooser.cpp	/^void RestartTypeChooser::addInfo() {$/;"	f	class:RestartTypeChooser
avg	cmsat/RestartTypeChooser.cpp	/^double RestartTypeChooser::avg() const {$/;"	f	class:RestartTypeChooser
calcHeap	cmsat/RestartTypeChooser.cpp	/^void RestartTypeChooser::calcHeap() {$/;"	f	class:RestartTypeChooser
choose	cmsat/RestartTypeChooser.cpp	/^RestartType RestartTypeChooser::choose() {$/;"	f	class:RestartTypeChooser
countVarsDegreeStDev	cmsat/RestartTypeChooser.cpp	/^std::pair<double, double> RestartTypeChooser::countVarsDegreeStDev() const {$/;"	f	class:RestartTypeChooser
stdDeviation	cmsat/RestartTypeChooser.cpp	/^double RestartTypeChooser::stdDeviation(vector<uint32_t>& measure) const {$/;"	f	class:RestartTypeChooser
CMSat	cmsat/RestartTypeChooser.h	/^namespace CMSat {$/;"	n
RESTARTTYPECHOOSER_H	cmsat/RestartTypeChooser.h	23;"	d
RestartTypeChooser	cmsat/RestartTypeChooser.h	/^    class RestartTypeChooser {$/;"	c	namespace:CMSat
firstVars	cmsat/RestartTypeChooser.h	/^        vector<Var> firstVars; \/\/\/<The top x variables (in terms of var activity)$/;"	m	class:CMSat::RestartTypeChooser
firstVarsOld	cmsat/RestartTypeChooser.h	/^        vector<Var> firstVarsOld; \/\/\/<The previous top x variables (in terms of var activity)$/;"	m	class:CMSat::RestartTypeChooser
limit	cmsat/RestartTypeChooser.h	/^        uint32_t limit; \/\/\/<If top x contains on average this many common varables, we select MiniSat-type$/;"	m	class:CMSat::RestartTypeChooser
reset	cmsat/RestartTypeChooser.h	/^    inline void RestartTypeChooser::reset() {$/;"	f	class:CMSat::RestartTypeChooser
sameIns	cmsat/RestartTypeChooser.h	/^        vector<Var> sameIns;$/;"	m	class:CMSat::RestartTypeChooser
solver	cmsat/RestartTypeChooser.h	/^        const Solver& solver;$/;"	m	class:CMSat::RestartTypeChooser
topX	cmsat/RestartTypeChooser.h	/^        uint32_t topX; \/\/\/<The how many is the top X? 100 is default$/;"	m	class:CMSat::RestartTypeChooser
SCCFinder	cmsat/SCCFinder.cpp	/^SCCFinder::SCCFinder(Solver& _solver) :$/;"	f	class:SCCFinder
find2LongXors	cmsat/SCCFinder.cpp	/^bool SCCFinder::find2LongXors() {$/;"	f	class:SCCFinder
tarjan	cmsat/SCCFinder.cpp	/^void SCCFinder::tarjan(const uint32_t vertex) {$/;"	f	class:SCCFinder
CMSat	cmsat/SCCFinder.h	/^namespace CMSat {$/;"	n
SCCFINDER_H	cmsat/SCCFinder.h	23;"	d
SCCFinder	cmsat/SCCFinder.h	/^    class SCCFinder {$/;"	c	namespace:CMSat
doit	cmsat/SCCFinder.h	/^    inline void SCCFinder::doit(const Lit lit, const uint32_t vertex) {$/;"	f	class:CMSat::SCCFinder
getTotalTime	cmsat/SCCFinder.h	/^    inline double SCCFinder::getTotalTime() const {$/;"	f	class:CMSat::SCCFinder
globalIndex	cmsat/SCCFinder.h	/^        uint32_t globalIndex;$/;"	m	class:CMSat::SCCFinder
index	cmsat/SCCFinder.h	/^        vector<uint32_t> index;$/;"	m	class:CMSat::SCCFinder
lowlink	cmsat/SCCFinder.h	/^        vector<uint32_t> lowlink;$/;"	m	class:CMSat::SCCFinder
recurDepth	cmsat/SCCFinder.h	/^        uint32_t recurDepth;$/;"	m	class:CMSat::SCCFinder
replaceTable	cmsat/SCCFinder.h	/^        const vector<Lit>& replaceTable;$/;"	m	class:CMSat::SCCFinder
solver	cmsat/SCCFinder.h	/^        Solver& solver;$/;"	m	class:CMSat::SCCFinder
stack	cmsat/SCCFinder.h	/^        std::stack<uint32_t> stack;$/;"	m	class:CMSat::SCCFinder
stackIndicator	cmsat/SCCFinder.h	/^        vec<char> stackIndicator;$/;"	m	class:CMSat::SCCFinder
tmp	cmsat/SCCFinder.h	/^        vec<uint32_t> tmp;$/;"	m	class:CMSat::SCCFinder
totalTime	cmsat/SCCFinder.h	/^        double totalTime;$/;"	m	class:CMSat::SCCFinder
varElimed1	cmsat/SCCFinder.h	/^        const vec<char>* varElimed1;$/;"	m	class:CMSat::SCCFinder
varElimed2	cmsat/SCCFinder.h	/^        const vec<char>& varElimed2;$/;"	m	class:CMSat::SCCFinder
CMSat	cmsat/SharedData.h	/^namespace CMSat {$/;"	n
SHARED_DATA_H	cmsat/SharedData.h	23;"	d
SharedData	cmsat/SharedData.h	/^    class SharedData {$/;"	c	namespace:CMSat
bins	cmsat/SharedData.h	/^        std::vector<std::vector<Lit> > bins;$/;"	m	class:CMSat::SharedData
value	cmsat/SharedData.h	/^        vec<lbool> value;$/;"	m	class:CMSat::SharedData
LevelSorter	cmsat/Solver.cpp	/^    LevelSorter(const vec<int32_t>& _level) :$/;"	f	struct:LevelSorter
LevelSorter	cmsat/Solver.cpp	/^struct LevelSorter {$/;"	s	file:
Solver	cmsat/Solver.cpp	/^Solver::Solver(const SolverConf& _conf, const GaussConf& _gaussconfig, SharedData* sharedData) :$/;"	f	class:Solver
UNWINDING_DEBUG	cmsat/Solver.cpp	51;"	d	file:
abs64	cmsat/Solver.cpp	/^inline int64_t abs64(int64_t a) {$/;"	f
addAllXorAsNorm	cmsat/Solver.cpp	/^void Solver::addAllXorAsNorm() {$/;"	f	class:Solver
addClause	cmsat/Solver.cpp	/^bool Solver::addClause(T& ps) {$/;"	f	class:Solver
addClauseHelper	cmsat/Solver.cpp	/^template<class T> bool Solver::addClauseHelper(T& ps) throw(std::out_of_range) {$/;"	f	class:Solver
addClauseInt	cmsat/Solver.cpp	/^Clause* Solver::addClauseInt(T& ps$/;"	f	class:Solver
addClauseToMySQL	cmsat/Solver.cpp	/^void Solver::addClauseToMySQL(const vec<Lit>& clause, const bool learnt, const uint32_t glue) {$/;"	f	class:Solver
addIndependentSet	cmsat/Solver.cpp	/^bool Solver::addIndependentSet(T & ps) {$/;"	f	class:Solver
addLearntClause	cmsat/Solver.cpp	/^bool Solver::addLearntClause(T& ps, const uint32_t glue, const float miniSatActivity) {$/;"	f	class:Solver
addXorClause	cmsat/Solver.cpp	/^bool Solver::addXorClause(T& ps, bool xorEqualFalse) throw(std::out_of_range) {$/;"	f	class:Solver
addXorClauseInt	cmsat/Solver.cpp	/^XorClause* Solver::addXorClauseInt(T& ps, bool xorEqualFalse, const bool learnt) throw(std::out_of_range) {$/;"	f	class:Solver
analyze	cmsat/Solver.cpp	/^Clause* Solver::analyze(PropBy conflHalf, vec<Lit>& out_learnt, int& out_btlevel, uint32_t &glue, const bool update) {$/;"	f	class:Solver
analyzeFinal	cmsat/Solver.cpp	/^void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict) {$/;"	f	class:Solver
attachBinClause	cmsat/Solver.cpp	/^void Solver::attachBinClause(const Lit lit1, const Lit lit2, const bool learnt) {$/;"	f	class:Solver
attachClause	cmsat/Solver.cpp	/^void Solver::attachClause(Clause& c) {$/;"	f	class:Solver
attachClause	cmsat/Solver.cpp	/^void Solver::attachClause(XorClause& c) {$/;"	f	class:Solver
calcNBLevels	cmsat/Solver.cpp	/^inline uint32_t Solver::calcNBLevels(const T& ps) {$/;"	f	class:Solver
calcReachability	cmsat/Solver.cpp	/^void Solver::calcReachability() {$/;"	f	class:Solver
calculateDefaultPolarities	cmsat/Solver.cpp	/^void Solver::calculateDefaultPolarities() {$/;"	f	class:Solver
cancelUntil	cmsat/Solver.cpp	/^void Solver::cancelUntil(int level) {$/;"	f	class:Solver
cancelUntilLight	cmsat/Solver.cpp	/^void Solver::cancelUntilLight() {$/;"	f	class:Solver
checkFullRestart	cmsat/Solver.cpp	/^bool Solver::checkFullRestart($/;"	f	class:Solver
chooseRestartType	cmsat/Solver.cpp	/^bool Solver::chooseRestartType(const uint32_t& lastFullRestart) {$/;"	f	class:Solver
cleanCache	cmsat/Solver.cpp	/^void Solver::cleanCache() {$/;"	f	class:Solver
cleanCachePart	cmsat/Solver.cpp	/^void Solver::cleanCachePart(const Lit vertLit) {$/;"	f	class:Solver
clearGaussMatrixes	cmsat/Solver.cpp	/^bool Solver::clearGaussMatrixes() {$/;"	f	class:Solver
defaultPolarity	cmsat/Solver.cpp	/^inline bool Solver::defaultPolarity() {$/;"	f	class:Solver
detachClause	cmsat/Solver.cpp	/^void Solver::detachClause(const Clause& c) {$/;"	f	class:Solver
detachClause	cmsat/Solver.cpp	/^void Solver::detachClause(const XorClause& c) {$/;"	f	class:Solver
detachModifiedClause	cmsat/Solver.cpp	/^void Solver::detachModifiedClause(const Lit lit1, const Lit lit2, const Lit lit3, const uint32_t origSize, const Clause* address) {$/;"	f	class:Solver
detachModifiedClause	cmsat/Solver.cpp	/^void Solver::detachModifiedClause(const Var var1, const Var var2, const uint32_t origSize, const XorClause* address) {$/;"	f	class:Solver
get_all_binary_xors	cmsat/Solver.cpp	/^const vector<pair<Lit, Lit> > Solver::get_all_binary_xors() const {$/;"	f	class:Solver
handleSATSolution	cmsat/Solver.cpp	/^void Solver::handleSATSolution() {$/;"	f	class:Solver
handleUNSATSolution	cmsat/Solver.cpp	/^void Solver::handleUNSATSolution() {$/;"	f	class:Solver
handle_conflict	cmsat/Solver.cpp	/^llbool Solver::handle_conflict(vec<Lit>& learnt_clause, PropBy confl, uint64_t& conflictC, const bool update) {$/;"	f	class:Solver
initMySQLStatements	cmsat/Solver.cpp	/^void Solver::initMySQLStatements() {$/;"	f	class:Solver
initialiseSolver	cmsat/Solver.cpp	/^void Solver::initialiseSolver() {$/;"	f	class:Solver
level	cmsat/Solver.cpp	/^    const vec<int32_t>& level;$/;"	m	struct:LevelSorter	file:
litRedundant	cmsat/Solver.cpp	/^bool Solver::litRedundant(Lit p, uint32_t abstract_levels) {$/;"	f	class:Solver
minimiseLeartFurther	cmsat/Solver.cpp	/^void Solver::minimiseLeartFurther(vec<Lit>& cl, const uint32_t glue) {$/;"	f	class:Solver
newVar	cmsat/Solver.cpp	/^Var Solver::newVar(bool dvar) throw(std::out_of_range) {$/;"	f	class:Solver
new_decision	cmsat/Solver.cpp	/^llbool Solver::new_decision(const uint64_t nof_conflicts, const uint64_t nof_conflicts_fullrestart, const uint64_t conflictC) {$/;"	f	class:Solver
operator ()	cmsat/Solver.cpp	/^    bool operator()(const Lit lit1, const Lit lit2) const {$/;"	f	struct:LevelSorter
operator ()	cmsat/Solver.cpp	/^bool reduceDB_ltGlucose::operator() (const Clause* x, const Clause* y) {$/;"	f	class:reduceDB_ltGlucose
operator ()	cmsat/Solver.cpp	/^bool reduceDB_ltMiniSat::operator() (const Clause* x, const Clause* y) {$/;"	f	class:reduceDB_ltMiniSat
performStepsBeforeSolve	cmsat/Solver.cpp	/^void Solver::performStepsBeforeSolve() {$/;"	f	class:Solver
pickBranchLit	cmsat/Solver.cpp	/^Lit Solver::pickBranchLit() {$/;"	f	class:Solver
propBinaryClause	cmsat/Solver.cpp	/^inline bool Solver::propBinaryClause(vec<Watched>::iterator &i, const Lit p, PropBy& confl) {$/;"	f	class:Solver
propNormalClause	cmsat/Solver.cpp	/^inline bool Solver::propNormalClause(vec<Watched>::iterator &i, vec<Watched>::iterator &j, const Lit p, PropBy& confl, const bool update) {$/;"	f	class:Solver
propTriClause	cmsat/Solver.cpp	/^inline bool Solver::propTriClause(vec<Watched>::iterator &i, const Lit p, PropBy& confl) {$/;"	f	class:Solver
propXorClause	cmsat/Solver.cpp	/^inline bool Solver::propXorClause(vec<Watched>::iterator &i, vec<Watched>::iterator &j, const Lit p, PropBy& confl) {$/;"	f	class:Solver
propagate	cmsat/Solver.cpp	/^PropBy Solver::propagate(const bool update) {$/;"	f	class:Solver
propagateBin	cmsat/Solver.cpp	/^PropBy Solver::propagateBin(vec<Lit>& uselessBin) {$/;"	f	class:Solver
propagateBinExcept	cmsat/Solver.cpp	/^bool Solver::propagateBinExcept(const Lit exceptLit) {$/;"	f	class:Solver
propagateBinOneLevel	cmsat/Solver.cpp	/^bool Solver::propagateBinOneLevel() {$/;"	f	class:Solver
propagateNonLearntBin	cmsat/Solver.cpp	/^PropBy Solver::propagateNonLearntBin() {$/;"	f	class:Solver
reduceDB	cmsat/Solver.cpp	/^void Solver::reduceDB() {$/;"	f	class:Solver
resetPolaritiesToRand	cmsat/Solver.cpp	/^void Solver::resetPolaritiesToRand() {$/;"	f	class:Solver
saveOTFData	cmsat/Solver.cpp	/^void Solver::saveOTFData() {$/;"	f	class:Solver
search	cmsat/Solver.cpp	/^lbool Solver::search($/;"	f	class:Solver
setDefaultRestartType	cmsat/Solver.cpp	/^inline void Solver::setDefaultRestartType() {$/;"	f	class:Solver
simplify	cmsat/Solver.cpp	/^bool Solver::simplify() {$/;"	f	class:Solver
simplifyProblem	cmsat/Solver.cpp	/^lbool Solver::simplifyProblem(const uint32_t numConfls) {$/;"	f	class:Solver
solve	cmsat/Solver.cpp	/^lbool Solver::solve(const vec<Lit>& assumps) {$/;"	f	class:Solver
subset	cmsat/Solver.cpp	/^bool subset(const T1& A, const T2& B, vector<char>& seen) {$/;"	f
tallyVotes	cmsat/Solver.cpp	/^void Solver::tallyVotes(const vec<Clause*>& cs, vec<double>& votes) const {$/;"	f	class:Solver
tallyVotes	cmsat/Solver.cpp	/^void Solver::tallyVotes(const vec<XorClause*>& cs, vec<double>& votes) const {$/;"	f	class:Solver
tallyVotesBin	cmsat/Solver.cpp	/^void Solver::tallyVotesBin(vec<double>& votes) const {$/;"	f	class:Solver
transMinimAndUpdateCache	cmsat/Solver.cpp	/^void Solver::transMinimAndUpdateCache(const Lit lit, uint32_t& moreRecurProp) {$/;"	f	class:Solver
~Solver	cmsat/Solver.cpp	/^Solver::~Solver() {$/;"	f	class:Solver
CMSat	cmsat/Solver.h	/^namespace CMSat {$/;"	n
DEBUG_UNCHECKEDENQUEUE_LEVEL0	cmsat/Solver.h	86;"	d
InsertStatementClause	cmsat/Solver.h	/^        struct InsertStatementClause {$/;"	s	class:CMSat::Solver
InsertStatementLits	cmsat/Solver.h	/^        struct InsertStatementLits {$/;"	s	class:CMSat::Solver
LitReachData	cmsat/Solver.h	/^            LitReachData() :$/;"	f	class:CMSat::Solver::LitReachData
LitReachData	cmsat/Solver.h	/^        class LitReachData {$/;"	c	class:CMSat::Solver
PolaritySorter	cmsat/Solver.h	/^        PolaritySorter(vector<char>& polarity) :$/;"	f	struct:CMSat::PolaritySorter
PolaritySorter	cmsat/Solver.h	/^    struct PolaritySorter {$/;"	s	namespace:CMSat
RetClause	cmsat/Solver.h	/^        RetClause(bool isXOR, bool rhs, const vector<Lit>& _lits) :$/;"	f	struct:CMSat::RetClause
RetClause	cmsat/Solver.h	/^        RetClause(const vector<Lit>& _lits) :$/;"	f	struct:CMSat::RetClause
RetClause	cmsat/Solver.h	/^    struct RetClause {$/;"	s	namespace:CMSat
SOLVER_H	cmsat/Solver.h	23;"	d
STMT	cmsat/Solver.h	/^            MYSQL_STMT *STMT;$/;"	m	struct:CMSat::Solver::InsertStatementClause
STMT	cmsat/Solver.h	/^            MYSQL_STMT *STMT;$/;"	m	struct:CMSat::Solver::InsertStatementLits
Solver	cmsat/Solver.h	/^    class Solver {$/;"	c	namespace:CMSat
TransCache	cmsat/Solver.h	/^            TransCache() :$/;"	f	class:CMSat::Solver::TransCache
TransCache	cmsat/Solver.h	/^        class TransCache {$/;"	c	class:CMSat::Solver
VarFilter	cmsat/Solver.h	/^            VarFilter(const Solver& _s) : s(_s) {$/;"	f	struct:CMSat::Solver::VarFilter
VarFilter	cmsat/Solver.h	/^        struct VarFilter {$/;"	s	class:CMSat::Solver
VarOrderLt	cmsat/Solver.h	/^            VarOrderLt(const vec<uint32_t>& act) : activity(act) {$/;"	f	struct:CMSat::Solver::VarOrderLt
VarOrderLt	cmsat/Solver.h	/^        struct VarOrderLt {$/;"	s	class:CMSat::Solver
abstractLevel	cmsat/Solver.h	/^    inline uint32_t Solver::abstractLevel(const Var x) const {$/;"	f	class:CMSat::Solver
activity	cmsat/Solver.h	/^            const vec<uint32_t>& activity;$/;"	m	struct:CMSat::Solver::VarOrderLt
activity	cmsat/Solver.h	/^        vec<uint32_t> activity; \/\/\/< A heuristic measurement of the activity of a variable.$/;"	m	class:CMSat::Solver
addBranchingVariable	cmsat/Solver.h	/^    inline void Solver::addBranchingVariable(Var v) {$/;"	f	class:CMSat::Solver
allAddedToSeen2	cmsat/Solver.h	/^        vec<Lit> allAddedToSeen2; \/\/\/<To reduce temoprary data creation overhead. Used in minimiseLeartFurther()$/;"	m	class:CMSat::Solver
analyze_stack	cmsat/Solver.h	/^        vec<Lit> analyze_stack;$/;"	m	class:CMSat::Solver
analyze_toclear	cmsat/Solver.h	/^        vec<Lit> analyze_toclear;$/;"	m	class:CMSat::Solver
assigns	cmsat/Solver.h	/^        vec<lbool> assigns; \/\/\/< The current assignments$/;"	m	class:CMSat::Solver
assumptions	cmsat/Solver.h	/^        vec<Lit> assumptions; \/\/\/< Current set of assumptions provided to solve by the user.$/;"	m	class:CMSat::Solver
autoInc	cmsat/Solver.h	/^            int autoInc;$/;"	m	struct:CMSat::Solver::InsertStatementLits
avgBranchDepth	cmsat/Solver.h	/^        bqueue<uint32_t> avgBranchDepth; \/\/\/< Avg branch depth. We collect this, and use it to do random look-around in the searchspace during simplifyProblem()$/;"	m	class:CMSat::Solver
binPropData	cmsat/Solver.h	/^        vec<BinPropData> binPropData;$/;"	m	class:CMSat::Solver
bind	cmsat/Solver.h	/^            MYSQL_BIND bind[3];$/;"	m	struct:CMSat::Solver::InsertStatementLits
bind	cmsat/Solver.h	/^            MYSQL_BIND bind[7];$/;"	m	struct:CMSat::Solver::InsertStatementClause
branching_variables	cmsat/Solver.h	/^        vector<Var> branching_variables;$/;"	m	class:CMSat::Solver
claBumpActivity	cmsat/Solver.h	/^    inline void Solver::claBumpActivity(Clause& c) {$/;"	f	class:CMSat::Solver
claDecayActivity	cmsat/Solver.h	/^    inline void Solver::claDecayActivity() {$/;"	f	class:CMSat::Solver
cla_inc	cmsat/Solver.h	/^        float cla_inc; \/\/\/< Amount to bump learnt clause oldActivity with$/;"	m	class:CMSat::Solver
clauseAllocator	cmsat/Solver.h	/^        ClauseAllocator clauseAllocator; \/\/\/< Handles memory allocation for claues$/;"	m	class:CMSat::Solver
clauseCleaner	cmsat/Solver.h	/^        ClauseCleaner* clauseCleaner;$/;"	m	class:CMSat::Solver
clauseVivifier	cmsat/Solver.h	/^        ClauseVivifier* clauseVivifier;$/;"	m	class:CMSat::Solver
clauses	cmsat/Solver.h	/^        vec<Clause*> clauses; \/\/\/< List of problem clauses that are normally larger than 2. Sometimes, due to on-the-fly self-subsuming resoulution, clauses here become 2-long. They are never purposfully put here such that they are long$/;"	m	class:CMSat::Solver
clauses_literals	cmsat/Solver.h	/^        uint64_t clauses_literals, learnts_literals, max_literals, tot_literals;$/;"	m	class:CMSat::Solver
conf	cmsat/Solver.h	/^        SolverConf conf;$/;"	m	class:CMSat::Solver
conflSizeHist	cmsat/Solver.h	/^        bqueue<uint32_t> conflSizeHist;$/;"	m	class:CMSat::Solver
conflict	cmsat/Solver.h	/^        vec<Lit> conflict; \/\/\/<If problem is unsatisfiable (possibly under assumptions), this vector represent the final conflict clause expressed in the assumptions.$/;"	m	class:CMSat::Solver
conflictLastUpdated	cmsat/Solver.h	/^            uint64_t conflictLastUpdated;$/;"	m	class:CMSat::Solver::TransCache
conflicts	cmsat/Solver.h	/^        uint64_t conflicts; \/\/\/<Num conflicts$/;"	m	class:CMSat::Solver
conglomerate	cmsat/Solver.h	/^        Conglomerate* conglomerate;$/;"	m	class:CMSat::Solver
dataSync	cmsat/Solver.h	/^        DataSync* dataSync;$/;"	m	class:CMSat::Solver
decLevel	cmsat/Solver.h	/^            int decLevel;$/;"	m	struct:CMSat::Solver::InsertStatementClause
decisionLevel	cmsat/Solver.h	/^    inline uint32_t Solver::decisionLevel() const {$/;"	f	class:CMSat::Solver
decision_var	cmsat/Solver.h	/^        vector<char> decision_var; \/\/\/< Declares if a variable is eligible for selection in the decision heuristic.$/;"	m	class:CMSat::Solver
decisions	cmsat/Solver.h	/^        uint64_t decisions; \/\/\/<Number of decisions made$/;"	m	class:CMSat::Solver
dynStarts	cmsat/Solver.h	/^        uint64_t dynStarts; \/\/\/<Num dynamic restarts$/;"	m	class:CMSat::Solver
failBinLit	cmsat/Solver.h	/^        Lit failBinLit; \/\/\/< Used to store which watches[~lit] we were looking through when conflict occured$/;"	m	class:CMSat::Solver
failedLitSearcher	cmsat/Solver.h	/^        FailedLitSearcher* failedLitSearcher;$/;"	m	class:CMSat::Solver
findAllAttach	cmsat/Solver.h	/^    inline void Solver::findAllAttach() const {$/;"	f	class:CMSat::Solver
freeLater	cmsat/Solver.h	/^        vec<XorClause*> freeLater; \/\/\/< xor clauses that need to be freed later (this is needed due to Gauss) \\todo Get rid of this$/;"	m	class:CMSat::Solver
fullStarts	cmsat/Solver.h	/^        uint64_t fullStarts; \/\/\/<Number of full restarts made$/;"	m	class:CMSat::Solver
gauss_matrixes	cmsat/Solver.h	/^        vector<Gaussian*> gauss_matrixes;$/;"	m	class:CMSat::Solver
gaussconfig	cmsat/Solver.h	/^        GaussConf gaussconfig; \/\/\/<Configuration for the gaussian elimination can be set here$/;"	m	class:CMSat::Solver
get_sum_gauss_called	cmsat/Solver.h	/^    inline uint32_t Solver::get_sum_gauss_called() const {$/;"	f	class:CMSat::Solver
get_sum_gauss_confl	cmsat/Solver.h	/^    inline uint32_t Solver::get_sum_gauss_confl() const {$/;"	f	class:CMSat::Solver
get_sum_gauss_prop	cmsat/Solver.h	/^    inline uint32_t Solver::get_sum_gauss_prop() const {$/;"	f	class:CMSat::Solver
get_sum_gauss_unit_truths	cmsat/Solver.h	/^    inline uint32_t Solver::get_sum_gauss_unit_truths() const {$/;"	f	class:CMSat::Solver
get_unitary_learnts_num	cmsat/Solver.h	/^    inline uint32_t Solver::get_unitary_learnts_num() const {$/;"	f	class:CMSat::Solver
glue	cmsat/Solver.h	/^            int glue;$/;"	m	struct:CMSat::Solver::InsertStatementClause
glueHistory	cmsat/Solver.h	/^        bqueue<uint32_t> glueHistory; \/\/\/< Set of last decision levels in (glue of) conflict clauses. Used for dynamic restarting$/;"	m	class:CMSat::Solver
improvedClauseNo	cmsat/Solver.h	/^        uint64_t improvedClauseNo; \/\/\/<Num clauses improved using on-the-fly subsumption$/;"	m	class:CMSat::Solver
improvedClauseSize	cmsat/Solver.h	/^        uint64_t improvedClauseSize; \/\/\/<Num literals removed using on-the-fly subsumption$/;"	m	class:CMSat::Solver
independentSet	cmsat/Solver.h	/^        vec<Var> independentSet; \/\/\/< Set of independent variables$/;"	m	class:CMSat::Solver
insSTMTCl	cmsat/Solver.h	/^        InsertStatementClause insSTMTCl;$/;"	m	class:CMSat::Solver
insSTMTLits	cmsat/Solver.h	/^        InsertStatementLits insSTMTLits;$/;"	m	class:CMSat::Solver
insertVarOrder	cmsat/Solver.h	/^    inline void Solver::insertVarOrder(Var x) {$/;"	f	class:CMSat::Solver
inverted	cmsat/Solver.h	/^            short inverted;$/;"	m	struct:CMSat::Solver::InsertStatementLits
is_xor	cmsat/Solver.h	/^        bool is_xor;$/;"	m	struct:CMSat::RetClause
lastDecisionLevel	cmsat/Solver.h	/^        vec<Var> lastDecisionLevel;$/;"	m	class:CMSat::Solver
lastNbBin	cmsat/Solver.h	/^        uint64_t lastNbBin; \/\/\/<Last time we seached for SCCs, numBins was this much$/;"	m	class:CMSat::Solver
lastSearchForBinaryXor	cmsat/Solver.h	/^        uint64_t lastSearchForBinaryXor; \/\/\/<Last time we looked for binary xors, this many bogoprops(=propagations) has been done$/;"	m	class:CMSat::Solver
lastSelectedRestartType	cmsat/Solver.h	/^        RestartType lastSelectedRestartType; \/\/\/<The last selected restart type. Used when we are just after a full restart, and need to know how to really act$/;"	m	class:CMSat::Solver
learnt	cmsat/Solver.h	/^            short learnt;$/;"	m	struct:CMSat::Solver::InsertStatementClause
learnts	cmsat/Solver.h	/^        vec<Clause*> learnts; \/\/\/< List of learnt clauses.$/;"	m	class:CMSat::Solver
learnts_literals	cmsat/Solver.h	/^        uint64_t clauses_literals, learnts_literals, max_literals, tot_literals;$/;"	m	class:CMSat::Solver
level	cmsat/Solver.h	/^        vec<int32_t> level; \/\/\/< 'level[var]' contains the level at which the assignment was made.$/;"	m	class:CMSat::Solver
libraryCNFFile	cmsat/Solver.h	/^        FILE *libraryCNFFile; \/\/The file that all calls from the library are logged$/;"	m	class:CMSat::Solver
lit	cmsat/Solver.h	/^            Lit lit;$/;"	m	class:CMSat::Solver::LitReachData
litReachable	cmsat/Solver.h	/^        vector<LitReachData>litReachable;$/;"	m	class:CMSat::Solver
litVar	cmsat/Solver.h	/^            int litVar;$/;"	m	struct:CMSat::Solver::InsertStatementLits
lits	cmsat/Solver.h	/^            vector<Lit> lits;$/;"	m	class:CMSat::Solver::TransCache
lits	cmsat/Solver.h	/^        vector<Lit> lits;$/;"	m	struct:CMSat::RetClause
locked	cmsat/Solver.h	/^    inline bool Solver::locked(const Clause& c) const {$/;"	f	class:CMSat::Solver
logLit	cmsat/Solver.h	/^    static inline void logLit(FILE* f, Lit l) {$/;"	f	namespace:CMSat
logLits	cmsat/Solver.h	/^    static inline void logLits(FILE* f, const vec<Lit>& ls) {$/;"	f	namespace:CMSat
matrixFinder	cmsat/Solver.h	/^        MatrixFinder* matrixFinder;$/;"	m	class:CMSat::Solver
max_literals	cmsat/Solver.h	/^        uint64_t clauses_literals, learnts_literals, max_literals, tot_literals;$/;"	m	class:CMSat::Solver
model	cmsat/Solver.h	/^        vec<lbool> model; \/\/\/<If problem is satisfiable, this vector contains the model (if any).$/;"	m	class:CMSat::Solver
modelValue	cmsat/Solver.h	/^    inline lbool Solver::modelValue(const Lit p) const {$/;"	f	class:CMSat::Solver
moreRecurMinLDo	cmsat/Solver.h	/^        uint64_t moreRecurMinLDo; \/\/\/<Decided to carry out transitive on-the-fly self-subsuming resolution on this many clauses$/;"	m	class:CMSat::Solver
mtrand	cmsat/Solver.h	/^        MTRand mtrand; \/\/\/< random number generator$/;"	m	class:CMSat::Solver
multiLevelProp	cmsat/Solver.h	/^        bool multiLevelProp;$/;"	m	class:CMSat::Solver
mysqClauseNum	cmsat/Solver.h	/^        uint32_t mysqClauseNum;$/;"	m	class:CMSat::Solver
nAssigns	cmsat/Solver.h	/^    inline uint32_t Solver::nAssigns() const {$/;"	f	class:CMSat::Solver
nClauses	cmsat/Solver.h	/^    inline uint32_t Solver::nClauses() const {$/;"	f	class:CMSat::Solver
nLearnts	cmsat/Solver.h	/^    inline uint32_t Solver::nLearnts() const {$/;"	f	class:CMSat::Solver
nLiterals	cmsat/Solver.h	/^    inline uint32_t Solver::nLiterals() const {$/;"	f	class:CMSat::Solver
nOrigVars	cmsat/Solver.h	/^    inline uint32_t Solver::nOrigVars() const {$/;"	f	class:CMSat::Solver
nVars	cmsat/Solver.h	/^    inline uint32_t Solver::nVars() const {$/;"	f	class:CMSat::Solver
nbClBeforeRed	cmsat/Solver.h	/^        uint32_t nbClBeforeRed; \/\/\/< Number of learnt clauses before learnt-clause cleaning$/;"	m	class:CMSat::Solver
nbClOverMaxGlue	cmsat/Solver.h	/^        uint64_t nbClOverMaxGlue; \/\/\/<Number or clauses over maximum glue defined in maxGlue$/;"	m	class:CMSat::Solver
nbCompensateSubsumer	cmsat/Solver.h	/^        uint32_t nbCompensateSubsumer; \/\/\/< Number of learnt clauses that subsumed normal clauses last time subs. was executed (used to delay learnt clause-cleaning)$/;"	m	class:CMSat::Solver
nbGlue2	cmsat/Solver.h	/^        uint64_t nbGlue2; \/\/\/<Num learnt clauses that had a glue of 2 when created$/;"	m	class:CMSat::Solver
nbReduceDB	cmsat/Solver.h	/^        uint64_t nbReduceDB; \/\/\/<Number of times learnt clause have been cleaned$/;"	m	class:CMSat::Solver
needToInterrupt	cmsat/Solver.h	/^        bool needToInterrupt; \/\/\/<Used internally mostly. If set to TRUE, we will interrupt cleanly ASAP. The important thing is "cleanly", since we need to wait until a point when all datastructures are in a sane state (i.e. not in the middle of some algorithm)$/;"	m	class:CMSat::Solver
newDecisionLevel	cmsat/Solver.h	/^    inline void Solver::newDecisionLevel() {$/;"	f	class:CMSat::Solver
num	cmsat/Solver.h	/^            int num;$/;"	m	struct:CMSat::Solver::InsertStatementClause
numBins	cmsat/Solver.h	/^        uint32_t numBins;$/;"	m	class:CMSat::Solver
numCleanedLearnts	cmsat/Solver.h	/^        uint64_t numCleanedLearnts; \/\/\/< Number of times learnt clauses have been removed through simplify() up until now$/;"	m	class:CMSat::Solver
numInCache	cmsat/Solver.h	/^            uint32_t numInCache;$/;"	m	class:CMSat::Solver::LitReachData
numNewBin	cmsat/Solver.h	/^        uint64_t numNewBin; \/\/\/<new binary clauses that have been found through some form of resolution (shrinking, conflicts, etc.)$/;"	m	class:CMSat::Solver
numShrinkedClause	cmsat/Solver.h	/^        uint64_t numShrinkedClause; \/\/\/<Num clauses improved using on-the-fly self-subsuming resolution$/;"	m	class:CMSat::Solver
numShrinkedClauseLits	cmsat/Solver.h	/^        uint64_t numShrinkedClauseLits; \/\/\/<Num literals removed by on-the-fly self-subsuming resolution$/;"	m	class:CMSat::Solver
ok	cmsat/Solver.h	/^        bool ok; \/\/\/< If FALSE, the constraints are already unsatisfiable. No part of the solver state may be used!$/;"	m	class:CMSat::Solver
okay	cmsat/Solver.h	/^    inline bool Solver::okay() const {$/;"	f	class:CMSat::Solver
operator ()	cmsat/Solver.h	/^            bool operator () (Var x, Var y) const {$/;"	f	struct:CMSat::Solver::VarOrderLt
operator ()	cmsat/Solver.h	/^            bool operator()(Var v) const {$/;"	f	struct:CMSat::Solver::VarFilter
operator ()	cmsat/Solver.h	/^        bool operator()(const Lit lit1, const Lit lit2) const {$/;"	f	struct:CMSat::PolaritySorter
order_heap	cmsat/Solver.h	/^        Heap<VarOrderLt> order_heap; \/\/\/< A priority queue of variables ordered with respect to the variable activity. All variables here MUST be decision variables. If you changed the decision variables, you MUST filter this$/;"	m	class:CMSat::Solver
origVars	cmsat/Solver.h	/^        uint32_t origVars;$/;"	m	class:CMSat::Solver
pol	cmsat/Solver.h	/^        vector<char>& pol;$/;"	m	struct:CMSat::PolaritySorter
polarity	cmsat/Solver.h	/^        vector<char> polarity; \/\/ The preferred polarity of each variable.$/;"	m	class:CMSat::Solver
propagations	cmsat/Solver.h	/^        uint64_t propagations;$/;"	m	class:CMSat::Solver
qhead	cmsat/Solver.h	/^        uint32_t qhead; \/\/\/< Head of queue (as index into the trail)$/;"	m	class:CMSat::Solver
reason	cmsat/Solver.h	/^        vec<PropBy> reason; \/\/\/< 'reason[var]' is the clause that implied the variables current value, or 'NULL' if none.$/;"	m	class:CMSat::Solver
reduceDB_ltGlucose	cmsat/Solver.h	/^    struct reduceDB_ltGlucose {$/;"	s	namespace:CMSat
reduceDB_ltMiniSat	cmsat/Solver.h	/^    struct reduceDB_ltMiniSat {$/;"	s	namespace:CMSat
removeClause	cmsat/Solver.h	/^    inline void Solver::removeClause(T& c) {$/;"	f	class:CMSat::Solver
restartType	cmsat/Solver.h	/^        RestartType restartType; \/\/\/<Used internally to determine which restart strategy is currently in use$/;"	m	class:CMSat::Solver
restartTypeChooser	cmsat/Solver.h	/^        RestartTypeChooser* restartTypeChooser;$/;"	m	class:CMSat::Solver
right_hand_side	cmsat/Solver.h	/^        bool right_hand_side;$/;"	m	struct:CMSat::RetClause
rnd_decisions	cmsat/Solver.h	/^        uint64_t rnd_decisions; \/\/\/<Numer of random decisions made$/;"	m	class:CMSat::Solver
runNo	cmsat/Solver.h	/^            int runNo;$/;"	m	struct:CMSat::Solver::InsertStatementClause
s	cmsat/Solver.h	/^            const Solver& s;$/;"	m	struct:CMSat::Solver::VarFilter
sCCFinder	cmsat/Solver.h	/^        SCCFinder* sCCFinder;$/;"	m	class:CMSat::Solver
seen	cmsat/Solver.h	/^        vector<char> seen; \/\/\/<Used in multiple places. Contains 2 * numVars() elements, all zeroed out$/;"	m	class:CMSat::Solver
seen2	cmsat/Solver.h	/^        vector<char> seen2; \/\/\/<To reduce temoprary data creation overhead. Used in minimiseLeartFurther(). contains 2 * numVars() elements, all zeroed out$/;"	m	class:CMSat::Solver
seen_vec	cmsat/Solver.h	/^        vector<Lit> seen_vec;$/;"	m	class:CMSat::Solver
setConflLimit	cmsat/Solver.h	/^        void setConflLimit(const uint64_t conflLimit) {$/;"	f	class:CMSat::Solver
setDecisionVar	cmsat/Solver.h	/^    inline void Solver::setDecisionVar(Var v, bool b) {$/;"	f	class:CMSat::Solver
setPolarity	cmsat/Solver.h	/^    inline void Solver::setPolarity(Var v, bool b) {$/;"	f	class:CMSat::Solver
simpDB_assigns	cmsat/Solver.h	/^        uint32_t simpDB_assigns; \/\/\/< Number of top-level assignments since last execution of 'simplify()'.$/;"	m	class:CMSat::Solver
simpDB_props	cmsat/Solver.h	/^        int64_t simpDB_props; \/\/\/< Remaining number of propagations that must be made before next execution of 'simplify()'.$/;"	m	class:CMSat::Solver
simplifying	cmsat/Solver.h	/^        bool simplifying; \/\/\/<We are currently doing burst search$/;"	m	class:CMSat::Solver
size	cmsat/Solver.h	/^            int size;$/;"	m	struct:CMSat::Solver::InsertStatementClause
solve	cmsat/Solver.h	/^    inline lbool Solver::solve() {$/;"	f	class:CMSat::Solver
starts	cmsat/Solver.h	/^        uint64_t starts; \/\/\/<Num restarts$/;"	m	class:CMSat::Solver
staticStarts	cmsat/Solver.h	/^        uint64_t staticStarts; \/\/\/<Num static restarts: note that after full restart, we do a couple of static restarts always$/;"	m	class:CMSat::Solver
subsumer	cmsat/Solver.h	/^        Subsumer* subsumer;$/;"	m	class:CMSat::Solver
sum_gauss_called	cmsat/Solver.h	/^        uint32_t sum_gauss_called;$/;"	m	class:CMSat::Solver
sum_gauss_confl	cmsat/Solver.h	/^        uint32_t sum_gauss_confl;$/;"	m	class:CMSat::Solver
sum_gauss_prop	cmsat/Solver.h	/^        uint32_t sum_gauss_prop;$/;"	m	class:CMSat::Solver
sum_gauss_unit_truths	cmsat/Solver.h	/^        uint32_t sum_gauss_unit_truths;$/;"	m	class:CMSat::Solver
testAllClauseAttach	cmsat/Solver.h	/^inline void Solver::testAllClauseAttach() const {$/;"	f	class:CMSat::Solver
toRecursiveProp	cmsat/Solver.h	/^        std::stack<Lit> toRecursiveProp; \/\/\/<To reduce temoprary data creation overhead. Used in minimiseLeartFurther()$/;"	m	class:CMSat::Solver
tot_literals	cmsat/Solver.h	/^        uint64_t clauses_literals, learnts_literals, max_literals, tot_literals;$/;"	m	class:CMSat::Solver
totalSimplifyTime	cmsat/Solver.h	/^        double totalSimplifyTime;$/;"	m	class:CMSat::Solver
trail	cmsat/Solver.h	/^        vec<Lit> trail; \/\/\/< Assignment stack; stores all assigments made in the order they were made.$/;"	m	class:CMSat::Solver
trailLevel	cmsat/Solver.h	/^            int trailLevel;$/;"	m	struct:CMSat::Solver::InsertStatementClause
trail_lim	cmsat/Solver.h	/^        vec<uint32_t> trail_lim; \/\/\/< Separator indices for different decision levels in 'trail'.$/;"	m	class:CMSat::Solver
transOTFCache	cmsat/Solver.h	/^        vector<TransCache> transOTFCache;$/;"	m	class:CMSat::Solver
unWindGlue	cmsat/Solver.h	/^        vec<Clause*> unWindGlue;$/;"	m	class:CMSat::Solver
uncheckedEnqueue	cmsat/Solver.h	/^    inline void Solver::uncheckedEnqueue(const Lit p, const PropBy& from) {$/;"	f	class:CMSat::Solver
uncheckedEnqueueLight	cmsat/Solver.h	/^    inline void Solver::uncheckedEnqueueLight(const Lit p) {$/;"	f	class:CMSat::Solver
uncheckedEnqueueLight2	cmsat/Solver.h	/^    inline void Solver::uncheckedEnqueueLight2(const Lit p, const uint32_t binSubLevel, const Lit lev1Ancestor, const bool learntLeadHere) {$/;"	f	class:CMSat::Solver
updateTransCache	cmsat/Solver.h	/^        uint64_t updateTransCache; \/\/\/<Number of times the transitive OTF-reduction cache has been updated$/;"	m	class:CMSat::Solver
value	cmsat/Solver.h	/^    inline lbool Solver::value(const Lit p) const {$/;"	f	class:CMSat::Solver
value	cmsat/Solver.h	/^    inline lbool Solver::value(const Var x) const {$/;"	f	class:CMSat::Solver
varBumpActivity	cmsat/Solver.h	/^    inline void Solver::varBumpActivity(Var v) {$/;"	f	class:CMSat::Solver
varDecayActivity	cmsat/Solver.h	/^    inline void Solver::varDecayActivity() {$/;"	f	class:CMSat::Solver
varReplacer	cmsat/Solver.h	/^        VarReplacer* varReplacer;$/;"	m	class:CMSat::Solver
var_inc	cmsat/Solver.h	/^        uint32_t var_inc; \/\/\/< Amount to bump next variable with.$/;"	m	class:CMSat::Solver
watches	cmsat/Solver.h	/^        vec<vec<Watched> > watches; \/\/\/< 'watches[lit]' is a list of constraints watching 'lit' (will go there if literal becomes true).$/;"	m	class:CMSat::Solver
xorSubsumer	cmsat/Solver.h	/^        XorSubsumer* xorSubsumer;$/;"	m	class:CMSat::Solver
xorclauses	cmsat/Solver.h	/^        vec<XorClause*> xorclauses; \/\/\/< List of problem xor-clauses. Will be freed$/;"	m	class:CMSat::Solver
SolverConf	cmsat/SolverConf.cpp	/^SolverConf::SolverConf() :$/;"	f	class:SolverConf
CMSat	cmsat/SolverConf.h	/^namespace CMSat {$/;"	n
SOLVERCONF_H	cmsat/SolverConf.h	23;"	d
SolverConf	cmsat/SolverConf.h	/^    class SolverConf {$/;"	c	namespace:CMSat
aggregateSolutions	cmsat/SolverConf.h	/^        bool aggregateSolutions;$/;"	m	class:CMSat::SolverConf
callsPerSolver	cmsat/SolverConf.h	/^        uint32_t callsPerSolver;$/;"	m	class:CMSat::SolverConf
clause_decay	cmsat/SolverConf.h	/^        double clause_decay; \/\/\/<Inverse of the clause activity decay factor. Only applies if using MiniSat-style clause activities  (default: 1 \/ 0.999)$/;"	m	class:CMSat::SolverConf
doBXor	cmsat/SolverConf.h	/^        bool doBXor;$/;"	m	class:CMSat::SolverConf
doBlockedClause	cmsat/SolverConf.h	/^        bool doBlockedClause; \/\/\/<Should try to remove blocked clauses$/;"	m	class:CMSat::SolverConf
doCacheOTFSSR	cmsat/SolverConf.h	/^        bool doCacheOTFSSR;$/;"	m	class:CMSat::SolverConf
doCacheOTFSSRSet	cmsat/SolverConf.h	/^        bool doCacheOTFSSRSet;$/;"	m	class:CMSat::SolverConf
doCalcReach	cmsat/SolverConf.h	/^        bool doCalcReach; \/\/\/<Calculate reachability, and influence variable decisions with that$/;"	m	class:CMSat::SolverConf
doClausVivif	cmsat/SolverConf.h	/^        bool doClausVivif; \/\/\/<Perform asymmetric branching at the beginning of the solving$/;"	m	class:CMSat::SolverConf
doConglXors	cmsat/SolverConf.h	/^        bool doConglXors; \/\/\/<Do variable elimination at the XOR-level (xor-ing 2 xor clauses thereby removing a variable)$/;"	m	class:CMSat::SolverConf
doExtendedSCC	cmsat/SolverConf.h	/^        bool doExtendedSCC;$/;"	m	class:CMSat::SolverConf
doFailedLit	cmsat/SolverConf.h	/^        bool doFailedLit; \/\/\/<Carry out Failed literal probing + doubly propagated literal detection + 2-long xor clause detection during failed literal probing + hyper-binary resoolution$/;"	m	class:CMSat::SolverConf
doFindEqLits	cmsat/SolverConf.h	/^        bool doFindEqLits; \/\/\/<Automatically find binary xor clauses (i.e. variable equi- and antivalences)$/;"	m	class:CMSat::SolverConf
doFindXors	cmsat/SolverConf.h	/^        bool doFindXors; \/\/\/<Automatically find non-binary xor clauses and convert them to xor clauses$/;"	m	class:CMSat::SolverConf
doHeuleProcess	cmsat/SolverConf.h	/^        bool doHeuleProcess; \/\/\/<Perform local subsitutuion as per Heule's theis$/;"	m	class:CMSat::SolverConf
doHyperBinRes	cmsat/SolverConf.h	/^        bool doHyperBinRes; \/\/\/<Should try carry out hyper-binary resolution$/;"	m	class:CMSat::SolverConf
doMaxGlueDel	cmsat/SolverConf.h	/^        bool doMaxGlueDel;$/;"	m	class:CMSat::SolverConf
doMinimLMoreRecur	cmsat/SolverConf.h	/^        bool doMinimLMoreRecur; \/\/\/<Always perform recursive\/transitive on-the-fly self self-subsuming resolution --> an enhancement of "strong minimization" of PrecoSat$/;"	m	class:CMSat::SolverConf
doMinimLearntMore	cmsat/SolverConf.h	/^        bool doMinimLearntMore; \/\/\/<Perform learnt-clause minimisation using watchists' binary and tertiary clauses? ("strong minimization" in PrecoSat)$/;"	m	class:CMSat::SolverConf
doOTFSubsume	cmsat/SolverConf.h	/^        bool doOTFSubsume; \/\/\/On-the-fly subsumption$/;"	m	class:CMSat::SolverConf
doPerformPreSimp	cmsat/SolverConf.h	/^        bool doPerformPreSimp;$/;"	m	class:CMSat::SolverConf
doPrintAvgBranch	cmsat/SolverConf.h	/^        bool doPrintAvgBranch;$/;"	m	class:CMSat::SolverConf
doRegFindEqLits	cmsat/SolverConf.h	/^        bool doRegFindEqLits; \/\/\/<Regularly find binary xor clauses (i.e. variable equi- and antivalences)$/;"	m	class:CMSat::SolverConf
doRemUselessBins	cmsat/SolverConf.h	/^        bool doRemUselessBins; \/\/\/<Should try to remove useless binary clauses at the beginning of solving?$/;"	m	class:CMSat::SolverConf
doRemUselessLBins	cmsat/SolverConf.h	/^        bool doRemUselessLBins; \/\/\/<Try to remove useless learnt binary clauses$/;"	m	class:CMSat::SolverConf
doReplace	cmsat/SolverConf.h	/^        bool doReplace; \/\/\/<Should var-replacing be performed? If set to FALSE, equi- and antivalent variables will not be replaced with one another. NOTE: This precludes using a lot of the algorithms!$/;"	m	class:CMSat::SolverConf
doSatELite	cmsat/SolverConf.h	/^        bool doSatELite; \/\/\/<Should try to subsume & self-subsuming resolve & variable-eliminate & block-clause eliminate?$/;"	m	class:CMSat::SolverConf
doSchedSimp	cmsat/SolverConf.h	/^        bool doSchedSimp; \/\/\/<Should simplifyProblem() be scheduled regularly? (if set to FALSE, a lot of opmitisations are disabled)$/;"	m	class:CMSat::SolverConf
doSortWatched	cmsat/SolverConf.h	/^        bool doSortWatched; \/\/\/<Sort watchlists according to size&type: binary, tertiary, normal (>3-long), xor clauses$/;"	m	class:CMSat::SolverConf
doSubsWBins	cmsat/SolverConf.h	/^        bool doSubsWBins;$/;"	m	class:CMSat::SolverConf
doSubsWNonExistBins	cmsat/SolverConf.h	/^        bool doSubsWNonExistBins; \/\/\/<Try to do subsumption and self-subsuming resolution with non-existent binary clauses (i.e. binary clauses that don't exist but COULD exists)$/;"	m	class:CMSat::SolverConf
doSubsume1	cmsat/SolverConf.h	/^        bool doSubsume1; \/\/\/<Perform self-subsuming resolution$/;"	m	class:CMSat::SolverConf
doVarElim	cmsat/SolverConf.h	/^        bool doVarElim; \/\/\/<Perform variable elimination$/;"	m	class:CMSat::SolverConf
doXorSubsumption	cmsat/SolverConf.h	/^        bool doXorSubsumption; \/\/\/<Should try to subsume & local-subsitute xor clauses$/;"	m	class:CMSat::SolverConf
expensive_ccmin	cmsat/SolverConf.h	/^        bool expensive_ccmin; \/\/\/<Should clause minimisation by Sorensson&Biere be used?                                    (default TRUE)$/;"	m	class:CMSat::SolverConf
failedLitMultiplier	cmsat/SolverConf.h	/^        double failedLitMultiplier;$/;"	m	class:CMSat::SolverConf
fixRestartType	cmsat/SolverConf.h	/^        RestartType fixRestartType; \/\/\/<If set, the solver will always choose the given restart strategy instead of automatically trying to guess a strategy. Note that even if set to dynamic_restart, there will be a few restarts made statically after each full restart.$/;"	m	class:CMSat::SolverConf
greedyUnbound	cmsat/SolverConf.h	/^        bool greedyUnbound; \/\/\/<If set, then variables will be greedily unbounded (set to l_Undef). This is EXPERIMENTAL$/;"	m	class:CMSat::SolverConf
isPlain	cmsat/SolverConf.h	/^        bool isPlain; \/\/\/<We are in 'plain' mode: glues can never be 1$/;"	m	class:CMSat::SolverConf
kappa	cmsat/SolverConf.h	/^        float kappa;$/;"	m	class:CMSat::SolverConf
learntsFilename	cmsat/SolverConf.h	/^        std::string learntsFilename; \/\/\/<Dump sorted learnt clauses to this file. Only active if "needToDumpLearnts" is set to TRUE$/;"	m	class:CMSat::SolverConf
learntsize_factor	cmsat/SolverConf.h	/^        double learntsize_factor; \/\/\/<The intitial limit for learnt clauses is a factor of the original clauses.                (default 1 \/ 3)$/;"	m	class:CMSat::SolverConf
learntsize_inc	cmsat/SolverConf.h	/^        double learntsize_inc; \/\/\/<The limit for learnt clauses is multiplied with this factor each restart.                 (default 1.1)$/;"	m	class:CMSat::SolverConf
libraryUsage	cmsat/SolverConf.h	/^        bool libraryUsage; \/\/\/<Set to true if not used as a library. In fact, this is TRUE by default, and Main.cpp sets it to "FALSE". Disables some simplifications at the beginning of solving (mostly performStepsBeforeSolve() )$/;"	m	class:CMSat::SolverConf
logFilename	cmsat/SolverConf.h	/^        std::string logFilename;$/;"	m	class:CMSat::SolverConf
loopTimeout	cmsat/SolverConf.h	/^        int loopTimeout;$/;"	m	class:CMSat::SolverConf
maxConfl	cmsat/SolverConf.h	/^        uint64_t maxConfl;$/;"	m	class:CMSat::SolverConf
maxDumpLearntsSize	cmsat/SolverConf.h	/^        uint32_t maxDumpLearntsSize; \/\/\/<When dumping the learnt clauses, this is the maximum clause size that should be dumped$/;"	m	class:CMSat::SolverConf
maxGlue	cmsat/SolverConf.h	/^        uint32_t maxGlue; \/\/\/< Learnt clauses (when doing dynamic restarts) with glue above this value will be removed immediately on backtracking$/;"	m	class:CMSat::SolverConf
maxRestarts	cmsat/SolverConf.h	/^        uint32_t maxRestarts;$/;"	m	class:CMSat::SolverConf
multisample	cmsat/SolverConf.h	/^        bool multisample;$/;"	m	class:CMSat::SolverConf
needToDumpLearnts	cmsat/SolverConf.h	/^        bool needToDumpLearnts; \/\/\/<If set to TRUE, learnt clauses will be dumped to the file speified by "learntsFilename"$/;"	m	class:CMSat::SolverConf
needToDumpOrig	cmsat/SolverConf.h	/^        bool needToDumpOrig; \/\/\/<If set to TRUE, a simplified version of the original clause-set will be dumped to the file speified by "origFilename". The solution to this file should perfectly satisfy the problem$/;"	m	class:CMSat::SolverConf
origFilename	cmsat/SolverConf.h	/^        std::string origFilename; \/\/\/<Dump simplified original problem CNF to this file. Only active if "needToDumpOrig" is set to TRUE$/;"	m	class:CMSat::SolverConf
origSeed	cmsat/SolverConf.h	/^        uint32_t origSeed;$/;"	m	class:CMSat::SolverConf
pivotApproxMC	cmsat/SolverConf.h	/^        int32_t pivotApproxMC;$/;"	m	class:CMSat::SolverConf
pivotUniGen	cmsat/SolverConf.h	/^        uint32_t pivotUniGen;$/;"	m	class:CMSat::SolverConf
polarity_mode	cmsat/SolverConf.h	/^        int polarity_mode; \/\/\/<Controls which polarity the decision heuristic chooses. Auto means Jeroslow-Wang          (default: polarity_auto)$/;"	m	class:CMSat::SolverConf
random_var_freq	cmsat/SolverConf.h	/^        double random_var_freq; \/\/\/<The frequency with which the decision heuristic tries to choose a random variable.        (default 0.02) NOTE: This is really strange. If the number of variables set is large, then the random chance is in fact _far_ lower than this value. This is because the algorithm tries to set one variable randomly, but if that variable is already set, then it _silently_ fails, and moves on (doing non-random flip)!$/;"	m	class:CMSat::SolverConf
restart_first	cmsat/SolverConf.h	/^        int restart_first; \/\/\/<The initial restart limit.                                                                (default 100)$/;"	m	class:CMSat::SolverConf
restart_inc	cmsat/SolverConf.h	/^        double restart_inc; \/\/\/<The factor with which the restart limit is multiplied in each restart.                    (default 1.5)$/;"	m	class:CMSat::SolverConf
restrictPickBranch	cmsat/SolverConf.h	/^        Var restrictPickBranch; \/\/\/<Pick variables to branch on preferentally from the highest [0, restrictedPickBranch]. If set to 0, preferentiality is turned off (i.e. picked randomly between [0, all])$/;"	m	class:CMSat::SolverConf
samples	cmsat/SolverConf.h	/^        uint32_t samples;$/;"	m	class:CMSat::SolverConf
samplesGen	cmsat/SolverConf.h	/^        uint32_t samplesGen;$/;"	m	class:CMSat::SolverConf
serverConn	cmsat/SolverConf.h	/^        MYSQL *serverConn;$/;"	m	class:CMSat::SolverConf
shouldLog	cmsat/SolverConf.h	/^        bool shouldLog;$/;"	m	class:CMSat::SolverConf
simpBurstSConf	cmsat/SolverConf.h	/^        uint32_t simpBurstSConf;$/;"	m	class:CMSat::SolverConf
simpStartMMult	cmsat/SolverConf.h	/^        double simpStartMMult;$/;"	m	class:CMSat::SolverConf
simpStartMult	cmsat/SolverConf.h	/^        double simpStartMult;$/;"	m	class:CMSat::SolverConf
startIteration	cmsat/SolverConf.h	/^        uint32_t startIteration;$/;"	m	class:CMSat::SolverConf
switch_off_subsumer_max_vars	cmsat/SolverConf.h	/^        long int switch_off_subsumer_max_vars;$/;"	m	class:CMSat::SolverConf
tApproxMC	cmsat/SolverConf.h	/^        uint32_t tApproxMC;$/;"	m	class:CMSat::SolverConf
totalTimeout	cmsat/SolverConf.h	/^        int totalTimeout;$/;"	m	class:CMSat::SolverConf
verbosity	cmsat/SolverConf.h	/^        int verbosity; \/\/\/<Verbosity level. 0=silent, 1=some progress report, 2=lots of report, 3 = all report       (default 2)$/;"	m	class:CMSat::SolverConf
checkLiteralCount	cmsat/SolverDebug.cpp	/^void Solver::checkLiteralCount() {$/;"	f	class:Solver
checkSolution	cmsat/SolverDebug.cpp	/^void Solver::checkSolution() {$/;"	f	class:Solver
findAllAttach	cmsat/SolverDebug.cpp	/^void Solver::findAllAttach() const {$/;"	f	class:Solver
findClause	cmsat/SolverDebug.cpp	/^bool Solver::findClause(Clause* c) const {$/;"	f	class:Solver
findClause	cmsat/SolverDebug.cpp	/^bool Solver::findClause(XorClause* c) const {$/;"	f	class:Solver
normClauseIsAttached	cmsat/SolverDebug.cpp	/^bool Solver::normClauseIsAttached(const Clause& c) const {$/;"	f	class:Solver
printAllClauses	cmsat/SolverDebug.cpp	/^void Solver::printAllClauses() {$/;"	f	class:Solver
testAllClauseAttach	cmsat/SolverDebug.cpp	/^void Solver::testAllClauseAttach() const {$/;"	f	class:Solver
verifyBinClauses	cmsat/SolverDebug.cpp	/^bool Solver::verifyBinClauses() const {$/;"	f	class:Solver
verifyClauses	cmsat/SolverDebug.cpp	/^bool Solver::verifyClauses(const vec<Clause*>& cs) const {$/;"	f	class:Solver
verifyModel	cmsat/SolverDebug.cpp	/^bool Solver::verifyModel() const {$/;"	f	class:Solver
verifyXorClauses	cmsat/SolverDebug.cpp	/^bool Solver::verifyXorClauses() const {$/;"	f	class:Solver
xorClauseIsAttached	cmsat/SolverDebug.cpp	/^bool Solver::xorClauseIsAttached(const XorClause& c) const {$/;"	f	class:Solver
addSymmBreakClauses	cmsat/SolverMisc.cpp	/^void Solver::addSymmBreakClauses() {$/;"	f	class:Solver
countNumBinClauses	cmsat/SolverMisc.cpp	/^uint32_t Solver::countNumBinClauses(const bool alsoLearnt, const bool alsoNonLearnt) const {$/;"	f	class:Solver
dumpBinClauses	cmsat/SolverMisc.cpp	/^void Solver::dumpBinClauses(const bool alsoLearnt, const bool alsoNonLearnt, FILE* outfile) const {$/;"	f	class:Solver
dumpOrigClauses	cmsat/SolverMisc.cpp	/^bool Solver::dumpOrigClauses(const std::string& fileName) const {$/;"	f	class:Solver
dumpOrigClauses	cmsat/SolverMisc.cpp	/^vector<RetClause> Solver::dumpOrigClauses() const {$/;"	f	class:Solver
dumpSortedLearnts	cmsat/SolverMisc.cpp	/^bool Solver::dumpSortedLearnts(const std::string& fileName, const uint32_t maxSize) {$/;"	f	class:Solver
getBinWatchSize	cmsat/SolverMisc.cpp	/^uint32_t Solver::getBinWatchSize(const bool alsoLearnt, const Lit lit) {$/;"	f	class:Solver
getNumElimSubsume	cmsat/SolverMisc.cpp	/^uint32_t Solver::getNumElimSubsume() const {$/;"	f	class:Solver
getNumElimXorSubsume	cmsat/SolverMisc.cpp	/^uint32_t Solver::getNumElimXorSubsume() const {$/;"	f	class:Solver
getNumXorTrees	cmsat/SolverMisc.cpp	/^uint32_t Solver::getNumXorTrees() const {$/;"	f	class:Solver
getNumXorTreesCrownSize	cmsat/SolverMisc.cpp	/^uint32_t Solver::getNumXorTreesCrownSize() const {$/;"	f	class:Solver
getTotalTimeFailedLitSearcher	cmsat/SolverMisc.cpp	/^double Solver::getTotalTimeFailedLitSearcher() const {$/;"	f	class:Solver
getTotalTimeSCC	cmsat/SolverMisc.cpp	/^double Solver::getTotalTimeSCC() const {$/;"	f	class:Solver
getTotalTimeSubsumer	cmsat/SolverMisc.cpp	/^double Solver::getTotalTimeSubsumer() const {$/;"	f	class:Solver
getTotalTimeXorSubsumer	cmsat/SolverMisc.cpp	/^double Solver::getTotalTimeXorSubsumer() const {$/;"	f	class:Solver
get_learnts	cmsat/SolverMisc.cpp	/^const vec<Clause*>& Solver::get_learnts() const {$/;"	f	class:Solver
get_sorted_learnts	cmsat/SolverMisc.cpp	/^const vec<Clause*>& Solver::get_sorted_learnts() {$/;"	f	class:Solver
get_unitary_learnts	cmsat/SolverMisc.cpp	/^vec<Lit> Solver::get_unitary_learnts() const {$/;"	f	class:Solver
needLibraryCNFFile	cmsat/SolverMisc.cpp	/^bool Solver::needLibraryCNFFile(const std::string& fileName) {$/;"	f	class:Solver
printBinClause	cmsat/SolverMisc.cpp	/^void Solver::printBinClause(const Lit litP1, const Lit litP2, FILE* outfile) const {$/;"	f	class:Solver
printEndSearchStat	cmsat/SolverMisc.cpp	/^void Solver::printEndSearchStat() {$/;"	f	class:Solver
printLit	cmsat/SolverMisc.cpp	/^void Solver::printLit(const Lit l) const {$/;"	f	class:Solver
printRestartStat	cmsat/SolverMisc.cpp	/^void Solver::printRestartStat(const char* type) {$/;"	f	class:Solver
printStatHeader	cmsat/SolverMisc.cpp	/^void Solver::printStatHeader() const {$/;"	f	class:Solver
printStats	cmsat/SolverMisc.cpp	/^void Solver::printStats() {$/;"	f	class:Solver
printStatsLine	cmsat/SolverMisc.cpp	/^void Solver::printStatsLine(std::string left, T value, T2 value2, std::string extra) {$/;"	f	class:Solver
printStatsLine	cmsat/SolverMisc.cpp	/^void Solver::printStatsLine(std::string left, T value, std::string extra) {$/;"	f	class:Solver
printStrangeBinLit	cmsat/SolverMisc.cpp	/^void Solver::printStrangeBinLit(const Lit lit) const {$/;"	f	class:Solver
print_gauss_sum_stats	cmsat/SolverMisc.cpp	/^void Solver::print_gauss_sum_stats() {$/;"	f	class:Solver
sortWatched	cmsat/SolverMisc.cpp	/^void Solver::sortWatched() {$/;"	f	class:Solver
space	cmsat/SolverMisc.cpp	/^static const int space = 10;$/;"	v	file:
BinPropData	cmsat/SolverTypes.h	/^    struct BinPropData {$/;"	s	namespace:CMSat
CMSat	cmsat/SolverTypes.h	/^namespace CMSat {$/;"	n
Lit	cmsat/SolverTypes.h	/^        Lit() : x(2 * var_Undef) {$/;"	f	class:CMSat::Lit
Lit	cmsat/SolverTypes.h	/^        explicit Lit(Var var, bool sign) : x((var + var) + (int) sign) {$/;"	f	class:CMSat::Lit
Lit	cmsat/SolverTypes.h	/^        explicit Lit(uint32_t i) : x(i) {$/;"	f	class:CMSat::Lit
Lit	cmsat/SolverTypes.h	/^    class Lit {$/;"	c	namespace:CMSat
RestartType	cmsat/SolverTypes.h	/^    enum RestartType {$/;"	g	namespace:CMSat
Var	cmsat/SolverTypes.h	/^    typedef uint32_t Var;$/;"	t	namespace:CMSat
__SOLVERTYPES_H__	cmsat/SolverTypes.h	23;"	d
auto_restart	cmsat/SolverTypes.h	/^        dynamic_restart, static_restart, auto_restart$/;"	e	enum:CMSat::RestartType
boolToLBool	cmsat/SolverTypes.h	/^    inline lbool boolToLBool(const bool b) {$/;"	f	namespace:CMSat
dynamic_restart	cmsat/SolverTypes.h	/^        dynamic_restart, static_restart, auto_restart$/;"	e	enum:CMSat::RestartType
getBool	cmsat/SolverTypes.h	/^        inline bool getBool() const {$/;"	f	class:CMSat::lbool
getchar	cmsat/SolverTypes.h	/^        inline char getchar() const {$/;"	f	class:CMSat::lbool
hasChildren	cmsat/SolverTypes.h	/^        bool hasChildren;$/;"	m	struct:CMSat::BinPropData
isDef	cmsat/SolverTypes.h	/^        inline bool isDef() const {$/;"	f	class:CMSat::lbool
isUndef	cmsat/SolverTypes.h	/^        inline bool isUndef() const {$/;"	f	class:CMSat::lbool
l_Continue	cmsat/SolverTypes.h	/^    const llbool l_Continue = toLbool(3);$/;"	m	namespace:CMSat
l_False	cmsat/SolverTypes.h	/^    const lbool l_False = toLbool(-1);$/;"	m	namespace:CMSat
l_Nothing	cmsat/SolverTypes.h	/^    const llbool l_Nothing = toLbool(2);$/;"	m	namespace:CMSat
l_True	cmsat/SolverTypes.h	/^    const lbool l_True = toLbool(1);$/;"	m	namespace:CMSat
l_Undef	cmsat/SolverTypes.h	/^    const lbool l_Undef = toLbool(0);$/;"	m	namespace:CMSat
lbool	cmsat/SolverTypes.h	/^        explicit lbool(char v) : value(v) {$/;"	f	class:CMSat::lbool
lbool	cmsat/SolverTypes.h	/^        lbool() : value(0) {$/;"	f	class:CMSat::lbool
lbool	cmsat/SolverTypes.h	/^    class lbool {$/;"	c	namespace:CMSat
lbool	cmsat/SolverTypes.h	/^    lbool::lbool(llbool b) : value(b.value) {$/;"	f	class:CMSat::lbool
learntLeadHere	cmsat/SolverTypes.h	/^        bool learntLeadHere;$/;"	m	struct:CMSat::BinPropData
lev	cmsat/SolverTypes.h	/^        uint32_t lev;$/;"	m	struct:CMSat::BinPropData
lev1Ancestor	cmsat/SolverTypes.h	/^        Lit lev1Ancestor;$/;"	m	struct:CMSat::BinPropData
llbool	cmsat/SolverTypes.h	/^        llbool() : value(0) {$/;"	f	class:CMSat::llbool
llbool	cmsat/SolverTypes.h	/^        llbool(char a) :$/;"	f	class:CMSat::llbool
llbool	cmsat/SolverTypes.h	/^        llbool(lbool v) :$/;"	f	class:CMSat::llbool
llbool	cmsat/SolverTypes.h	/^    class llbool {$/;"	c	namespace:CMSat
operator !=	cmsat/SolverTypes.h	/^        bool operator!=(const Lit& p) const {$/;"	f	class:CMSat::Lit
operator !=	cmsat/SolverTypes.h	/^        inline bool operator!=(const llbool& v) const {$/;"	f	class:CMSat::llbool
operator !=	cmsat/SolverTypes.h	/^        inline bool operator!=(lbool b) const {$/;"	f	class:CMSat::lbool
operator <	cmsat/SolverTypes.h	/^        bool operator<(const Lit& p) const {$/;"	f	class:CMSat::Lit
operator <<	cmsat/SolverTypes.h	/^    inline std::ostream& operator<<(std::ostream& cout, const Lit& lit) {$/;"	f	namespace:CMSat
operator <<	cmsat/SolverTypes.h	/^    inline std::ostream& operator<<(std::ostream& cout, const lbool val) {$/;"	f	namespace:CMSat
operator <<	cmsat/SolverTypes.h	/^    inline std::ostream& operator<<(std::ostream& cout, const vec<Lit>& lits) {$/;"	f	namespace:CMSat
operator <<	cmsat/SolverTypes.h	/^    inline std::ostream& operator<<(std::ostream& os, const llbool val) {$/;"	f	namespace:CMSat
operator ==	cmsat/SolverTypes.h	/^        bool operator==(const Lit& p) const {$/;"	f	class:CMSat::Lit
operator ==	cmsat/SolverTypes.h	/^        inline bool operator==(const llbool& v) const {$/;"	f	class:CMSat::llbool
operator ==	cmsat/SolverTypes.h	/^        inline bool operator==(lbool b) const {$/;"	f	class:CMSat::lbool
operator ^	cmsat/SolverTypes.h	/^        Lit operator^(const bool b) const {$/;"	f	class:CMSat::Lit
operator ^	cmsat/SolverTypes.h	/^        lbool operator^(const bool b) const {$/;"	f	class:CMSat::lbool
operator ^=	cmsat/SolverTypes.h	/^        Lit& operator^=(const bool b) {$/;"	f	class:CMSat::Lit
operator ~	cmsat/SolverTypes.h	/^        Lit operator~() const {$/;"	f	class:CMSat::Lit
polarity_auto	cmsat/SolverTypes.h	/^        polarity_true = 0, polarity_false = 1, polarity_rnd = 3, polarity_auto = 4$/;"	e	enum:CMSat::__anon1
polarity_false	cmsat/SolverTypes.h	/^        polarity_true = 0, polarity_false = 1, polarity_rnd = 3, polarity_auto = 4$/;"	e	enum:CMSat::__anon1
polarity_rnd	cmsat/SolverTypes.h	/^        polarity_true = 0, polarity_false = 1, polarity_rnd = 3, polarity_auto = 4$/;"	e	enum:CMSat::__anon1
polarity_true	cmsat/SolverTypes.h	/^        polarity_true = 0, polarity_false = 1, polarity_rnd = 3, polarity_auto = 4$/;"	e	enum:CMSat::__anon1
print	cmsat/SolverTypes.h	/^        inline void print(FILE* outfile = stdout) const {$/;"	f	class:CMSat::Lit
printClause	cmsat/SolverTypes.h	/^    inline void printClause(FILE* outFile, const std::vector<Lit>& clause) {$/;"	f	namespace:CMSat
printClause	cmsat/SolverTypes.h	/^    inline void printClause(FILE* outFile, const vec<Lit>& clause) {$/;"	f	namespace:CMSat
printFull	cmsat/SolverTypes.h	/^        inline void printFull(FILE* outfile = stdout) const {$/;"	f	class:CMSat::Lit
sign	cmsat/SolverTypes.h	/^        bool sign() const {$/;"	f	class:CMSat::Lit
static_restart	cmsat/SolverTypes.h	/^        dynamic_restart, static_restart, auto_restart$/;"	e	enum:CMSat::RestartType
toInt	cmsat/SolverTypes.h	/^        const uint32_t& toInt() const { \/\/ Guarantees small, positive integers suitable for array indexing.$/;"	f	class:CMSat::Lit
toLbool	cmsat/SolverTypes.h	/^    inline lbool toLbool(const char v) {$/;"	f	namespace:CMSat
toLit	cmsat/SolverTypes.h	/^        static Lit toLit(uint32_t data) {$/;"	f	class:CMSat::Lit
unsign	cmsat/SolverTypes.h	/^        Lit unsign() const {$/;"	f	class:CMSat::Lit
value	cmsat/SolverTypes.h	/^        char value;$/;"	m	class:CMSat::lbool
value	cmsat/SolverTypes.h	/^        char value;$/;"	m	class:CMSat::llbool
var	cmsat/SolverTypes.h	/^        Var var() const {$/;"	f	class:CMSat::Lit
var_Undef	cmsat/SolverTypes.h	/^    static const uint32_t var_Undef = 0xffffffffU >> 1;$/;"	m	namespace:CMSat
x	cmsat/SolverTypes.h	/^        uint32_t x;$/;"	m	class:CMSat::Lit
StateSaver	cmsat/StateSaver.cpp	/^StateSaver::StateSaver(Solver& _solver) :$/;"	f	class:StateSaver
restore	cmsat/StateSaver.cpp	/^void StateSaver::restore() {$/;"	f	class:StateSaver
CMSat	cmsat/StateSaver.h	/^namespace CMSat {$/;"	n
STATESAVER__H	cmsat/StateSaver.h	23;"	d
StateSaver	cmsat/StateSaver.h	/^    class StateSaver {$/;"	c	namespace:CMSat
backup_activity	cmsat/StateSaver.h	/^        vec<uint32_t> backup_activity;$/;"	m	class:CMSat::StateSaver
backup_order_heap	cmsat/StateSaver.h	/^        Heap<Solver::VarOrderLt> backup_order_heap;$/;"	m	class:CMSat::StateSaver
backup_polarities	cmsat/StateSaver.h	/^        vector<char> backup_polarities;$/;"	m	class:CMSat::StateSaver
backup_propagations	cmsat/StateSaver.h	/^        uint64_t backup_propagations;$/;"	m	class:CMSat::StateSaver
backup_random_var_freq	cmsat/StateSaver.h	/^        double backup_random_var_freq;$/;"	m	class:CMSat::StateSaver
backup_restartType	cmsat/StateSaver.h	/^        RestartType backup_restartType;$/;"	m	class:CMSat::StateSaver
backup_var_inc	cmsat/StateSaver.h	/^        uint32_t backup_var_inc;$/;"	m	class:CMSat::StateSaver
solver	cmsat/StateSaver.h	/^        Solver& solver;$/;"	m	class:CMSat::StateSaver
CHUNK_LIMIT	cmsat/StreamBuffer.h	25;"	d
CMSat	cmsat/StreamBuffer.h	/^namespace CMSat {$/;"	n
STREAMBUFFER_H	cmsat/StreamBuffer.h	23;"	d
StreamBuffer	cmsat/StreamBuffer.h	/^        StreamBuffer(FILE * i) :$/;"	f	class:CMSat::StreamBuffer
StreamBuffer	cmsat/StreamBuffer.h	/^        StreamBuffer(gzFile i) :$/;"	f	class:CMSat::StreamBuffer
StreamBuffer	cmsat/StreamBuffer.h	/^    class StreamBuffer {$/;"	c	namespace:CMSat
assureLookahead	cmsat/StreamBuffer.h	/^        void assureLookahead() {$/;"	f	class:CMSat::StreamBuffer
buf	cmsat/StreamBuffer.h	/^        char buf[CHUNK_LIMIT];$/;"	m	class:CMSat::StreamBuffer
in	cmsat/StreamBuffer.h	/^        gzFile in;$/;"	m	class:CMSat::StreamBuffer
operator *	cmsat/StreamBuffer.h	/^        int operator *() {$/;"	f	class:CMSat::StreamBuffer
operator ++	cmsat/StreamBuffer.h	/^        void operator ++() {$/;"	f	class:CMSat::StreamBuffer
pos	cmsat/StreamBuffer.h	/^        int pos;$/;"	m	class:CMSat::StreamBuffer
size	cmsat/StreamBuffer.h	/^        int size;$/;"	m	class:CMSat::StreamBuffer
BIT_MORE_VERBOSITY	cmsat/Subsumer.cpp	41;"	d	file:
Subsumer	cmsat/Subsumer.cpp	/^Subsumer::Subsumer(Solver& s) :$/;"	f	class:Subsumer
addBackToSolver	cmsat/Subsumer.cpp	/^void Subsumer::addBackToSolver() {$/;"	f	class:Subsumer
addFromSolver	cmsat/Subsumer.cpp	/^uint64_t Subsumer::addFromSolver(vec<Clause*>& cs) {$/;"	f	class:Subsumer
allTautology	cmsat/Subsumer.cpp	/^bool Subsumer::allTautology(const T& ps, const Lit lit) {$/;"	f	class:Subsumer
blockedClauseElimAll	cmsat/Subsumer.cpp	/^void Subsumer::blockedClauseElimAll(const Lit lit) {$/;"	f	class:Subsumer
blockedClauseRemoval	cmsat/Subsumer.cpp	/^void Subsumer::blockedClauseRemoval() {$/;"	f	class:Subsumer
checkElimedUnassigned	cmsat/Subsumer.cpp	/^bool Subsumer::checkElimedUnassigned() const {$/;"	f	class:Subsumer
cleanClause	cmsat/Subsumer.cpp	/^bool Subsumer::cleanClause(Clause& ps) {$/;"	f	class:Subsumer
cleanClause	cmsat/Subsumer.cpp	/^bool Subsumer::cleanClause(vec<Lit>& ps) const {$/;"	f	class:Subsumer
clearAll	cmsat/Subsumer.cpp	/^void Subsumer::clearAll() {$/;"	f	class:Subsumer
eliminateVars	cmsat/Subsumer.cpp	/^bool Subsumer::eliminateVars() {$/;"	f	class:Subsumer
extendModel	cmsat/Subsumer.cpp	/^void Subsumer::extendModel(Solver& solver2) {$/;"	f	class:Subsumer
fillCannotEliminate	cmsat/Subsumer.cpp	/^void Subsumer::fillCannotEliminate() {$/;"	f	class:Subsumer
fillClAndBin	cmsat/Subsumer.cpp	/^void Subsumer::fillClAndBin(vec<ClAndBin>& all, vec<ClauseSimp>& cs, const Lit lit) {$/;"	f	class:Subsumer
fillSubs	cmsat/Subsumer.cpp	/^void inline Subsumer::fillSubs(const T& ps, uint32_t abs, vec<ClauseSimp>& out_subsumed, vec<Lit>& out_lits, const Lit lit) {$/;"	f	class:Subsumer
findSubsumed	cmsat/Subsumer.cpp	/^void Subsumer::findSubsumed(const T& ps, uint32_t abs, vec<ClauseSimp>& out_subsumed) {$/;"	f	class:Subsumer
findSubsumed1	cmsat/Subsumer.cpp	/^void Subsumer::findSubsumed1(const T& ps, uint32_t abs, vec<ClauseSimp>& out_subsumed, vec<Lit>& out_lits) {$/;"	f	class:Subsumer
freeMemory	cmsat/Subsumer.cpp	/^void Subsumer::freeMemory() {$/;"	f	class:Subsumer
handleClBinTouched	cmsat/Subsumer.cpp	/^bool Subsumer::handleClBinTouched() {$/;"	f	class:Subsumer
handleSize1Clause	cmsat/Subsumer.cpp	/^inline void Subsumer::handleSize1Clause(const Lit lit) {$/;"	f	class:Subsumer
linkInClause	cmsat/Subsumer.cpp	/^ClauseSimp Subsumer::linkInClause(Clause& cl) {$/;"	f	class:Subsumer
maybeEliminate	cmsat/Subsumer.cpp	/^bool Subsumer::maybeEliminate(const Var var) {$/;"	f	class:Subsumer
merge	cmsat/Subsumer.cpp	/^bool Subsumer::merge(const ClAndBin& ps, const ClAndBin& qs, const Lit without_p, const Lit without_q, vec<Lit>& out_clause) {$/;"	f	class:Subsumer
numNonLearntBins	cmsat/Subsumer.cpp	/^uint32_t Subsumer::numNonLearntBins(const Lit lit) const {$/;"	f	class:Subsumer
orderVarsForElim	cmsat/Subsumer.cpp	/^void Subsumer::orderVarsForElim(vec<Var>& order) {$/;"	f	class:Subsumer
removeAssignedVarsFromEliminated	cmsat/Subsumer.cpp	/^void Subsumer::removeAssignedVarsFromEliminated() {$/;"	f	class:Subsumer
removeClauses	cmsat/Subsumer.cpp	/^void Subsumer::removeClauses(vec<ClAndBin>& posAll, vec<ClAndBin>& negAll, const Var var) {$/;"	f	class:Subsumer
removeClausesHelper	cmsat/Subsumer.cpp	/^void Subsumer::removeClausesHelper(vec<ClAndBin>& todo, const Var var, std::pair<uint32_t, uint32_t>& removed) {$/;"	f	class:Subsumer
removeWrong	cmsat/Subsumer.cpp	/^void Subsumer::removeWrong(vec<Clause*>& cs) {$/;"	f	class:Subsumer
removeWrongBinsAndAllTris	cmsat/Subsumer.cpp	/^void Subsumer::removeWrongBinsAndAllTris() {$/;"	f	class:Subsumer
setLimits	cmsat/Subsumer.cpp	/^void Subsumer::setLimits() {$/;"	f	class:Subsumer
simplifyBySubsumption	cmsat/Subsumer.cpp	/^bool Subsumer::simplifyBySubsumption() {$/;"	f	class:Subsumer
strenghten	cmsat/Subsumer.cpp	/^void Subsumer::strenghten(ClauseSimp& c, const Lit toRemoveLit) {$/;"	f	class:Subsumer
subsume0	cmsat/Subsumer.cpp	/^void Subsumer::subsume0(Clause& ps) {$/;"	f	class:Subsumer
subsume0AndSubsume1	cmsat/Subsumer.cpp	/^bool Subsumer::subsume0AndSubsume1() {$/;"	f	class:Subsumer
subsume0Orig	cmsat/Subsumer.cpp	/^Subsumer::subsume0Happened Subsumer::subsume0Orig(const T& ps, uint32_t abs) {$/;"	f	class:Subsumer
subsume1	cmsat/Subsumer.cpp	/^bool Subsumer::subsume1(vec<Lit>& ps, const bool wasLearnt) {$/;"	f	class:Subsumer
subsume1	cmsat/Subsumer.cpp	/^void Subsumer::subsume1(Clause& ps) {$/;"	f	class:Subsumer
subsumeBinsWithBins	cmsat/Subsumer.cpp	/^void Subsumer::subsumeBinsWithBins() {$/;"	f	class:Subsumer
tryOneSetting	cmsat/Subsumer.cpp	/^bool Subsumer::tryOneSetting(const Lit lit) {$/;"	f	class:Subsumer
unEliminate	cmsat/Subsumer.cpp	/^bool Subsumer::unEliminate(const Var var) {$/;"	f	class:Subsumer
unlinkClause	cmsat/Subsumer.cpp	/^void Subsumer::unlinkClause(ClauseSimp c, const Var elim) {$/;"	f	class:Subsumer
verifyIntegrity	cmsat/Subsumer.cpp	/^bool Subsumer::verifyIntegrity() {$/;"	f	class:Subsumer
BinSorter	cmsat/Subsumer.h	/^        struct BinSorter {$/;"	s	class:CMSat::Subsumer
BinSorter2	cmsat/Subsumer.h	/^        struct BinSorter2 {$/;"	s	class:CMSat::Subsumer
CMSat	cmsat/Subsumer.h	/^namespace CMSat {$/;"	n
ClAndBin	cmsat/Subsumer.h	/^            ClAndBin(ClauseSimp& cl) :$/;"	f	class:CMSat::Subsumer::ClAndBin
ClAndBin	cmsat/Subsumer.h	/^            ClAndBin(const Lit _lit1, const Lit _lit2) :$/;"	f	class:CMSat::Subsumer::ClAndBin
ClAndBin	cmsat/Subsumer.h	/^        class ClAndBin {$/;"	c	class:CMSat::Subsumer
MyComp	cmsat/Subsumer.h	/^        struct MyComp {$/;"	s	class:CMSat::Subsumer
NewBinaryClause	cmsat/Subsumer.h	/^            NewBinaryClause(const Lit _lit1, const Lit _lit2, const bool _learnt) :$/;"	f	class:CMSat::Subsumer::NewBinaryClause
NewBinaryClause	cmsat/Subsumer.h	/^        class NewBinaryClause {$/;"	c	class:CMSat::Subsumer
SIMPLIFIER_H	cmsat/Subsumer.h	23;"	d
Subsumer	cmsat/Subsumer.h	/^    class Subsumer {$/;"	c	namespace:CMSat
TouchList	cmsat/Subsumer.h	/^    class TouchList {$/;"	c	namespace:CMSat
VarOcc	cmsat/Subsumer.h	/^            VarOcc(const Var& v, const uint32_t num) :$/;"	f	class:CMSat::Subsumer::VarOcc
VarOcc	cmsat/Subsumer.h	/^        class VarOcc {$/;"	c	class:CMSat::Subsumer
act	cmsat/Subsumer.h	/^            float act;$/;"	m	struct:CMSat::Subsumer::subsume0Happened
addOne	cmsat/Subsumer.h	/^        void addOne(Var var) {$/;"	f	class:CMSat::TouchList
addedClauseLits	cmsat/Subsumer.h	/^        uint64_t addedClauseLits;$/;"	m	class:CMSat::Subsumer
begin	cmsat/Subsumer.h	/^        vector<Var>::const_iterator begin() const {$/;"	f	class:CMSat::TouchList
cannot_eliminate	cmsat/Subsumer.h	/^        vec<char> cannot_eliminate; \/\/\/<Variables that cannot be eliminated due to, e.g. XOR-clauses$/;"	m	class:CMSat::Subsumer
clBinTouched	cmsat/Subsumer.h	/^        list<NewBinaryClause> clBinTouched; \/\/\/<Binary clauses strengthened\/added$/;"	m	class:CMSat::Subsumer
cl_touched	cmsat/Subsumer.h	/^        CSet cl_touched; \/\/\/<Clauses strengthened\/added$/;"	m	class:CMSat::Subsumer
clauseID	cmsat/Subsumer.h	/^        uint32_t clauseID; \/\/\/<We need to have clauseIDs since clauses don't natively have them. The ClauseID is stored by ClauseSimp, which also stores a pointer to the clause$/;"	m	class:CMSat::Subsumer
clauses	cmsat/Subsumer.h	/^        vec<ClauseSimp> clauses;$/;"	m	class:CMSat::Subsumer
clauses_subsumed	cmsat/Subsumer.h	/^        uint32_t clauses_subsumed; \/\/\/<Number of clauses subsumed in this run$/;"	m	class:CMSat::Subsumer
clear	cmsat/Subsumer.h	/^        void clear() {$/;"	f	class:CMSat::TouchList
clsimp	cmsat/Subsumer.h	/^            ClauseSimp clsimp;$/;"	m	class:CMSat::Subsumer::ClAndBin
doneNum	cmsat/Subsumer.h	/^        uint32_t doneNum;$/;"	m	class:CMSat::Subsumer
elimedOutVar	cmsat/Subsumer.h	/^        map<Var, vector<vector<Lit> > > elimedOutVar; \/\/\/<Contains the clauses to use to uneliminate a variable$/;"	m	class:CMSat::Subsumer
elimedOutVarBin	cmsat/Subsumer.h	/^        map<Var, vector<std::pair<Lit, Lit> > > elimedOutVarBin; \/\/\/<Contains the clauses to use to uneliminate a variable$/;"	m	class:CMSat::Subsumer
end	cmsat/Subsumer.h	/^        vector<Var>::const_iterator end() const {$/;"	f	class:CMSat::TouchList
getElimedOutVar	cmsat/Subsumer.h	/^    inline const map<Var, vector<vector<Lit> > >& Subsumer::getElimedOutVar() const {$/;"	f	class:CMSat::Subsumer
getElimedOutVarBin	cmsat/Subsumer.h	/^    inline const map<Var, vector<std::pair<Lit, Lit> > >& Subsumer::getElimedOutVarBin() const {$/;"	f	class:CMSat::Subsumer
getNumElimed	cmsat/Subsumer.h	/^    inline uint32_t Subsumer::getNumElimed() const {$/;"	f	class:CMSat::Subsumer
getTotalTime	cmsat/Subsumer.h	/^    inline double Subsumer::getTotalTime() const {$/;"	f	class:CMSat::Subsumer
getVarElimed	cmsat/Subsumer.h	/^    inline const vec<char>& Subsumer::getVarElimed() const {$/;"	f	class:CMSat::Subsumer
glue	cmsat/Subsumer.h	/^            uint32_t glue;$/;"	m	struct:CMSat::Subsumer::subsume0Happened
isBin	cmsat/Subsumer.h	/^            bool isBin;$/;"	m	class:CMSat::Subsumer::ClAndBin
iter_sets	cmsat/Subsumer.h	/^        vec<CSet* > iter_sets; \/\/\/<Sets currently used in iterations.$/;"	m	class:CMSat::Subsumer
learnt	cmsat/Subsumer.h	/^            const bool learnt;$/;"	m	class:CMSat::Subsumer::NewBinaryClause
lit1	cmsat/Subsumer.h	/^            Lit lit1;$/;"	m	class:CMSat::Subsumer::ClAndBin
lit1	cmsat/Subsumer.h	/^            const Lit lit1;$/;"	m	class:CMSat::Subsumer::NewBinaryClause
lit2	cmsat/Subsumer.h	/^            Lit lit2;$/;"	m	class:CMSat::Subsumer::ClAndBin
lit2	cmsat/Subsumer.h	/^            const Lit lit2;$/;"	m	class:CMSat::Subsumer::NewBinaryClause
literals_removed	cmsat/Subsumer.h	/^        uint32_t literals_removed; \/\/\/<Number of literals removed from clauses through self-subsuming resolution in this run$/;"	m	class:CMSat::Subsumer
maybeRemove	cmsat/Subsumer.h	/^    void maybeRemove(vec<T>& ws, const T2& elem) {$/;"	f	namespace:CMSat
myComp	cmsat/Subsumer.h	/^        struct myComp {$/;"	s	class:CMSat::Subsumer
newVar	cmsat/Subsumer.h	/^    inline void Subsumer::newVar() {$/;"	f	class:CMSat::Subsumer
numCalls	cmsat/Subsumer.h	/^        uint32_t numCalls; \/\/\/<Number of times simplifyBySubsumption() has been called$/;"	m	class:CMSat::Subsumer
numElimed	cmsat/Subsumer.h	/^        uint32_t numElimed; \/\/\/<Total number of variables eliminated$/;"	m	class:CMSat::Subsumer
numMaxBlockToVisit	cmsat/Subsumer.h	/^        int64_t numMaxBlockToVisit; \/\/\/<Max. number variable-blocking clauses to visit to do this run$/;"	m	class:CMSat::Subsumer
numMaxBlockVars	cmsat/Subsumer.h	/^        uint32_t numMaxBlockVars; \/\/\/<Max. number variable-blocking tries to do this run$/;"	m	class:CMSat::Subsumer
numMaxElim	cmsat/Subsumer.h	/^        int64_t numMaxElim; \/\/\/<Max. number of variable elimination tries to do this run$/;"	m	class:CMSat::Subsumer
numMaxElimVars	cmsat/Subsumer.h	/^        int32_t numMaxElimVars;$/;"	m	class:CMSat::Subsumer
numMaxSubsume0	cmsat/Subsumer.h	/^        int64_t numMaxSubsume0; \/\/\/<Max. number backward-subsumption tries to do this run$/;"	m	class:CMSat::Subsumer
numMaxSubsume1	cmsat/Subsumer.h	/^        int64_t numMaxSubsume1; \/\/\/<Max. number self-subsuming resolution tries to do this run$/;"	m	class:CMSat::Subsumer
numVarsElimed	cmsat/Subsumer.h	/^        uint32_t numVarsElimed; \/\/\/<Number of variables elimed in this run$/;"	m	class:CMSat::Subsumer
numblockedClauseRemoved	cmsat/Subsumer.h	/^        uint32_t numblockedClauseRemoved;$/;"	m	class:CMSat::Subsumer
occur	cmsat/Subsumer.h	/^        vec<vec<ClauseSimp> > occur; \/\/\/<occur[index(lit)]' is a list of constraints containing 'lit'.$/;"	m	class:CMSat::Subsumer
occurnum	cmsat/Subsumer.h	/^            uint32_t occurnum;$/;"	m	class:CMSat::Subsumer::VarOcc
ol_seenNeg	cmsat/Subsumer.h	/^        vec<char> ol_seenNeg;$/;"	m	class:CMSat::Subsumer
ol_seenPos	cmsat/Subsumer.h	/^        vec<char> ol_seenPos;$/;"	m	class:CMSat::Subsumer
operator ()	cmsat/Subsumer.h	/^            bool operator () (const Clause* x, const Clause* y) {$/;"	f	struct:CMSat::Subsumer::sortBySize
operator ()	cmsat/Subsumer.h	/^            bool operator () (const std::pair<int, Var>& x, const std::pair<int, Var>& y) {$/;"	f	struct:CMSat::Subsumer::myComp
operator ()	cmsat/Subsumer.h	/^            bool operator() (const VarOcc& l1, const VarOcc& l2) const {$/;"	f	struct:CMSat::Subsumer::MyComp
operator ()	cmsat/Subsumer.h	/^            bool operator()(const Watched& first, const Watched& second) {$/;"	f	struct:CMSat::Subsumer::BinSorter
operator ()	cmsat/Subsumer.h	/^            bool operator()(const Watched& first, const Watched& second) {$/;"	f	struct:CMSat::Subsumer::BinSorter2
registerIteration	cmsat/Subsumer.h	/^        void registerIteration(CSet& iter_set) {$/;"	f	class:CMSat::Subsumer
resize	cmsat/Subsumer.h	/^        void resize(uint32_t size) {$/;"	f	class:CMSat::TouchList
seen_tmp	cmsat/Subsumer.h	/^        vec<char> seen_tmp; \/\/\/<Used in various places to help perform algorithms$/;"	m	class:CMSat::Subsumer
size	cmsat/Subsumer.h	/^        uint32_t size() const {$/;"	f	class:CMSat::TouchList
solver	cmsat/Subsumer.h	/^        Solver& solver; \/\/\/<The solver this simplifier is connected to$/;"	m	class:CMSat::Subsumer
sortBySize	cmsat/Subsumer.h	/^        struct sortBySize {$/;"	s	class:CMSat::Subsumer
subset	cmsat/Subsumer.h	/^    bool Subsumer::subset(const uint32_t aSize, const T2& B) {$/;"	f	class:CMSat::Subsumer
subset1	cmsat/Subsumer.h	/^    Lit Subsumer::subset1(const T1& A, const T2& B) {$/;"	f	class:CMSat::Subsumer
subsetAbst	cmsat/Subsumer.h	/^    inline bool Subsumer::subsetAbst(const uint32_t A, const uint32_t B) {$/;"	f	class:CMSat::Subsumer
subsume0Happened	cmsat/Subsumer.h	/^        struct subsume0Happened {$/;"	s	class:CMSat::Subsumer
subsumedNonLearnt	cmsat/Subsumer.h	/^            bool subsumedNonLearnt;$/;"	m	struct:CMSat::Subsumer::subsume0Happened
totalTime	cmsat/Subsumer.h	/^        double totalTime; \/\/\/<Total time spent in this class$/;"	m	class:CMSat::Subsumer
touch	cmsat/Subsumer.h	/^        void touch(Lit lit, const bool learnt) {$/;"	f	class:CMSat::TouchList
touch	cmsat/Subsumer.h	/^        void touch(Var var) {$/;"	f	class:CMSat::TouchList
touchBlockedVar	cmsat/Subsumer.h	/^    inline void Subsumer::touchBlockedVar(const Var x) {$/;"	f	class:CMSat::Subsumer
touched	cmsat/Subsumer.h	/^        vector<char> touched;$/;"	m	class:CMSat::TouchList
touchedBlockedVars	cmsat/Subsumer.h	/^        priority_queue<VarOcc, vector<VarOcc>, MyComp> touchedBlockedVars;$/;"	m	class:CMSat::Subsumer
touchedBlockedVarsBool	cmsat/Subsumer.h	/^        vec<char> touchedBlockedVarsBool;$/;"	m	class:CMSat::Subsumer
touchedList	cmsat/Subsumer.h	/^        vector<Var> touchedList;$/;"	m	class:CMSat::TouchList
touchedVars	cmsat/Subsumer.h	/^        TouchList touchedVars; \/\/\/<Is set to true when a variable is part of a removed clause. Also true initially (upon variable creation).$/;"	m	class:CMSat::Subsumer
unregisterIteration	cmsat/Subsumer.h	/^        void unregisterIteration(CSet& iter_set) {$/;"	f	class:CMSat::Subsumer
var	cmsat/Subsumer.h	/^            Var var;$/;"	m	class:CMSat::Subsumer::VarOcc
var_elimed	cmsat/Subsumer.h	/^        vec<char> var_elimed; \/\/\/<Contains TRUE if var has been eliminated$/;"	m	class:CMSat::Subsumer
AddHash	cmsat/UniFunctions.cpp	/^bool UniFunctions::AddHash(uint32_t numClaus, Solver& solver) {$/;"	f	class:UniFunctions
ApproxMC	cmsat/UniFunctions.cpp	/^SATCount UniFunctions::ApproxMC(uint32_t pivot, uint32_t t, Solver &solver,$/;"	f	class:UniFunctions
BoundedSAT	cmsat/UniFunctions.cpp	/^lbool UniFunctions::BoundedSAT(uint32_t maxSolutions, Solver &solver, FILE* res,$/;"	f	class:UniFunctions
BoundedSATCount	cmsat/UniFunctions.cpp	/^uint32_t UniFunctions::BoundedSATCount(uint32_t maxSolutions, Solver &solver, int timeout) {$/;"	f	class:UniFunctions
GenerateRandomBits	cmsat/UniFunctions.cpp	/^bool UniFunctions::GenerateRandomBits(string &randomBits, uint32_t size) {$/;"	f	class:UniFunctions
GenerateRandomNum	cmsat/UniFunctions.cpp	/^int UniFunctions::GenerateRandomNum(int maxRange) {$/;"	f	class:UniFunctions
UniGen	cmsat/UniFunctions.cpp	/^uint32_t UniFunctions::UniGen(uint32_t pivot, uint32_t startIteration, uint32_t samples, Solver &solver, FILE* res, bool printResult, FILE* resLog, bool shouldLog) {$/;"	f	class:UniFunctions
binary	cmsat/UniFunctions.cpp	/^std::string binary(int x, uint32_t length) {$/;"	f
findMean	cmsat/UniFunctions.cpp	/^double findMean(list<int> numList) {$/;"	f
findMedian	cmsat/UniFunctions.cpp	/^double findMedian(list<int> numList) {$/;"	f
findMin	cmsat/UniFunctions.cpp	/^int findMin(list<int> numList) {$/;"	f
printResultFunc	cmsat/UniFunctions.cpp	/^void UniFunctions::printResultFunc(Solver &S, vec<lbool> solutionModel, const lbool ret, FILE* res, bool printResult) {$/;"	f	class:UniFunctions
CMSat	cmsat/UniFunctions.h	/^namespace CMSat {$/;"	n
UNIFUNCTIONS_H	cmsat/UniFunctions.h	10;"	d
UniFunctions	cmsat/UniFunctions.h	/^    class UniFunctions {$/;"	c	namespace:CMSat
EXTRATIME_DIVIDER	cmsat/UselessBinRemover.cpp	43;"	d	file:
MAX_REMOVE_BIN_FULL_PROPS	cmsat/UselessBinRemover.cpp	39;"	d	file:
UselessBinRemover	cmsat/UselessBinRemover.cpp	/^UselessBinRemover::UselessBinRemover(Solver& _solver) :$/;"	f	class:UselessBinRemover
fillBinImpliesMinusLast	cmsat/UselessBinRemover.cpp	/^bool UselessBinRemover::fillBinImpliesMinusLast(const Lit origLit, const Lit lit, vec<Lit>& wrong) {$/;"	f	class:UselessBinRemover
removeBin	cmsat/UselessBinRemover.cpp	/^void UselessBinRemover::removeBin(const Lit lit1, const Lit lit2) {$/;"	f	class:UselessBinRemover
removeUselessBinaries	cmsat/UselessBinRemover.cpp	/^bool UselessBinRemover::removeUselessBinaries(const Lit lit) {$/;"	f	class:UselessBinRemover
removeUslessBinFull	cmsat/UselessBinRemover.cpp	/^bool UselessBinRemover::removeUslessBinFull() {$/;"	f	class:UselessBinRemover
CMSat	cmsat/UselessBinRemover.h	/^namespace CMSat {$/;"	n
USELESSBINREMOVER_H	cmsat/UselessBinRemover.h	23;"	d
UselessBinRemover	cmsat/UselessBinRemover.h	/^    class UselessBinRemover {$/;"	c	namespace:CMSat
extraTime	cmsat/UselessBinRemover.h	/^        uint32_t extraTime; \/\/\/<Time that cannot be meausured in bogoprops (~propagation time)$/;"	m	class:CMSat::UselessBinRemover
failed	cmsat/UselessBinRemover.h	/^        bool failed; \/\/\/<Has the previous propagation failed? (=conflict)$/;"	m	class:CMSat::UselessBinRemover
oneHopAway	cmsat/UselessBinRemover.h	/^        vec<Lit> oneHopAway; \/\/\/<Lits that are one hop away from selected lit (sometimes called origLit)$/;"	m	class:CMSat::UselessBinRemover
solver	cmsat/UselessBinRemover.h	/^        Solver& solver; \/\/\/<The solver class e want to remove useless binary clauses from$/;"	m	class:CMSat::UselessBinRemover
toDeleteSet	cmsat/UselessBinRemover.h	/^        vec<char> toDeleteSet;$/;"	m	class:CMSat::UselessBinRemover
wrong	cmsat/UselessBinRemover.h	/^        vec<Lit> wrong;$/;"	m	class:CMSat::UselessBinRemover
VarReplacer	cmsat/VarReplacer.cpp	/^VarReplacer::VarReplacer(Solver& _solver) :$/;"	f	class:VarReplacer
addBinaryXorClause	cmsat/VarReplacer.cpp	/^void VarReplacer::addBinaryXorClause(Lit lit1, Lit lit2, const bool addBinAsLearnt) {$/;"	f	class:VarReplacer
alreadyIn	cmsat/VarReplacer.cpp	/^bool VarReplacer::alreadyIn(const Var var, const Lit lit) {$/;"	f	class:VarReplacer
extendModelImpossible	cmsat/VarReplacer.cpp	/^void VarReplacer::extendModelImpossible(Solver& solver2) const {$/;"	f	class:VarReplacer
extendModelPossible	cmsat/VarReplacer.cpp	/^void VarReplacer::extendModelPossible() const {$/;"	f	class:VarReplacer
getReplacingVars	cmsat/VarReplacer.cpp	/^vector<Var> VarReplacer::getReplacingVars() const {$/;"	f	class:VarReplacer
handleUpdatedClause	cmsat/VarReplacer.cpp	/^bool VarReplacer::handleUpdatedClause(Clause& c, const Lit origLit1, const Lit origLit2, const Lit origLit3) {$/;"	f	class:VarReplacer
handleUpdatedClause	cmsat/VarReplacer.cpp	/^bool VarReplacer::handleUpdatedClause(XorClause& c, const Var origVar1, const Var origVar2) {$/;"	f	class:VarReplacer
newVar	cmsat/VarReplacer.cpp	/^void VarReplacer::newVar() {$/;"	f	class:VarReplacer
performReplaceInternal	cmsat/VarReplacer.cpp	/^bool VarReplacer::performReplaceInternal() {$/;"	f	class:VarReplacer
replace	cmsat/VarReplacer.cpp	/^bool VarReplacer::replace(T& ps, const bool xorEqualFalse, const bool addBinAsLearnt, const bool addToWatchLists) {$/;"	f	class:VarReplacer
replaceBins	cmsat/VarReplacer.cpp	/^bool VarReplacer::replaceBins() {$/;"	f	class:VarReplacer
replace_set	cmsat/VarReplacer.cpp	/^bool VarReplacer::replace_set(vec<Clause*>& cs) {$/;"	f	class:VarReplacer
replace_set	cmsat/VarReplacer.cpp	/^bool VarReplacer::replace_set(vec<XorClause*>& cs) {$/;"	f	class:VarReplacer
setAllThatPointsHereTo	cmsat/VarReplacer.cpp	/^void VarReplacer::setAllThatPointsHereTo(const Var var, const Lit lit) {$/;"	f	class:VarReplacer
~VarReplacer	cmsat/VarReplacer.cpp	/^VarReplacer::~VarReplacer() {$/;"	f	class:VarReplacer
CMSat	cmsat/VarReplacer.h	/^namespace CMSat {$/;"	n
VARREPLACER_H	cmsat/VarReplacer.h	23;"	d
VarReplacer	cmsat/VarReplacer.h	/^    class VarReplacer {$/;"	c	namespace:CMSat
cannot_eliminate	cmsat/VarReplacer.h	/^        vec<char> cannot_eliminate;$/;"	m	class:CMSat::VarReplacer
getNewToReplaceVars	cmsat/VarReplacer.h	/^    inline uint32_t VarReplacer::getNewToReplaceVars() const {$/;"	f	class:CMSat::VarReplacer
getNumLastReplacedVars	cmsat/VarReplacer.h	/^    inline uint32_t VarReplacer::getNumLastReplacedVars() const {$/;"	f	class:CMSat::VarReplacer
getNumReplacedLits	cmsat/VarReplacer.h	/^    inline uint32_t VarReplacer::getNumReplacedLits() const {$/;"	f	class:CMSat::VarReplacer
getNumReplacedVars	cmsat/VarReplacer.h	/^    inline uint32_t VarReplacer::getNumReplacedVars() const {$/;"	f	class:CMSat::VarReplacer
getNumTrees	cmsat/VarReplacer.h	/^    inline uint32_t VarReplacer::getNumTrees() const {$/;"	f	class:CMSat::VarReplacer
getReplaceTable	cmsat/VarReplacer.h	/^    inline const vector<Lit>& VarReplacer::getReplaceTable() const {$/;"	f	class:CMSat::VarReplacer
lastReplacedVars	cmsat/VarReplacer.h	/^        uint32_t lastReplacedVars; \/\/\/<Last time performReplace() was called, "replacedVars" contained this$/;"	m	class:CMSat::VarReplacer
needsReplace	cmsat/VarReplacer.h	/^    inline bool VarReplacer::needsReplace() {$/;"	f	class:CMSat::VarReplacer
performReplace	cmsat/VarReplacer.h	/^    inline bool VarReplacer::performReplace(const bool always) {$/;"	f	class:CMSat::VarReplacer
replacedLits	cmsat/VarReplacer.h	/^        uint32_t replacedLits; \/\/\/<Num literals replaced during var-replacement$/;"	m	class:CMSat::VarReplacer
replacedVars	cmsat/VarReplacer.h	/^        uint32_t replacedVars; \/\/\/<Num vars replaced during var-replacement$/;"	m	class:CMSat::VarReplacer
replacingVar	cmsat/VarReplacer.h	/^    inline bool VarReplacer::replacingVar(const Var var) const {$/;"	f	class:CMSat::VarReplacer
reverseTable	cmsat/VarReplacer.h	/^        map<Var, vector<Var> > reverseTable; \/\/\/<mapping of variable to set of variables it replaces$/;"	m	class:CMSat::VarReplacer
solver	cmsat/VarReplacer.h	/^        Solver& solver; \/\/\/<The solver we are working with$/;"	m	class:CMSat::VarReplacer
table	cmsat/VarReplacer.h	/^        vector<Lit> table; \/\/\/<Stores which variables have been replaced by which literals. Index by: table[VAR]$/;"	m	class:CMSat::VarReplacer
varHasBeenReplaced	cmsat/VarReplacer.h	/^    inline bool VarReplacer::varHasBeenReplaced(const Var var) const {$/;"	f	class:CMSat::VarReplacer
CMSat	cmsat/Vec.h	/^namespace CMSat {$/;"	n
Datum	cmsat/Vec.h	/^        typedef T Datum;$/;"	t	class:CMSat::vec
Key	cmsat/Vec.h	/^        typedef uint32_t Key;$/;"	t	class:CMSat::vec
VEC_H	cmsat/Vec.h	23;"	d
cap	cmsat/Vec.h	/^        uint32_t cap;$/;"	m	class:CMSat::vec
capacity	cmsat/Vec.h	/^        void capacity(uint32_t size) {$/;"	f	class:CMSat::vec
clear	cmsat/Vec.h	/^    void vec<T>::clear(bool dealloc) {$/;"	f	class:CMSat::vec
const_iterator	cmsat/Vec.h	/^        typedef const T* const_iterator;$/;"	t	class:CMSat::vec
copyTo	cmsat/Vec.h	/^        void copyTo(vec<T>& copy) const {$/;"	f	class:CMSat::vec
data	cmsat/Vec.h	/^        T* data;$/;"	m	class:CMSat::vec
empty	cmsat/Vec.h	/^        bool empty() const {$/;"	f	class:CMSat::vec
getData	cmsat/Vec.h	/^        T* getData() {$/;"	f	class:CMSat::vec
getData	cmsat/Vec.h	/^        const T* getData() const {$/;"	f	class:CMSat::vec
getDataEnd	cmsat/Vec.h	/^        T* getDataEnd() {$/;"	f	class:CMSat::vec
getDataEnd	cmsat/Vec.h	/^        const T* getDataEnd() const {$/;"	f	class:CMSat::vec
grow	cmsat/Vec.h	/^    void vec<T>::grow(uint32_t min_cap) {$/;"	f	class:CMSat::vec
growTo	cmsat/Vec.h	/^    void vec<T>::growTo(uint32_t size) {$/;"	f	class:CMSat::vec
growTo	cmsat/Vec.h	/^    void vec<T>::growTo(uint32_t size, const T& pad) {$/;"	f	class:CMSat::vec
imax	cmsat/Vec.h	/^        static inline uint32_t imax(int x, int y) {$/;"	f	class:CMSat::vec
iterator	cmsat/Vec.h	/^        typedef T* iterator;$/;"	t	class:CMSat::vec
last	cmsat/Vec.h	/^        T& last(void) {$/;"	f	class:CMSat::vec
last	cmsat/Vec.h	/^        const T& last(void) const {$/;"	f	class:CMSat::vec
moveTo	cmsat/Vec.h	/^        void moveTo(vec<T>& dest) {$/;"	f	class:CMSat::vec
myCopy	cmsat/Vec.h	/^    void vec<T>::myCopy(const vec<T>& other) {$/;"	f	class:CMSat::vec
operator =	cmsat/Vec.h	/^        vec<T>& operator =(vec<T>& other) {$/;"	f	class:CMSat::vec
operator []	cmsat/Vec.h	/^        T& operator [] (uint32_t index) {$/;"	f	class:CMSat::vec
operator []	cmsat/Vec.h	/^        const T& operator [] (uint32_t index) const {$/;"	f	class:CMSat::vec
pop	cmsat/Vec.h	/^        void pop(void) {$/;"	f	class:CMSat::vec
push	cmsat/Vec.h	/^        void push(const T& elem) {$/;"	f	class:CMSat::vec
push	cmsat/Vec.h	/^        void push(void) {$/;"	f	class:CMSat::vec
push_	cmsat/Vec.h	/^        void push_(const T& elem) {$/;"	f	class:CMSat::vec
release	cmsat/Vec.h	/^        T* release(void) {$/;"	f	class:CMSat::vec
reserve	cmsat/Vec.h	/^        void reserve(uint32_t res) {$/;"	f	class:CMSat::vec
shrink	cmsat/Vec.h	/^        void shrink(uint32_t nelems) {$/;"	f	class:CMSat::vec
shrink_	cmsat/Vec.h	/^        void shrink_(uint32_t nelems) {$/;"	f	class:CMSat::vec
size	cmsat/Vec.h	/^        uint32_t size(void) const {$/;"	f	class:CMSat::vec
sz	cmsat/Vec.h	/^        uint32_t sz;$/;"	m	class:CMSat::vec
vec	cmsat/Vec.h	/^        vec(T* array, uint32_t size) : data(array), sz(size), cap(size) {$/;"	f	class:CMSat::vec
vec	cmsat/Vec.h	/^        vec(const vec<T>& other) : data(NULL), sz(0), cap(0) {$/;"	f	class:CMSat::vec
vec	cmsat/Vec.h	/^        vec(uint32_t size) : data(NULL), sz(0), cap(0) {$/;"	f	class:CMSat::vec
vec	cmsat/Vec.h	/^        vec(uint32_t size, const T& pad) : data(NULL), sz(0), cap(0) {$/;"	f	class:CMSat::vec
vec	cmsat/Vec.h	/^        vec(void) : data(NULL), sz(0), cap(0) {$/;"	f	class:CMSat::vec
vec	cmsat/Vec.h	/^    template<class T> class vec {$/;"	c	namespace:CMSat
~vec	cmsat/Vec.h	/^        ~vec(void) {$/;"	f	class:CMSat::vec
CMSat	cmsat/Watched.h	/^namespace CMSat {$/;"	n
WATCHED_H	cmsat/Watched.h	23;"	d
Watched	cmsat/Watched.h	/^        Watched() :$/;"	f	class:CMSat::Watched
Watched	cmsat/Watched.h	/^        Watched(const ClauseOffset offset) {$/;"	f	class:CMSat::Watched
Watched	cmsat/Watched.h	/^        Watched(const ClauseOffset offset, Lit blockedLit) {$/;"	f	class:CMSat::Watched
Watched	cmsat/Watched.h	/^        Watched(const Lit lit, const bool learnt) {$/;"	f	class:CMSat::Watched
Watched	cmsat/Watched.h	/^        Watched(const Lit lit1, const Lit lit2) {$/;"	f	class:CMSat::Watched
Watched	cmsat/Watched.h	/^    class Watched {$/;"	c	namespace:CMSat
WatchedSorter	cmsat/Watched.h	/^    struct WatchedSorter {$/;"	s	namespace:CMSat
data1	cmsat/Watched.h	/^        uint32_t data1;$/;"	m	class:CMSat::Watched
data1AsLit	cmsat/Watched.h	/^        Lit data1AsLit() const {$/;"	f	class:CMSat::Watched
data2	cmsat/Watched.h	/^        uint32_t data2;$/;"	m	class:CMSat::Watched
data2AsLit	cmsat/Watched.h	/^        Lit data2AsLit() const {$/;"	f	class:CMSat::Watched
dump	cmsat/Watched.h	/^        void dump(FILE* outfile, const Lit lit) const {$/;"	f	class:CMSat::Watched
getBlockedLit	cmsat/Watched.h	/^        Lit getBlockedLit() const {$/;"	f	class:CMSat::Watched
getLearnt	cmsat/Watched.h	/^        bool getLearnt() const {$/;"	f	class:CMSat::Watched
getNormOffset	cmsat/Watched.h	/^        ClauseOffset getNormOffset() const {$/;"	f	class:CMSat::Watched
getOtherLit	cmsat/Watched.h	/^        Lit getOtherLit() const {$/;"	f	class:CMSat::Watched
getOtherLit2	cmsat/Watched.h	/^        Lit getOtherLit2() const {$/;"	f	class:CMSat::Watched
getXorOffset	cmsat/Watched.h	/^        ClauseOffset getXorOffset() const {$/;"	f	class:CMSat::Watched
glue	cmsat/Watched.h	/^        int glue;$/;"	m	class:CMSat::Watched
isBinary	cmsat/Watched.h	/^        bool isBinary() const {$/;"	f	class:CMSat::Watched
isClause	cmsat/Watched.h	/^        bool isClause() const {$/;"	f	class:CMSat::Watched
isNonLearntBinary	cmsat/Watched.h	/^        bool isNonLearntBinary() const {$/;"	f	class:CMSat::Watched
isTriClause	cmsat/Watched.h	/^        bool isTriClause() const {$/;"	f	class:CMSat::Watched
isXorClause	cmsat/Watched.h	/^        bool isXorClause() const {$/;"	f	class:CMSat::Watched
operator ()	cmsat/Watched.h	/^    inline bool WatchedSorter::operator () (const Watched& x, const Watched& y) {$/;"	f	class:CMSat::WatchedSorter
setBlockedLit	cmsat/Watched.h	/^        void setBlockedLit(const Lit lit) {$/;"	f	class:CMSat::Watched
setLearnt	cmsat/Watched.h	/^        void setLearnt(const bool learnt) {$/;"	f	class:CMSat::Watched
setNormClause	cmsat/Watched.h	/^        void setNormClause() {$/;"	f	class:CMSat::Watched
setNormOffset	cmsat/Watched.h	/^        void setNormOffset(const ClauseOffset offset) {$/;"	f	class:CMSat::Watched
setOtherLit	cmsat/Watched.h	/^        void setOtherLit(const Lit lit) {$/;"	f	class:CMSat::Watched
setXorOffset	cmsat/Watched.h	/^        void setXorOffset(const ClauseOffset offset) {$/;"	f	class:CMSat::Watched
CMSat	cmsat/XSet.h	/^namespace CMSat {$/;"	n
XSET_H	cmsat/XSet.h	23;"	d
XSet	cmsat/XSet.h	/^    class XSet {$/;"	c	namespace:CMSat
XorClauseSimp	cmsat/XSet.h	/^        XorClauseSimp(XorClause* c, const uint32_t _index) :$/;"	f	class:CMSat::XorClauseSimp
XorClauseSimp	cmsat/XSet.h	/^    class XorClauseSimp {$/;"	c	namespace:CMSat
add	cmsat/XSet.h	/^        bool add(const XorClauseSimp& c) {$/;"	f	class:CMSat::XSet
begin	cmsat/XSet.h	/^        iterator begin() {$/;"	f	class:CMSat::XSet
calcXorAbstraction	cmsat/XSet.h	/^    uint32_t calcXorAbstraction(const T& ps) {$/;"	f	namespace:CMSat
clause	cmsat/XSet.h	/^        XorClause* clause;$/;"	m	class:CMSat::XorClauseSimp
clear	cmsat/XSet.h	/^        void clear(void) {$/;"	f	class:CMSat::XSet
end	cmsat/XSet.h	/^        iterator end() {$/;"	f	class:CMSat::XSet
exclude	cmsat/XSet.h	/^        bool exclude(const XorClauseSimp& c) {$/;"	f	class:CMSat::XSet
free	cmsat/XSet.h	/^        vec<uint32_t> free; \/\/ List of positions holding 'Clause_NULL'.$/;"	m	class:CMSat::XSet
index	cmsat/XSet.h	/^        uint32_t index;$/;"	m	class:CMSat::XorClauseSimp
it	cmsat/XSet.h	/^            XorClauseSimp* it;$/;"	m	class:CMSat::XSet::iterator
iterator	cmsat/XSet.h	/^            iterator(XorClauseSimp* _it) :$/;"	f	class:CMSat::XSet::iterator
iterator	cmsat/XSet.h	/^        class iterator {$/;"	c	class:CMSat::XSet
nElems	cmsat/XSet.h	/^        uint32_t nElems(void) const {$/;"	f	class:CMSat::XSet
operator !=	cmsat/XSet.h	/^            bool operator!=(const iterator& iter) const {$/;"	f	class:CMSat::XSet::iterator
operator *	cmsat/XSet.h	/^            XorClauseSimp& operator*() {$/;"	f	class:CMSat::XSet::iterator
operator ++	cmsat/XSet.h	/^            void operator++() {$/;"	f	class:CMSat::XSet::iterator
operator ->	cmsat/XSet.h	/^            XorClauseSimp*& operator->() {$/;"	f	class:CMSat::XSet::iterator
reserve	cmsat/XSet.h	/^        void reserve(uint32_t size) {$/;"	f	class:CMSat::XSet
size	cmsat/XSet.h	/^        uint32_t size(void) const {$/;"	f	class:CMSat::XSet
where	cmsat/XSet.h	/^        vec<uint32_t> where; \/\/ Map clause ID to position in 'which'.$/;"	m	class:CMSat::XSet
which	cmsat/XSet.h	/^        vec<XorClauseSimp> which; \/\/ List of clauses (for fast iteration). May contain 'Clause_NULL'.$/;"	m	class:CMSat::XSet
XorFinder	cmsat/XorFinder.cpp	/^XorFinder::XorFinder(Solver& _solver, vec<Clause*>& _cls) :$/;"	f	class:XorFinder
addAllXorAsNorm	cmsat/XorFinder.cpp	/^void XorFinder::addAllXorAsNorm() {$/;"	f	class:XorFinder
addXorAsNormal3	cmsat/XorFinder.cpp	/^void XorFinder::addXorAsNormal3(XorClause& c) {$/;"	f	class:XorFinder
addXorAsNormal4	cmsat/XorFinder.cpp	/^void XorFinder::addXorAsNormal4(XorClause& c) {$/;"	f	class:XorFinder
clauseEqual	cmsat/XorFinder.cpp	/^bool XorFinder::clauseEqual(const Clause& c1, const Clause& c2) const {$/;"	f	class:XorFinder
countImpairs	cmsat/XorFinder.cpp	/^void XorFinder::countImpairs(const ClauseTable::iterator& begin, const ClauseTable::iterator& end, uint32_t& numImpair, uint32_t& numPair) const {$/;"	f	class:XorFinder
findXors	cmsat/XorFinder.cpp	/^bool XorFinder::findXors(uint32_t& sumLengths) {$/;"	f	class:XorFinder
fullFindXors	cmsat/XorFinder.cpp	/^bool XorFinder::fullFindXors(const uint32_t minSize, const uint32_t maxSize) {$/;"	f	class:XorFinder
getNextXor	cmsat/XorFinder.cpp	/^bool XorFinder::getNextXor(ClauseTable::iterator& begin, ClauseTable::iterator& end, bool& impair) {$/;"	f	class:XorFinder
impairSigns	cmsat/XorFinder.cpp	/^bool XorFinder::impairSigns(const Clause& c) const {$/;"	f	class:XorFinder
isXor	cmsat/XorFinder.cpp	/^bool XorFinder::isXor(const uint32_t size, const ClauseTable::iterator& begin, const ClauseTable::iterator& end, bool& impair) {$/;"	f	class:XorFinder
CMSat	cmsat/XorFinder.h	/^namespace CMSat {$/;"	n
ClauseTable	cmsat/XorFinder.h	/^        typedef vector<pair<Clause*, uint32_t> > ClauseTable;$/;"	t	class:CMSat::XorFinder
DEBUG_XORFIND	cmsat/XorFinder.h	26;"	d
XORFINDER_H	cmsat/XorFinder.h	23;"	d
XorFinder	cmsat/XorFinder.h	/^    class XorFinder {$/;"	c	namespace:CMSat
a	cmsat/XorFinder.h	/^            Lit const *a;$/;"	m	struct:CMSat::XorFinder::clause_sorter_primary
b	cmsat/XorFinder.h	/^            Lit const *b;$/;"	m	struct:CMSat::XorFinder::clause_sorter_primary
clause_sorter_primary	cmsat/XorFinder.h	/^        struct clause_sorter_primary {$/;"	s	class:CMSat::XorFinder
clause_sorter_secondary	cmsat/XorFinder.h	/^        struct clause_sorter_secondary {$/;"	s	class:CMSat::XorFinder
clause_vareq	cmsat/XorFinder.h	/^        bool clause_vareq(const Clause* c1, const Clause* c2) const {$/;"	f	class:CMSat::XorFinder
cls	cmsat/XorFinder.h	/^        vec<Clause*>& cls;$/;"	m	class:CMSat::XorFinder
end	cmsat/XorFinder.h	/^            Lit const *end;$/;"	m	struct:CMSat::XorFinder::clause_sorter_primary
foundXors	cmsat/XorFinder.h	/^        uint32_t foundXors;$/;"	m	class:CMSat::XorFinder
operator ()	cmsat/XorFinder.h	/^            bool operator()(const pair<Clause*, uint32_t>& c11, const pair<Clause*, uint32_t>& c22) const {$/;"	f	struct:CMSat::XorFinder::clause_sorter_secondary
operator ()	cmsat/XorFinder.h	/^            bool operator()(const pair<Clause*, uint32_t>& c11, const pair<Clause*, uint32_t>& c22) {$/;"	f	struct:CMSat::XorFinder::clause_sorter_primary
solver	cmsat/XorFinder.h	/^        Solver& solver;$/;"	m	class:CMSat::XorFinder
table	cmsat/XorFinder.h	/^        ClauseTable table;$/;"	m	class:CMSat::XorFinder
toLeaveInPlace	cmsat/XorFinder.h	/^        vector<bool> toLeaveInPlace;$/;"	m	class:CMSat::XorFinder
toRemove	cmsat/XorFinder.h	/^        vector<bool> toRemove;$/;"	m	class:CMSat::XorFinder
BIT_MORE_VERBOSITY	cmsat/XorSubsumer.cpp	33;"	d	file:
VERBOSE_DEBUGSUBSUME0	cmsat/XorSubsumer.cpp	32;"	d	file:
XorSubsumer	cmsat/XorSubsumer.cpp	/^XorSubsumer::XorSubsumer(Solver& s) :$/;"	f	class:XorSubsumer
addBackToSolver	cmsat/XorSubsumer.cpp	/^void XorSubsumer::addBackToSolver() {$/;"	f	class:XorSubsumer
addFromSolver	cmsat/XorSubsumer.cpp	/^void XorSubsumer::addFromSolver(vec<XorClause*>& cs) {$/;"	f	class:XorSubsumer
addToCannotEliminate	cmsat/XorSubsumer.cpp	/^inline void XorSubsumer::addToCannotEliminate(Clause* it) {$/;"	f	class:XorSubsumer
checkElimedUnassigned	cmsat/XorSubsumer.cpp	/^bool XorSubsumer::checkElimedUnassigned() const {$/;"	f	class:XorSubsumer
extendModel	cmsat/XorSubsumer.cpp	/^void XorSubsumer::extendModel(Solver& solver2) {$/;"	f	class:XorSubsumer
fillCannotEliminate	cmsat/XorSubsumer.cpp	/^void XorSubsumer::fillCannotEliminate() {$/;"	f	class:XorSubsumer
findSubsumed	cmsat/XorSubsumer.cpp	/^void XorSubsumer::findSubsumed(XorClause& ps, vec<XorClauseSimp>& out_subsumed) {$/;"	f	class:XorSubsumer
findUnMatched	cmsat/XorSubsumer.cpp	/^void XorSubsumer::findUnMatched(const T& A, const T& B, vec<Lit>& unmatchedPart) {$/;"	f	class:XorSubsumer
linkInAlreadyClause	cmsat/XorSubsumer.cpp	/^void XorSubsumer::linkInAlreadyClause(XorClauseSimp& c) {$/;"	f	class:XorSubsumer
linkInClause	cmsat/XorSubsumer.cpp	/^XorClauseSimp XorSubsumer::linkInClause(XorClause& cl) {$/;"	f	class:XorSubsumer
localSubstitute	cmsat/XorSubsumer.cpp	/^bool XorSubsumer::localSubstitute() {$/;"	f	class:XorSubsumer
removeAssignedVarsFromEliminated	cmsat/XorSubsumer.cpp	/^void XorSubsumer::removeAssignedVarsFromEliminated() {$/;"	f	class:XorSubsumer
removeDependent	cmsat/XorSubsumer.cpp	/^bool XorSubsumer::removeDependent() {$/;"	f	class:XorSubsumer
removeWrong	cmsat/XorSubsumer.cpp	/^void XorSubsumer::removeWrong(vec<Clause*>& cs) {$/;"	f	class:XorSubsumer
removeWrongBins	cmsat/XorSubsumer.cpp	/^void XorSubsumer::removeWrongBins() {$/;"	f	class:XorSubsumer
simplifyBySubsumption	cmsat/XorSubsumer.cpp	/^bool XorSubsumer::simplifyBySubsumption() {$/;"	f	class:XorSubsumer
subsume0	cmsat/XorSubsumer.cpp	/^void XorSubsumer::subsume0(XorClauseSimp ps) {$/;"	f	class:XorSubsumer
unEliminate	cmsat/XorSubsumer.cpp	/^bool XorSubsumer::unEliminate(const Var var) {$/;"	f	class:XorSubsumer
unlinkClause	cmsat/XorSubsumer.cpp	/^void XorSubsumer::unlinkClause(XorClauseSimp c, const Var elim) {$/;"	f	class:XorSubsumer
unlinkModifiedClause	cmsat/XorSubsumer.cpp	/^void XorSubsumer::unlinkModifiedClause(vec<Lit>& origClause, XorClauseSimp c) {$/;"	f	class:XorSubsumer
unlinkModifiedClauseNoDetachNoNULL	cmsat/XorSubsumer.cpp	/^void XorSubsumer::unlinkModifiedClauseNoDetachNoNULL(vec<Lit>& origClause, XorClauseSimp c) {$/;"	f	class:XorSubsumer
xorTwoClauses	cmsat/XorSubsumer.cpp	/^void XorSubsumer::xorTwoClauses(const T& c1, const T& c2, vec<Lit>& xored) {$/;"	f	class:XorSubsumer
CMSat	cmsat/XorSubsumer.h	/^namespace CMSat {$/;"	n
XORSIMPLIFIER_H	cmsat/XorSubsumer.h	23;"	d
XorElimedClause	cmsat/XorSubsumer.h	/^        struct XorElimedClause {$/;"	s	class:CMSat::XorSubsumer
XorSubsumer	cmsat/XorSubsumer.h	/^    class XorSubsumer {$/;"	c	namespace:CMSat
cannot_eliminate	cmsat/XorSubsumer.h	/^        vec<char> cannot_eliminate;$/;"	m	class:CMSat::XorSubsumer
clauseID	cmsat/XorSubsumer.h	/^        uint32_t clauseID;$/;"	m	class:CMSat::XorSubsumer
clauses	cmsat/XorSubsumer.h	/^        vec<XorClauseSimp> clauses;$/;"	m	class:CMSat::XorSubsumer
clauses_cut	cmsat/XorSubsumer.h	/^        uint32_t clauses_cut;$/;"	m	class:CMSat::XorSubsumer
clauses_subsumed	cmsat/XorSubsumer.h	/^        uint32_t clauses_subsumed;$/;"	m	class:CMSat::XorSubsumer
elimedOutVar	cmsat/XorSubsumer.h	/^        map<Var, vector<XorElimedClause> > elimedOutVar;$/;"	m	class:CMSat::XorSubsumer
getElimedOutVar	cmsat/XorSubsumer.h	/^    inline const map<Var, vector<XorSubsumer::XorElimedClause> >& XorSubsumer::getElimedOutVar() const {$/;"	f	class:CMSat::XorSubsumer
getNumElimed	cmsat/XorSubsumer.h	/^    inline uint32_t XorSubsumer::getNumElimed() const {$/;"	f	class:CMSat::XorSubsumer
getTotalTime	cmsat/XorSubsumer.h	/^    inline double XorSubsumer::getTotalTime() const {$/;"	f	class:CMSat::XorSubsumer
getVarElimed	cmsat/XorSubsumer.h	/^    inline const vec<char>& XorSubsumer::getVarElimed() const {$/;"	f	class:CMSat::XorSubsumer
lits	cmsat/XorSubsumer.h	/^            vector<Lit> lits;$/;"	m	struct:CMSat::XorSubsumer::XorElimedClause
localSubstituteUseful	cmsat/XorSubsumer.h	/^        uint32_t localSubstituteUseful;$/;"	m	class:CMSat::XorSubsumer
newVar	cmsat/XorSubsumer.h	/^    inline void XorSubsumer::newVar() {$/;"	f	class:CMSat::XorSubsumer
numElimed	cmsat/XorSubsumer.h	/^        uint32_t numElimed;$/;"	m	class:CMSat::XorSubsumer
occur	cmsat/XorSubsumer.h	/^        vec<vec<XorClauseSimp> > occur; \/\/ 'occur[index(lit)]' is a list of constraints containing 'lit'.$/;"	m	class:CMSat::XorSubsumer
origNClauses	cmsat/XorSubsumer.h	/^        uint32_t origNClauses;$/;"	m	class:CMSat::XorSubsumer
plainPrint	cmsat/XorSubsumer.h	/^            void plainPrint(FILE* to = stdout) const {$/;"	f	struct:CMSat::XorSubsumer::XorElimedClause
seen_tmp	cmsat/XorSubsumer.h	/^        vec<char> seen_tmp; \/\/ (used in various places)$/;"	m	class:CMSat::XorSubsumer
solver	cmsat/XorSubsumer.h	/^        Solver& solver; \/\/ The Solver$/;"	m	class:CMSat::XorSubsumer
subset	cmsat/XorSubsumer.h	/^    bool XorSubsumer::subset(const T1& A, const T2& B) {$/;"	f	class:CMSat::XorSubsumer
subsetAbst	cmsat/XorSubsumer.h	/^    inline bool XorSubsumer::subsetAbst(uint32_t A, uint32_t B) {$/;"	f	class:CMSat::XorSubsumer
totalTime	cmsat/XorSubsumer.h	/^        double totalTime;$/;"	m	class:CMSat::XorSubsumer
var_elimed	cmsat/XorSubsumer.h	/^        vec<char> var_elimed;$/;"	m	class:CMSat::XorSubsumer
xorEqualFalse	cmsat/XorSubsumer.h	/^            bool xorEqualFalse;$/;"	m	struct:CMSat::XorSubsumer::XorElimedClause
BINARY_TO_XOR_APPROX	cmsat/constants.h	54;"	d
BURST_SEARCH	cmsat/constants.h	62;"	d
DEBUG_ATTACH	cmsat/constants.h	115;"	d
DEBUG_ATTACH_FULL	cmsat/constants.h	123;"	d
DEBUG_ATTACH_FULL	cmsat/constants.h	99;"	d
DEBUG_FAILEDLIT	cmsat/constants.h	124;"	d
DEBUG_HYPERBIN	cmsat/constants.h	125;"	d
DEBUG_PROPAGATEFROM	cmsat/constants.h	113;"	d
DEBUG_REPLACER	cmsat/constants.h	116;"	d
DEBUG_USELESS_LEARNT_BIN_REMOVAL	cmsat/constants.h	98;"	d
DEBUG_VARELIM	cmsat/constants.h	112;"	d
DEBUG_WATCHED	cmsat/constants.h	114;"	d
DEFAULT_MAX_GLUE	cmsat/constants.h	76;"	d
DUMP_STATS	cmsat/constants.h	41;"	d
DYNAMICALLY_UPDATE_GLUE	cmsat/constants.h	82;"	d
FIXCLEANREPLACE	cmsat/constants.h	48;"	d
FULLRESTART_MULTIPLIER	cmsat/constants.h	66;"	d
FULLRESTART_MULTIPLIER_MULTIPLIER	cmsat/constants.h	67;"	d
MAX_CLAUSENUM_XORFIND	cmsat/constants.h	53;"	d
MAX_CONFL_BETWEEN_SIMPLIFY	cmsat/constants.h	61;"	d
MAX_GAUSS_XOR_CLAUSES	cmsat/constants.h	73;"	d
MAX_GLUE_BITS	cmsat/constants.h	77;"	d
MAX_THEORETICAL_GLUE	cmsat/constants.h	78;"	d
MIN_GAUSS_XOR_CLAUSES	cmsat/constants.h	72;"	d
MIN_GLUE_RESTART	cmsat/constants.h	79;"	d
NBCLAUSESBEFOREREDUCE	cmsat/constants.h	46;"	d
NUM_CONFL_BURST_SEARCH	cmsat/constants.h	63;"	d
PERCENTAGECLEANCLAUSES	cmsat/constants.h	50;"	d
PERCENTAGEPERFORMREPLACE	cmsat/constants.h	49;"	d
RATIOREMOVECLAUSES	cmsat/constants.h	45;"	d
RESTART_TYPE_DECIDER_FROM	cmsat/constants.h	68;"	d
RESTART_TYPE_DECIDER_UNTIL	cmsat/constants.h	69;"	d
SILENT_DEBUG	cmsat/constants.h	108;"	d
SILENT_DEBUG	cmsat/constants.h	97;"	d
SIMPLIFY_MULTIPLIER	cmsat/constants.h	59;"	d
SIMPLIFY_MULTIPLIER_MULTIPLIER	cmsat/constants.h	60;"	d
SYNC_EVERY_CONFL	cmsat/constants.h	88;"	d
UPDATE_TRANSOTFSSR_CACHE	cmsat/constants.h	56;"	d
__builtin_prefetch	cmsat/constants.h	137;"	d
release_assert	cmsat/constants.h	22;"	d
INT16_C	cmsat/msvc/stdint.h	231;"	d
INT16_MAX	cmsat/msvc/stdint.h	135;"	d
INT16_MIN	cmsat/msvc/stdint.h	134;"	d
INT32_C	cmsat/msvc/stdint.h	232;"	d
INT32_MAX	cmsat/msvc/stdint.h	137;"	d
INT32_MIN	cmsat/msvc/stdint.h	136;"	d
INT64_C	cmsat/msvc/stdint.h	233;"	d
INT64_MAX	cmsat/msvc/stdint.h	139;"	d
INT64_MIN	cmsat/msvc/stdint.h	138;"	d
INT8_C	cmsat/msvc/stdint.h	230;"	d
INT8_MAX	cmsat/msvc/stdint.h	133;"	d
INT8_MIN	cmsat/msvc/stdint.h	132;"	d
INTMAX_C	cmsat/msvc/stdint.h	241;"	d
INTMAX_MAX	cmsat/msvc/stdint.h	186;"	d
INTMAX_MIN	cmsat/msvc/stdint.h	185;"	d
INTPTR_MAX	cmsat/msvc/stdint.h	176;"	d
INTPTR_MAX	cmsat/msvc/stdint.h	180;"	d
INTPTR_MIN	cmsat/msvc/stdint.h	175;"	d
INTPTR_MIN	cmsat/msvc/stdint.h	179;"	d
INT_FAST16_MAX	cmsat/msvc/stdint.h	163;"	d
INT_FAST16_MIN	cmsat/msvc/stdint.h	162;"	d
INT_FAST32_MAX	cmsat/msvc/stdint.h	165;"	d
INT_FAST32_MIN	cmsat/msvc/stdint.h	164;"	d
INT_FAST64_MAX	cmsat/msvc/stdint.h	167;"	d
INT_FAST64_MIN	cmsat/msvc/stdint.h	166;"	d
INT_FAST8_MAX	cmsat/msvc/stdint.h	161;"	d
INT_FAST8_MIN	cmsat/msvc/stdint.h	160;"	d
INT_LEAST16_MAX	cmsat/msvc/stdint.h	149;"	d
INT_LEAST16_MIN	cmsat/msvc/stdint.h	148;"	d
INT_LEAST32_MAX	cmsat/msvc/stdint.h	151;"	d
INT_LEAST32_MIN	cmsat/msvc/stdint.h	150;"	d
INT_LEAST64_MAX	cmsat/msvc/stdint.h	153;"	d
INT_LEAST64_MIN	cmsat/msvc/stdint.h	152;"	d
INT_LEAST8_MAX	cmsat/msvc/stdint.h	147;"	d
INT_LEAST8_MIN	cmsat/msvc/stdint.h	146;"	d
PTRDIFF_MAX	cmsat/msvc/stdint.h	193;"	d
PTRDIFF_MAX	cmsat/msvc/stdint.h	196;"	d
PTRDIFF_MIN	cmsat/msvc/stdint.h	192;"	d
PTRDIFF_MIN	cmsat/msvc/stdint.h	195;"	d
SIG_ATOMIC_MAX	cmsat/msvc/stdint.h	200;"	d
SIG_ATOMIC_MIN	cmsat/msvc/stdint.h	199;"	d
SIZE_MAX	cmsat/msvc/stdint.h	204;"	d
SIZE_MAX	cmsat/msvc/stdint.h	206;"	d
UINT16_C	cmsat/msvc/stdint.h	236;"	d
UINT16_MAX	cmsat/msvc/stdint.h	141;"	d
UINT32_C	cmsat/msvc/stdint.h	237;"	d
UINT32_MAX	cmsat/msvc/stdint.h	142;"	d
UINT64_C	cmsat/msvc/stdint.h	238;"	d
UINT64_MAX	cmsat/msvc/stdint.h	143;"	d
UINT8_C	cmsat/msvc/stdint.h	235;"	d
UINT8_MAX	cmsat/msvc/stdint.h	140;"	d
UINTMAX_C	cmsat/msvc/stdint.h	242;"	d
UINTMAX_MAX	cmsat/msvc/stdint.h	187;"	d
UINTPTR_MAX	cmsat/msvc/stdint.h	177;"	d
UINTPTR_MAX	cmsat/msvc/stdint.h	181;"	d
UINT_FAST16_MAX	cmsat/msvc/stdint.h	169;"	d
UINT_FAST32_MAX	cmsat/msvc/stdint.h	170;"	d
UINT_FAST64_MAX	cmsat/msvc/stdint.h	171;"	d
UINT_FAST8_MAX	cmsat/msvc/stdint.h	168;"	d
UINT_LEAST16_MAX	cmsat/msvc/stdint.h	155;"	d
UINT_LEAST32_MAX	cmsat/msvc/stdint.h	156;"	d
UINT_LEAST64_MAX	cmsat/msvc/stdint.h	157;"	d
UINT_LEAST8_MAX	cmsat/msvc/stdint.h	154;"	d
WCHAR_MAX	cmsat/msvc/stdint.h	215;"	d
WCHAR_MIN	cmsat/msvc/stdint.h	212;"	d
WINT_MAX	cmsat/msvc/stdint.h	219;"	d
WINT_MIN	cmsat/msvc/stdint.h	218;"	d
_MSC_STDINT_H_	cmsat/msvc/stdint.h	37;"	d
_W64	cmsat/msvc/stdint.h	60;"	d
_W64	cmsat/msvc/stdint.h	62;"	d
int16_t	cmsat/msvc/stdint.h	/^typedef signed __int16 int16_t;$/;"	t
int16_t	cmsat/msvc/stdint.h	/^typedef signed short int16_t;$/;"	t
int32_t	cmsat/msvc/stdint.h	/^typedef signed __int32 int32_t;$/;"	t
int32_t	cmsat/msvc/stdint.h	/^typedef signed int int32_t;$/;"	t
int64_t	cmsat/msvc/stdint.h	/^typedef signed __int64 int64_t;$/;"	t
int8_t	cmsat/msvc/stdint.h	/^typedef signed __int8 int8_t;$/;"	t
int8_t	cmsat/msvc/stdint.h	/^typedef signed char int8_t;$/;"	t
int_fast16_t	cmsat/msvc/stdint.h	/^typedef int16_t int_fast16_t;$/;"	t
int_fast32_t	cmsat/msvc/stdint.h	/^typedef int32_t int_fast32_t;$/;"	t
int_fast64_t	cmsat/msvc/stdint.h	/^typedef int64_t int_fast64_t;$/;"	t
int_fast8_t	cmsat/msvc/stdint.h	/^typedef int8_t int_fast8_t;$/;"	t
int_least16_t	cmsat/msvc/stdint.h	/^typedef int16_t int_least16_t;$/;"	t
int_least32_t	cmsat/msvc/stdint.h	/^typedef int32_t int_least32_t;$/;"	t
int_least64_t	cmsat/msvc/stdint.h	/^typedef int64_t int_least64_t;$/;"	t
int_least8_t	cmsat/msvc/stdint.h	/^typedef int8_t int_least8_t;$/;"	t
intmax_t	cmsat/msvc/stdint.h	/^typedef int64_t intmax_t;$/;"	t
intptr_t	cmsat/msvc/stdint.h	/^typedef _W64 signed int intptr_t;$/;"	t
intptr_t	cmsat/msvc/stdint.h	/^typedef signed __int64 intptr_t;$/;"	t
uint16_t	cmsat/msvc/stdint.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint16_t	cmsat/msvc/stdint.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	cmsat/msvc/stdint.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	cmsat/msvc/stdint.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	cmsat/msvc/stdint.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	cmsat/msvc/stdint.h	/^typedef unsigned __int8 uint8_t;$/;"	t
uint8_t	cmsat/msvc/stdint.h	/^typedef unsigned char uint8_t;$/;"	t
uint_fast16_t	cmsat/msvc/stdint.h	/^typedef uint16_t uint_fast16_t;$/;"	t
uint_fast32_t	cmsat/msvc/stdint.h	/^typedef uint32_t uint_fast32_t;$/;"	t
uint_fast64_t	cmsat/msvc/stdint.h	/^typedef uint64_t uint_fast64_t;$/;"	t
uint_fast8_t	cmsat/msvc/stdint.h	/^typedef uint8_t uint_fast8_t;$/;"	t
uint_least16_t	cmsat/msvc/stdint.h	/^typedef uint16_t uint_least16_t;$/;"	t
uint_least32_t	cmsat/msvc/stdint.h	/^typedef uint32_t uint_least32_t;$/;"	t
uint_least64_t	cmsat/msvc/stdint.h	/^typedef uint64_t uint_least64_t;$/;"	t
uint_least8_t	cmsat/msvc/stdint.h	/^typedef uint8_t uint_least8_t;$/;"	t
uintmax_t	cmsat/msvc/stdint.h	/^typedef uint64_t uintmax_t;$/;"	t
uintptr_t	cmsat/msvc/stdint.h	/^typedef _W64 unsigned int uintptr_t;$/;"	t
uintptr_t	cmsat/msvc/stdint.h	/^typedef unsigned __int64 uintptr_t;$/;"	t
TIME_MEM_H	cmsat/time_mem.h	23;"	d
cpuTime	cmsat/time_mem.h	/^static inline double cpuTime(void) {$/;"	f
cpuTimeTotal	cmsat/time_mem.h	/^static inline double cpuTimeTotal(void) {$/;"	f
memReadStat	cmsat/time_mem.h	/^static inline int memReadStat(int field) {$/;"	f
memUsed	cmsat/time_mem.h	/^static inline uint64_t memUsed() {$/;"	f
memUsed	cmsat/time_mem.h	/^static inline uint64_t memUsed(void) {$/;"	f
totalTime	cmsat/time_mem.h	/^static inline double totalTime(void){$/;"	f
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	config.guess	/^main ()$/;"	f
HAVE_DLFCN_H	config.h	5;"	d
HAVE_INTTYPES_H	config.h	8;"	d
HAVE_IOSTREAM	config.h	11;"	d
HAVE_LIBZ	config.h	14;"	d
HAVE_MEMORY_H	config.h	17;"	d
HAVE_STDINT_H	config.h	20;"	d
HAVE_STDLIB_H	config.h	23;"	d
HAVE_STRINGS_H	config.h	26;"	d
HAVE_STRING_H	config.h	29;"	d
HAVE_SYS_STAT_H	config.h	32;"	d
HAVE_SYS_TYPES_H	config.h	35;"	d
HAVE_UNISTD_H	config.h	38;"	d
LT_OBJDIR	config.h	42;"	d
PACKAGE	config.h	45;"	d
PACKAGE_BUGREPORT	config.h	48;"	d
PACKAGE_NAME	config.h	51;"	d
PACKAGE_STRING	config.h	54;"	d
PACKAGE_TARNAME	config.h	57;"	d
PACKAGE_URL	config.h	60;"	d
PACKAGE_VERSION	config.h	63;"	d
SIZEOF_INT	config.h	66;"	d
SIZEOF_LONG	config.h	69;"	d
SIZEOF_SIZE_T	config.h	72;"	d
STDC_HEADERS	config.h	75;"	d
USE_GAUSS	config.h	78;"	d
VERSION	config.h	81;"	d
Lit	configure	/^        Lit()$/;"	f
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_check_header_mongrel	configure	/^ac_fn_cxx_check_header_mongrel ()$/;"	f
ac_fn_cxx_compute_int	configure	/^ac_fn_cxx_compute_int ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
ac_fn_cxx_try_run	configure	/^ac_fn_cxx_try_run ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
func_append	configure	/^func_append ()\\$/;"	f
func_append_quoted	configure	/^func_append_quoted ()\\$/;"	f
func_arith	configure	/^func_arith ()\\$/;"	f
func_basename	configure	/^func_basename ()\\$/;"	f
func_dirname	configure	/^func_dirname ()\\$/;"	f
func_dirname_and_basename	configure	/^func_dirname_and_basename ()\\$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_len	configure	/^func_len ()\\$/;"	f
func_lo2o	configure	/^func_lo2o ()\\$/;"	f
func_split_long_opt	configure	/^func_split_long_opt ()\\$/;"	f
func_split_short_opt	configure	/^func_split_short_opt ()\\$/;"	f
func_stripname	configure	/^func_stripname ()\\$/;"	f
func_stripname_cnf	configure	/^func_stripname_cnf ()$/;"	f
func_xform	configure	/^func_xform ()\\$/;"	f
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
CreateProcess	libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
func_append	libtool	/^func_append ()$/;"	f
func_append_quoted	libtool	/^func_append_quoted ()$/;"	f
func_arith	libtool	/^func_arith ()$/;"	f
func_basename	libtool	/^func_basename ()$/;"	f
func_check_version_match	libtool	/^func_check_version_match ()$/;"	f
func_config	libtool	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	libtool	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	libtool	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	libtool	/^func_cygpath ()$/;"	f
func_dirname	libtool	/^func_dirname ()$/;"	f
func_dirname_and_basename	libtool	/^func_dirname_and_basename ()$/;"	f
func_echo	libtool	/^func_echo ()$/;"	f
func_echo_all	libtool	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	libtool	/^func_emit_wrapper ()$/;"	f
func_enable_tag	libtool	/^func_enable_tag ()$/;"	f
func_error	libtool	/^func_error ()$/;"	f
func_exec_program	libtool	/^func_exec_program ()$/;"	f
func_exec_program_core	libtool	/^func_exec_program_core ()$/;"	f
func_execute_cmds	libtool	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	libtool	/^func_extract_archives ()$/;"	f
func_fallback_echo	libtool	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_error	libtool	/^func_fatal_error ()$/;"	f
func_fatal_help	libtool	/^func_fatal_help ()$/;"	f
func_features	libtool	/^func_features ()$/;"	f
func_generate_dlsyms	libtool	/^func_generate_dlsyms ()$/;"	f
func_grep	libtool	/^func_grep ()$/;"	f
func_help	libtool	/^func_help ()$/;"	f
func_infer_tag	libtool	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	libtool	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	libtool	/^func_lalib_unsafe_p ()$/;"	f
func_len	libtool	/^func_len ()$/;"	f
func_lo2o	libtool	/^func_lo2o ()$/;"	f
func_lt_dump_args	libtool	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	libtool	/^func_missing_arg ()$/;"	f
func_mkdir_p	libtool	/^func_mkdir_p ()$/;"	f
func_mktempdir	libtool	/^func_mktempdir ()$/;"	f
func_mode_compile	libtool	/^func_mode_compile ()$/;"	f
func_mode_execute	libtool	/^func_mode_execute ()$/;"	f
func_mode_finish	libtool	/^func_mode_finish ()$/;"	f
func_mode_help	libtool	/^func_mode_help ()$/;"	f
func_mode_install	libtool	/^func_mode_install ()$/;"	f
func_mode_link	libtool	/^func_mode_link ()$/;"	f
func_mode_uninstall	libtool	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	libtool	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	libtool	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	libtool	/^func_quote_for_expand ()$/;"	f
func_relative_path	libtool	/^func_relative_path ()$/;"	f
func_replace_sysroot	libtool	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	libtool	/^func_resolve_sysroot ()$/;"	f
func_show_eval	libtool	/^func_show_eval ()$/;"	f
func_show_eval_locale	libtool	/^func_show_eval_locale ()$/;"	f
func_source	libtool	/^func_source ()$/;"	f
func_split_long_opt	libtool	/^func_split_long_opt ()$/;"	f
func_split_short_opt	libtool	/^func_split_short_opt ()$/;"	f
func_stripname	libtool	/^func_stripname ()$/;"	f
func_to_host_file	libtool	/^func_to_host_file ()$/;"	f
func_to_host_path	libtool	/^func_to_host_path ()$/;"	f
func_to_tool_file	libtool	/^func_to_tool_file ()$/;"	f
func_tr_sh	libtool	/^func_tr_sh ()$/;"	f
func_usage	libtool	/^func_usage ()$/;"	f
func_verbose	libtool	/^func_verbose ()$/;"	f
func_version	libtool	/^func_version ()$/;"	f
func_warning	libtool	/^func_warning ()$/;"	f
func_win32_import_lib_p	libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	libtool	/^func_win32_libid ()$/;"	f
func_write_libtool_object	libtool	/^func_write_libtool_object ()$/;"	f
func_xform	libtool	/^func_xform ()$/;"	f
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
func_append	ltmain.sh	/^func_append ()$/;"	f
func_append_quoted	ltmain.sh	/^func_append_quoted ()$/;"	f
func_arith	ltmain.sh	/^func_arith ()$/;"	f
func_basename	ltmain.sh	/^func_basename ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_dirname	ltmain.sh	/^func_dirname ()$/;"	f
func_dirname_and_basename	ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	ltmain.sh	/^func_len ()$/;"	f
func_lo2o	ltmain.sh	/^func_lo2o ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_split_long_opt	ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_short_opt	ltmain.sh	/^func_split_short_opt ()$/;"	f
func_stripname	ltmain.sh	/^func_stripname ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	ltmain.sh	/^func_xform ()$/;"	f
ACLOCAL	man/Makefile	/^ACLOCAL = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run aclocal-1.11$/;"	m
ACLOCAL_M4	man/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
AMTAR	man/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AR	man/Makefile	/^AR = ar$/;"	m
AUTOCONF	man/Makefile	/^AUTOCONF = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run autoconf$/;"	m
AUTOHEADER	man/Makefile	/^AUTOHEADER = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run autoheader$/;"	m
AUTOMAKE	man/Makefile	/^AUTOMAKE = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run automake-1.11$/;"	m
AWK	man/Makefile	/^AWK = mawk$/;"	m
CC	man/Makefile	/^CC = \/usr\/bin\/gcc$/;"	m
CCDEPMODE	man/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CFLAGS	man/Makefile	/^CFLAGS = -g3 -gdwarf-2$/;"	m
CONFIG_CLEAN_FILES	man/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	man/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	man/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	man/Makefile	/^CPP = \/usr\/bin\/gcc -E$/;"	m
CPPFLAGS	man/Makefile	/^CPPFLAGS = $/;"	m
CXX	man/Makefile	/^CXX = \/usr\/bin\/g++$/;"	m
CXXCPP	man/Makefile	/^CXXCPP = \/usr\/bin\/g++ -E$/;"	m
CXXDEPMODE	man/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	man/Makefile	/^CXXFLAGS = -g3 -gdwarf-2$/;"	m
CYGPATH_W	man/Makefile	/^CYGPATH_W = echo$/;"	m
DEFS	man/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	man/Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	man/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	man/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_SOURCES	man/Makefile	/^DIST_SOURCES =$/;"	m
DLLTOOL	man/Makefile	/^DLLTOOL = false$/;"	m
DSYMUTIL	man/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	man/Makefile	/^DUMPBIN = $/;"	m
ECHO_C	man/Makefile	/^ECHO_C = $/;"	m
ECHO_N	man/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	man/Makefile	/^ECHO_T = $/;"	m
EGREP	man/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EXEEXT	man/Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	man/Makefile	/^EXTRA_DIST = $(man_MANS)$/;"	m
FGREP	man/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
GREP	man/Makefile	/^GREP = \/bin\/grep$/;"	m
INSTALL	man/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	man/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	man/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	man/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	man/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	man/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
LD	man/Makefile	/^LD = \/usr\/bin\/ld$/;"	m
LDFLAGS	man/Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	man/Makefile	/^LIBOBJS = $/;"	m
LIBS	man/Makefile	/^LIBS = -lz $/;"	m
LIBTOOL	man/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIPO	man/Makefile	/^LIPO = $/;"	m
LN_S	man/Makefile	/^LN_S = ln -s$/;"	m
LTLIBOBJS	man/Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	man/Makefile	/^MAKEINFO = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/missing --run makeinfo$/;"	m
MANIFEST_TOOL	man/Makefile	/^MANIFEST_TOOL = :$/;"	m
MANS	man/Makefile	/^MANS = $(man_MANS)$/;"	m
MKDIR_P	man/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
NM	man/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	man/Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	man/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	man/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NROFF	man/Makefile	/^NROFF = nroff$/;"	m
OBJDUMP	man/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	man/Makefile	/^OBJEXT = o$/;"	m
OPENMP_CXXFLAGS	man/Makefile	/^OPENMP_CXXFLAGS = -fopenmp$/;"	m
OTOOL	man/Makefile	/^OTOOL = $/;"	m
OTOOL64	man/Makefile	/^OTOOL64 = $/;"	m
PACKAGE	man/Makefile	/^PACKAGE = cmsat$/;"	m
PACKAGE_BUGREPORT	man/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	man/Makefile	/^PACKAGE_NAME = cmsat$/;"	m
PACKAGE_STRING	man/Makefile	/^PACKAGE_STRING = cmsat 2.9.8$/;"	m
PACKAGE_TARNAME	man/Makefile	/^PACKAGE_TARNAME = cmsat$/;"	m
PACKAGE_URL	man/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	man/Makefile	/^PACKAGE_VERSION = 2.9.8$/;"	m
PATH_SEPARATOR	man/Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	man/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	man/Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	man/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	man/Makefile	/^PRE_UNINSTALL = :$/;"	m
RANLIB	man/Makefile	/^RANLIB = ranlib$/;"	m
SED	man/Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	man/Makefile	/^SET_MAKE = $/;"	m
SHELL	man/Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	man/Makefile	/^SOURCES =$/;"	m
STRIP	man/Makefile	/^STRIP = strip$/;"	m
VERSION	man/Makefile	/^VERSION = 2.9.8$/;"	m
abs_builddir	man/Makefile	/^abs_builddir = \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/man$/;"	m
abs_srcdir	man/Makefile	/^abs_srcdir = \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/man$/;"	m
abs_top_builddir	man/Makefile	/^abs_top_builddir = \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8$/;"	m
abs_top_srcdir	man/Makefile	/^abs_top_srcdir = \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8$/;"	m
ac_ct_AR	man/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	man/Makefile	/^ac_ct_CC = \/usr\/bin\/gcc$/;"	m
ac_ct_CXX	man/Makefile	/^ac_ct_CXX = $/;"	m
ac_ct_DUMPBIN	man/Makefile	/^ac_ct_DUMPBIN = $/;"	m
am__aclocal_m4_deps	man/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__base_list	man/Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	man/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	man/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	man/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__include	man/Makefile	/^am__include = include$/;"	m
am__install_max	man/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	man/Makefile	/^am__installdirs = "$(DESTDIR)$(man1dir)"$/;"	m
am__leading_dot	man/Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	man/Makefile	/^am__make_dryrun = \\$/;"	m
am__nobase_list	man/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	man/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	man/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__quote	man/Makefile	/^am__quote = $/;"	m
am__strip_dir	man/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	man/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uninstall_files_from_dir	man/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__untar	man/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__vpath_adj	man/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	man/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
bindir	man/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
build	man/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build_alias	man/Makefile	/^build_alias = $/;"	m
build_cpu	man/Makefile	/^build_cpu = i686$/;"	m
build_os	man/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	man/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_vendor	man/Makefile	/^build_vendor = pc$/;"	m
builddir	man/Makefile	/^builddir = .$/;"	m
datadir	man/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	man/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
docdir	man/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dvidir	man/Makefile	/^dvidir = ${docdir}$/;"	m
exec_prefix	man/Makefile	/^exec_prefix = ${prefix}$/;"	m
host	man/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host_alias	man/Makefile	/^host_alias = $/;"	m
host_cpu	man/Makefile	/^host_cpu = i686$/;"	m
host_os	man/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	man/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_vendor	man/Makefile	/^host_vendor = pc$/;"	m
htmldir	man/Makefile	/^htmldir = ${docdir}$/;"	m
includedir	man/Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	man/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
install_sh	man/Makefile	/^install_sh = ${SHELL} \/home\/kuldeep\/Research\/UniGen\/Code\/cmsat-2.9.8\/install-sh$/;"	m
install_sh_DATA	man/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	man/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	man/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
libdir	man/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	man/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
localedir	man/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	man/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
man1dir	man/Makefile	/^man1dir = $(mandir)\/man1$/;"	m
man_MANS	man/Makefile	/^man_MANS = cryptominisat.1$/;"	m
mandir	man/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mkdir_p	man/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	man/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
oldincludedir	man/Makefile	/^oldincludedir = \/usr\/include$/;"	m
pdfdir	man/Makefile	/^pdfdir = ${docdir}$/;"	m
pkgdatadir	man/Makefile	/^pkgdatadir = $(datadir)\/cmsat$/;"	m
pkgincludedir	man/Makefile	/^pkgincludedir = $(includedir)\/cmsat$/;"	m
pkglibdir	man/Makefile	/^pkglibdir = $(libdir)\/cmsat$/;"	m
pkglibexecdir	man/Makefile	/^pkglibexecdir = $(libexecdir)\/cmsat$/;"	m
prefix	man/Makefile	/^prefix = \/usr\/local$/;"	m
program_transform_name	man/Makefile	/^program_transform_name = s,x,x,$/;"	m
psdir	man/Makefile	/^psdir = ${docdir}$/;"	m
sbindir	man/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sharedstatedir	man/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
srcdir	man/Makefile	/^srcdir = .$/;"	m
subdir	man/Makefile	/^subdir = man$/;"	m
sysconfdir	man/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
target_alias	man/Makefile	/^target_alias = $/;"	m
top_build_prefix	man/Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	man/Makefile	/^top_builddir = ..$/;"	m
top_srcdir	man/Makefile	/^top_srcdir = ..$/;"	m
transform	man/Makefile	/^transform = $(program_transform_name)$/;"	m
